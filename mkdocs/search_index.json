{
    "docs": [
        {
            "location": "/",
            "text": "Packages\n\n\n\n\npackages/stdlib\n\n\nassert\n\n\nbuiltin\n\n\nbuiltin_test\n\n\nbureaucracy\n\n\ncapsicum\n\n\ncollections\n\n\ndebug\n\n\nencode/base64\n\n\nfiles\n\n\nglob\n\n\njson\n\n\nmath\n\n\nnet\n\n\nnet/http\n\n\nnet/ssl\n\n\noptions\n\n\nponytest\n\n\npromises\n\n\nrandom\n\n\nregex\n\n\nsignals\n\n\nstrings\n\n\nterm\n\n\ntime",
            "title": "stdlib"
        },
        {
            "location": "/packages-stdlib--index/",
            "text": "Pony Standard Library\n\n\nThis package represents the test suite for the Pony standard library.\n\n\nFor every new package, please add a Main actor and tests to the package in a\nfile called 'test.pony'. Then add a corresponding use directive and a line to\nthe main actor constructor of this package to invoke those tests.\n\n\nAll tests can be run by compiling and running packages/stdlib.",
            "title": "Package"
        },
        {
            "location": "/packages-stdlib--index/#pony-standard-library",
            "text": "This package represents the test suite for the Pony standard library.  For every new package, please add a Main actor and tests to the package in a\nfile called 'test.pony'. Then add a corresponding use directive and a line to\nthe main actor constructor of this package to invoke those tests.  All tests can be run by compiling and running packages/stdlib.",
            "title": "Pony Standard Library"
        },
        {
            "location": "/packages-stdlib-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"packages/stdlib\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/packages-stdlib-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/packages-stdlib-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/packages-stdlib-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/packages-stdlib-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/packages-stdlib-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/assert--index/",
            "text": "No package doc string provided for assert.",
            "title": "Package"
        },
        {
            "location": "/assert-Assert/",
            "text": "primitive Assert\n\n\nIn package \"assert\".\n\n\nPublic, default capability val.\n\n\nThis is a debug only assertion. If the test is false, it will print any\nsupplied error message to stderr and raise an error.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(test: \nBool\n val, optional msg: \nString\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nAssert\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nAssert\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive Assert"
        },
        {
            "location": "/assert-Assert/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/assert-Assert/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/assert-Assert/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/assert-Assert/#fun-apply",
            "text": "fun box\n apply(test:  Bool  val, optional msg:  String  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/assert-Assert/#fun-eq",
            "text": "fun box\n eq(that:  Assert  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/assert-Assert/#fun-ne",
            "text": "fun box\n ne(that:  Assert  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/assert-Fact/",
            "text": "primitive Fact\n\n\nIn package \"assert\".\n\n\nPublic, default capability val.\n\n\nThis is an assertion that is always enabled. If the test is false, it will\nprint any supplied error message to stderr and raise an error.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(test: \nBool\n val, optional msg: \nString\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFact\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFact\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive Fact"
        },
        {
            "location": "/assert-Fact/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/assert-Fact/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/assert-Fact/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/assert-Fact/#fun-apply",
            "text": "fun box\n apply(test:  Bool  val, optional msg:  String  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/assert-Fact/#fun-eq",
            "text": "fun box\n eq(that:  Fact  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/assert-Fact/#fun-ne",
            "text": "fun box\n ne(that:  Fact  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin--index/",
            "text": "No package doc string provided for builtin.",
            "title": "Package"
        },
        {
            "location": "/builtin-Align/",
            "text": "type Align is ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type Align"
        },
        {
            "location": "/builtin-AlignCenter/",
            "text": "primitive AlignCenter\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nAlignCenter\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nAlignCenter\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive AlignCenter"
        },
        {
            "location": "/builtin-AlignCenter/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-AlignCenter/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-AlignCenter/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-AlignCenter/#fun-eq",
            "text": "fun box\n eq(that:  AlignCenter  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-AlignCenter/#fun-ne",
            "text": "fun box\n ne(that:  AlignCenter  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-AlignLeft/",
            "text": "primitive AlignLeft\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nAlignLeft\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nAlignLeft\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive AlignLeft"
        },
        {
            "location": "/builtin-AlignLeft/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-AlignLeft/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-AlignLeft/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-AlignLeft/#fun-eq",
            "text": "fun box\n eq(that:  AlignLeft  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-AlignLeft/#fun-ne",
            "text": "fun box\n ne(that:  AlignLeft  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-AlignRight/",
            "text": "primitive AlignRight\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nAlignRight\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nAlignRight\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive AlignRight"
        },
        {
            "location": "/builtin-AlignRight/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-AlignRight/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-AlignRight/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-AlignRight/#fun-eq",
            "text": "fun box\n eq(that:  AlignRight  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-AlignRight/#fun-ne",
            "text": "fun box\n ne(that:  AlignRight  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-AmbientAuth/",
            "text": "primitive AmbientAuth\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nThis type represents the root capability. When a Pony program starts, the\nEnv passed to the Main actor contains an instance of the root capability.\n\n\nAmbient access to the root capability is denied outside of the builtin\npackage. Inside the builtin package, only Env creates a Root.\n\n\nThe root capability can be used by any package that wants to establish a\nprinciple of least authority. A typical usage is to have a parameter on a\nconstructor for some resource that expects a limiting capability specific to\nthe package, but will also accept the root capability as representing\nunlimited access.\n\n\nConstructors\n\n\nnew _create()\n\n\nnew _create()\n\n\nPrivate.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nAmbientAuth\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nAmbientAuth\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive AmbientAuth"
        },
        {
            "location": "/builtin-AmbientAuth/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-AmbientAuth/#new-_create",
            "text": "new _create()  Private.",
            "title": "new _create()"
        },
        {
            "location": "/builtin-AmbientAuth/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-AmbientAuth/#fun-eq",
            "text": "fun box\n eq(that:  AmbientAuth  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-AmbientAuth/#fun-ne",
            "text": "fun box\n ne(that:  AmbientAuth  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Any/",
            "text": "interface Any\n\n\nIn package \"builtin\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.",
            "title": "interface Any"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/",
            "text": "trait _ArithmeticConvertible\n\n\nIn package \"builtin\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nFunctions\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "trait _ArithmeticConvertible"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-_ArithmeticConvertible/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-Array/",
            "text": "class Array[A: A] is \nSeq\n[A] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nContiguous, resizable memory to store elements of type A.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional len: \nUSize\n val)\n\n\nPublic.\n\n\nCreate an array with zero elements, but space for len elements.\n\n\nnew from_cstring()\n\n\nnew from_cstring(ptr: \nPointer\n[A] ref, len: \nUSize\n val, optional alloc: \nUSize\n val)\n\n\nPublic.\n\n\nCreate an array from a C-style pointer and length. The contents are not\ncopied.\n\n\nnew init()\n\n\nnew init(from: A^, len: \nUSize\n val)\n\n\nPublic.\n\n\nCreate an array of len elements, all initialised to the given value.\n\n\nnew undefined()\n\n\nnew undefined[optional B: ((A \n \nReal\n[B val] val) \n ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)))](len: \nUSize\n val)\n\n\nPublic.\n\n\nCreate an array of len elements, populating them with random memory. This\nis only allowed for an array of numbers.\n\n\nFunctions\n\n\nfun append()\n\n\nfun ref\n append(seq: \nReadSeq\n[A] box, optional offset: \nUSize\n val, optional len: \nUSize\n val): \nArray\n[A] ref^\n\n\nPublic.\n\n\nAppend the elements from a sequence, starting from the given offset.\nThe array is returned to allow call chaining.\n\n\nfun apply()\n\n\nfun box\n apply(i: \nUSize\n val): this-\nA ?\n\n\nPublic, may raise an error.\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun clear()\n\n\nfun ref\n clear(): \nArray\n[A] ref^\n\n\nPublic.\n\n\nRemove all elements from the array.\nThe array is returned to allow call chaining.\n\n\nfun clone()\n\n\nfun box\n clone(): \nArray\n[this-\nA!] ref^\n\n\nPublic.\n\n\nClone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun concat()\n\n\nfun ref\n concat(iter: \nIterator\n[A^] ref): \nArray\n[A] ref^\n\n\nPublic.\n\n\nAdd iterated elements to the end of the array.\nThe array is returned to allow call chaining.\n\n\nfun copy_to()\n\n\nfun box\n copy_to(dst: \nArray\n[this-\nA!] ref, src_idx: \nUSize\n val, dst_idx: \nUSize\n val, len: \nUSize\n val): this-\nArray\n[A] ref^\n\n\nPublic.\n\n\nCopy len elements from this(src_idx) to dst(dst_idx).\nThe array is returned to allow call chaining.\n\n\nfun cstring()\n\n\nfun box\n cstring(): \nPointer\n[A] tag\n\n\nPublic.\n\n\nReturn the underlying C-style pointer.\n\n\nfun _cstring()\n\n\nfun box\n _cstring(): \nPointer\n[A] box\n\n\nPrivate.\n\n\nInternal cstring.\n\n\nfun delete()\n\n\nfun ref\n delete(i: \nUSize\n val): A^ ?\n\n\nPublic, may raise an error.\n\n\nDelete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.\n\n\nfun find()\n\n\nfun box\n find(value: A!, optional offset: \nUSize\n val, optional nth: \nUSize\n val): \nUSize\n val ?\n\n\nPublic, may raise an error.\n\n\nFind the n-th appearance of value in the array, by identity. Return the\nindex, or raise an error if value isn't present.\n\n\nfun insert()\n\n\nfun ref\n insert(i: \nUSize\n val, value: A): \nArray\n[A] ref^ ?\n\n\nPublic, may raise an error.\n\n\nInsert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.\nThe array is returned to allow call chaining.\n\n\nfun keys()\n\n\nfun box\n keys(): \nArrayKeys\n[A, this-\nArray\n[A] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator over the indices in the array.\n\n\nfun pairs()\n\n\nfun box\n pairs(): \nArrayPairs\n[A, this-\nArray\n[A] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator over the (index, value) pairs in the array.\n\n\nfun permute()\n\n\nfun box\n permute(indices: \nIterator\n[\nUSize\n val] ref): \nArray\n[this-\nA!] ref^ ?\n\n\nPublic, may raise an error.\n\n\nCreate a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun pop()\n\n\nfun ref\n pop(): A^ ?\n\n\nPublic, may raise an error.\n\n\nRemove an element from the end of the array.\nThe removed element is returned.\n\n\nfun push()\n\n\nfun ref\n push(value: A): \nArray\n[A] ref^\n\n\nPublic.\n\n\nAdd an element to the end of the array.\nThe array is returned to allow call chaining.\n\n\nfun remove()\n\n\nfun ref\n remove(i: \nUSize\n val, n: \nUSize\n val): \nArray\n[A] ref^\n\n\nPublic.\n\n\nRemove n elements from the array, beginning at index i.\nThe array is returned to allow call chaining.\n\n\nfun reserve()\n\n\nfun ref\n reserve(len: \nUSize\n val): \nArray\n[A] ref^\n\n\nPublic.\n\n\nReserve space for len elements, including whatever elements are already in\nthe array.\n\n\nfun reverse()\n\n\nfun box\n reverse(): \nArray\n[this-\nA!] ref^\n\n\nPublic.\n\n\nCreate a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun reverse_in_place()\n\n\nfun ref\n reverse_in_place(): \nArray\n[A] ref^\n\n\nPublic.\n\n\nReverse the array in place.\n\n\nfun rfind()\n\n\nfun box\n rfind(value: A!, optional offset: \nUSize\n val, optional nth: \nUSize\n val): \nUSize\n val ?\n\n\nPublic, may raise an error.\n\n\nAs find, but search backwards in the array.\n\n\nfun shift()\n\n\nfun ref\n shift(): A^ ?\n\n\nPublic, may raise an error.\n\n\nRemove an element from the beginning of the array.\nThe removed element is returned.\n\n\nfun size()\n\n\nfun box\n size(): \nUSize\n val\n\n\nPublic.\n\n\nThe number of elements in the array.\n\n\nfun slice()\n\n\nfun box\n slice(optional from: \nUSize\n val, optional to: \nUSize\n val, optional step: \nUSize\n val): \nArray\n[this-\nA!] ref^\n\n\nPublic.\n\n\nCreate a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun space()\n\n\nfun box\n space(): \nUSize\n val\n\n\nPublic.\n\n\nThe available space in the array.\n\n\nfun truncate()\n\n\nfun ref\n truncate(len: \nUSize\n val): \nArray\n[A] ref^\n\n\nPublic.\n\n\nTruncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.\nThe array is returned to allow call chaining.\n\n\nfun unshift()\n\n\nfun ref\n unshift(value: A): \nArray\n[A] ref^\n\n\nPublic.\n\n\nAdd an element to the beginning of the array.\nThe array is returned to allow call chaining.\n\n\nfun update()\n\n\nfun ref\n update(i: \nUSize\n val, value: A): A^ ?\n\n\nPublic, may raise an error.\n\n\nChange the i-th element, raising an error if the index is out of bounds.\n\n\nfun values()\n\n\nfun box\n values(): \nArrayValues\n[A, this-\nArray\n[A] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator over the values in the array.",
            "title": "class Array"
        },
        {
            "location": "/builtin-Array/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Array/#new-create",
            "text": "new create(optional len:  USize  val)  Public.  Create an array with zero elements, but space for len elements.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Array/#new-from_cstring",
            "text": "new from_cstring(ptr:  Pointer [A] ref, len:  USize  val, optional alloc:  USize  val)  Public.  Create an array from a C-style pointer and length. The contents are not\ncopied.",
            "title": "new from_cstring()"
        },
        {
            "location": "/builtin-Array/#new-init",
            "text": "new init(from: A^, len:  USize  val)  Public.  Create an array of len elements, all initialised to the given value.",
            "title": "new init()"
        },
        {
            "location": "/builtin-Array/#new-undefined",
            "text": "new undefined[optional B: ((A    Real [B val] val)   (((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val)))](len:  USize  val)  Public.  Create an array of len elements, populating them with random memory. This\nis only allowed for an array of numbers.",
            "title": "new undefined()"
        },
        {
            "location": "/builtin-Array/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Array/#fun-append",
            "text": "fun ref\n append(seq:  ReadSeq [A] box, optional offset:  USize  val, optional len:  USize  val):  Array [A] ref^  Public.  Append the elements from a sequence, starting from the given offset.\nThe array is returned to allow call chaining.",
            "title": "fun append()"
        },
        {
            "location": "/builtin-Array/#fun-apply",
            "text": "fun box\n apply(i:  USize  val): this- A ?  Public, may raise an error.  Get the i-th element, raising an error if the index is out of bounds.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin-Array/#fun-clear",
            "text": "fun ref\n clear():  Array [A] ref^  Public.  Remove all elements from the array.\nThe array is returned to allow call chaining.",
            "title": "fun clear()"
        },
        {
            "location": "/builtin-Array/#fun-clone",
            "text": "fun box\n clone():  Array [this- A!] ref^  Public.  Clone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.",
            "title": "fun clone()"
        },
        {
            "location": "/builtin-Array/#fun-concat",
            "text": "fun ref\n concat(iter:  Iterator [A^] ref):  Array [A] ref^  Public.  Add iterated elements to the end of the array.\nThe array is returned to allow call chaining.",
            "title": "fun concat()"
        },
        {
            "location": "/builtin-Array/#fun-copy_to",
            "text": "fun box\n copy_to(dst:  Array [this- A!] ref, src_idx:  USize  val, dst_idx:  USize  val, len:  USize  val): this- Array [A] ref^  Public.  Copy len elements from this(src_idx) to dst(dst_idx).\nThe array is returned to allow call chaining.",
            "title": "fun copy_to()"
        },
        {
            "location": "/builtin-Array/#fun-cstring",
            "text": "fun box\n cstring():  Pointer [A] tag  Public.  Return the underlying C-style pointer.",
            "title": "fun cstring()"
        },
        {
            "location": "/builtin-Array/#fun-_cstring",
            "text": "fun box\n _cstring():  Pointer [A] box  Private.  Internal cstring.",
            "title": "fun _cstring()"
        },
        {
            "location": "/builtin-Array/#fun-delete",
            "text": "fun ref\n delete(i:  USize  val): A^ ?  Public, may raise an error.  Delete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.",
            "title": "fun delete()"
        },
        {
            "location": "/builtin-Array/#fun-find",
            "text": "fun box\n find(value: A!, optional offset:  USize  val, optional nth:  USize  val):  USize  val ?  Public, may raise an error.  Find the n-th appearance of value in the array, by identity. Return the\nindex, or raise an error if value isn't present.",
            "title": "fun find()"
        },
        {
            "location": "/builtin-Array/#fun-insert",
            "text": "fun ref\n insert(i:  USize  val, value: A):  Array [A] ref^ ?  Public, may raise an error.  Insert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.\nThe array is returned to allow call chaining.",
            "title": "fun insert()"
        },
        {
            "location": "/builtin-Array/#fun-keys",
            "text": "fun box\n keys():  ArrayKeys [A, this- Array [A] ref] ref^  Public.  Return an iterator over the indices in the array.",
            "title": "fun keys()"
        },
        {
            "location": "/builtin-Array/#fun-pairs",
            "text": "fun box\n pairs():  ArrayPairs [A, this- Array [A] ref] ref^  Public.  Return an iterator over the (index, value) pairs in the array.",
            "title": "fun pairs()"
        },
        {
            "location": "/builtin-Array/#fun-permute",
            "text": "fun box\n permute(indices:  Iterator [ USize  val] ref):  Array [this- A!] ref^ ?  Public, may raise an error.  Create a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.",
            "title": "fun permute()"
        },
        {
            "location": "/builtin-Array/#fun-pop",
            "text": "fun ref\n pop(): A^ ?  Public, may raise an error.  Remove an element from the end of the array.\nThe removed element is returned.",
            "title": "fun pop()"
        },
        {
            "location": "/builtin-Array/#fun-push",
            "text": "fun ref\n push(value: A):  Array [A] ref^  Public.  Add an element to the end of the array.\nThe array is returned to allow call chaining.",
            "title": "fun push()"
        },
        {
            "location": "/builtin-Array/#fun-remove",
            "text": "fun ref\n remove(i:  USize  val, n:  USize  val):  Array [A] ref^  Public.  Remove n elements from the array, beginning at index i.\nThe array is returned to allow call chaining.",
            "title": "fun remove()"
        },
        {
            "location": "/builtin-Array/#fun-reserve",
            "text": "fun ref\n reserve(len:  USize  val):  Array [A] ref^  Public.  Reserve space for len elements, including whatever elements are already in\nthe array.",
            "title": "fun reserve()"
        },
        {
            "location": "/builtin-Array/#fun-reverse",
            "text": "fun box\n reverse():  Array [this- A!] ref^  Public.  Create a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.",
            "title": "fun reverse()"
        },
        {
            "location": "/builtin-Array/#fun-reverse_in_place",
            "text": "fun ref\n reverse_in_place():  Array [A] ref^  Public.  Reverse the array in place.",
            "title": "fun reverse_in_place()"
        },
        {
            "location": "/builtin-Array/#fun-rfind",
            "text": "fun box\n rfind(value: A!, optional offset:  USize  val, optional nth:  USize  val):  USize  val ?  Public, may raise an error.  As find, but search backwards in the array.",
            "title": "fun rfind()"
        },
        {
            "location": "/builtin-Array/#fun-shift",
            "text": "fun ref\n shift(): A^ ?  Public, may raise an error.  Remove an element from the beginning of the array.\nThe removed element is returned.",
            "title": "fun shift()"
        },
        {
            "location": "/builtin-Array/#fun-size",
            "text": "fun box\n size():  USize  val  Public.  The number of elements in the array.",
            "title": "fun size()"
        },
        {
            "location": "/builtin-Array/#fun-slice",
            "text": "fun box\n slice(optional from:  USize  val, optional to:  USize  val, optional step:  USize  val):  Array [this- A!] ref^  Public.  Create a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.",
            "title": "fun slice()"
        },
        {
            "location": "/builtin-Array/#fun-space",
            "text": "fun box\n space():  USize  val  Public.  The available space in the array.",
            "title": "fun space()"
        },
        {
            "location": "/builtin-Array/#fun-truncate",
            "text": "fun ref\n truncate(len:  USize  val):  Array [A] ref^  Public.  Truncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.\nThe array is returned to allow call chaining.",
            "title": "fun truncate()"
        },
        {
            "location": "/builtin-Array/#fun-unshift",
            "text": "fun ref\n unshift(value: A):  Array [A] ref^  Public.  Add an element to the beginning of the array.\nThe array is returned to allow call chaining.",
            "title": "fun unshift()"
        },
        {
            "location": "/builtin-Array/#fun-update",
            "text": "fun ref\n update(i:  USize  val, value: A): A^ ?  Public, may raise an error.  Change the i-th element, raising an error if the index is out of bounds.",
            "title": "fun update()"
        },
        {
            "location": "/builtin-Array/#fun-values",
            "text": "fun box\n values():  ArrayValues [A, this- Array [A] ref] ref^  Public.  Return an iterator over the values in the array.",
            "title": "fun values()"
        },
        {
            "location": "/builtin-ArrayKeys/",
            "text": "class ArrayKeys[A: A, B: \nArray\n[A] #read] is \nIterator\n[\nUSize\n val] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(array: B #read)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun next()\n\n\nfun ref\n next(): \nUSize\n val\n\n\nPublic.",
            "title": "class ArrayKeys"
        },
        {
            "location": "/builtin-ArrayKeys/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayKeys/#new-create",
            "text": "new create(array: B #read)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-ArrayKeys/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-ArrayKeys/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/builtin-ArrayKeys/#fun-next",
            "text": "fun ref\n next():  USize  val  Public.",
            "title": "fun next()"
        },
        {
            "location": "/builtin-ArrayPairs/",
            "text": "class ArrayPairs[A: A, B: \nArray\n[A] #read] is \nIterator\n[(\nUSize\n val , B #read-\nA)] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(array: B #read)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun next()\n\n\nfun ref\n next(): (\nUSize\n val , B #read-\nA) ?\n\n\nPublic, may raise an error.",
            "title": "class ArrayPairs"
        },
        {
            "location": "/builtin-ArrayPairs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayPairs/#new-create",
            "text": "new create(array: B #read)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-ArrayPairs/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-ArrayPairs/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/builtin-ArrayPairs/#fun-next",
            "text": "fun ref\n next(): ( USize  val , B #read- A) ?  Public, may raise an error.",
            "title": "fun next()"
        },
        {
            "location": "/builtin-ArrayValues/",
            "text": "class ArrayValues[A: A, B: \nArray\n[A] #read] is \nIterator\n[B #read-\nA] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(array: B #read)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun next()\n\n\nfun ref\n next(): B #read-\nA ?\n\n\nPublic, may raise an error.",
            "title": "class ArrayValues"
        },
        {
            "location": "/builtin-ArrayValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ArrayValues/#new-create",
            "text": "new create(array: B #read)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-ArrayValues/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-ArrayValues/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/builtin-ArrayValues/#fun-next",
            "text": "fun ref\n next(): B #read- A ?  Public, may raise an error.",
            "title": "fun next()"
        },
        {
            "location": "/builtin-AsioEvent/",
            "text": "primitive AsioEvent\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nFunctions for asynchronous event notification.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun disposable()\n\n\nfun box\n disposable(flags: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the event should be disposed of.\n\n\nfun dispose()\n\n\nfun box\n dispose(): \nU32\n val\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nAsioEvent\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nAsioEvent\n val): \nBool\n val\n\n\nPublic.\n\n\nfun none()\n\n\nfun box\n none(): \nPointer\n[\nAsioEvent\n val] tag\n\n\nPublic.\n\n\nAn empty event.\n\n\nfun read()\n\n\nfun box\n read(): \nU32\n val\n\n\nPublic.\n\n\nfun read_write()\n\n\nfun box\n read_write(): \nU32\n val\n\n\nPublic.\n\n\nfun readable()\n\n\nfun box\n readable(flags: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the flags contain the readable flag.\n\n\nfun signal()\n\n\nfun box\n signal(): \nU32\n val\n\n\nPublic.\n\n\nfun timer()\n\n\nfun box\n timer(): \nU32\n val\n\n\nPublic.\n\n\nfun write()\n\n\nfun box\n write(): \nU32\n val\n\n\nPublic.\n\n\nfun writeable()\n\n\nfun box\n writeable(flags: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the flags contain the writeable flag.",
            "title": "primitive AsioEvent"
        },
        {
            "location": "/builtin-AsioEvent/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-AsioEvent/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-AsioEvent/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-AsioEvent/#fun-disposable",
            "text": "fun box\n disposable(flags:  U32  val):  Bool  val  Public.  Returns true if the event should be disposed of.",
            "title": "fun disposable()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-dispose",
            "text": "fun box\n dispose():  U32  val  Public.",
            "title": "fun dispose()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-eq",
            "text": "fun box\n eq(that:  AsioEvent  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-ne",
            "text": "fun box\n ne(that:  AsioEvent  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-none",
            "text": "fun box\n none():  Pointer [ AsioEvent  val] tag  Public.  An empty event.",
            "title": "fun none()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-read",
            "text": "fun box\n read():  U32  val  Public.",
            "title": "fun read()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-read_write",
            "text": "fun box\n read_write():  U32  val  Public.",
            "title": "fun read_write()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-readable",
            "text": "fun box\n readable(flags:  U32  val):  Bool  val  Public.  Returns true if the flags contain the readable flag.",
            "title": "fun readable()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-signal",
            "text": "fun box\n signal():  U32  val  Public.",
            "title": "fun signal()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-timer",
            "text": "fun box\n timer():  U32  val  Public.",
            "title": "fun timer()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-write",
            "text": "fun box\n write():  U32  val  Public.",
            "title": "fun write()"
        },
        {
            "location": "/builtin-AsioEvent/#fun-writeable",
            "text": "fun box\n writeable(flags:  U32  val):  Bool  val  Public.  Returns true if the flags contain the writeable flag.",
            "title": "fun writeable()"
        },
        {
            "location": "/builtin-AsioEventID/",
            "text": "type AsioEventID is \nPointer\n[\nAsioEvent\n val] tag\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type AsioEventID"
        },
        {
            "location": "/builtin-AsioEventNotify/",
            "text": "interface AsioEventNotify\n\n\nIn package \"builtin\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nBehaviours\n\n\nbe _event_notify()\n\n\nbe _event_notify(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nPrivate.",
            "title": "interface AsioEventNotify"
        },
        {
            "location": "/builtin-AsioEventNotify/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/builtin-AsioEventNotify/#be-_event_notify",
            "text": "be _event_notify(event:  Pointer [ AsioEvent  val] tag, flags:  U32  val, arg:  U32  val)  Private.",
            "title": "be _event_notify()"
        },
        {
            "location": "/builtin-Bool/",
            "text": "primitive Bool is \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(from: \nBool\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(y: \nBool\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nBool\n val): \nBool\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nBool\n val): \nBool\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nBool\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nBool\n val): \nBool\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nBool\n val): \nBool\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nPublic.",
            "title": "primitive Bool"
        },
        {
            "location": "/builtin-Bool/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Bool/#new-create",
            "text": "new create(from:  Bool  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Bool/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Bool/#fun-eq",
            "text": "fun box\n eq(y:  Bool  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-Bool/#fun-ne",
            "text": "fun box\n ne(y:  Bool  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Bool/#fun-op_and",
            "text": "fun box\n op_and(y:  Bool  val):  Bool  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-Bool/#fun-op_not",
            "text": "fun box\n op_not():  Bool  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-Bool/#fun-op_or",
            "text": "fun box\n op_or(y:  Bool  val):  Bool  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-Bool/#fun-op_xor",
            "text": "fun box\n op_xor(y:  Bool  val):  Bool  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-Bool/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [ FormatDefault  val,  PrefixDefault  val] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-ByteSeq/",
            "text": "interface ByteSeq\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nAccept both a String and an Array[U8].\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(i: \nUSize\n val): \nU8\n val ?\n\n\nPublic, may raise an error.\n\n\nfun cstring()\n\n\nfun box\n cstring(): \nPointer\n[\nU8\n val] tag\n\n\nPublic.\n\n\nfun size()\n\n\nfun box\n size(): \nUSize\n val\n\n\nPublic.\n\n\nfun space()\n\n\nfun box\n space(): \nUSize\n val\n\n\nPublic.",
            "title": "interface ByteSeq"
        },
        {
            "location": "/builtin-ByteSeq/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-ByteSeq/#fun-apply",
            "text": "fun box\n apply(i:  USize  val):  U8  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin-ByteSeq/#fun-cstring",
            "text": "fun box\n cstring():  Pointer [ U8  val] tag  Public.",
            "title": "fun cstring()"
        },
        {
            "location": "/builtin-ByteSeq/#fun-size",
            "text": "fun box\n size():  USize  val  Public.",
            "title": "fun size()"
        },
        {
            "location": "/builtin-ByteSeq/#fun-space",
            "text": "fun box\n space():  USize  val  Public.",
            "title": "fun space()"
        },
        {
            "location": "/builtin-ByteSeqIter/",
            "text": "interface ByteSeqIter\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nAccept an iterable collection of String or Array[U8].\n\n\nFunctions\n\n\nfun values()\n\n\nfun box\n values(): \nIterator\n[\nByteSeq\n val] ref\n\n\nPublic.",
            "title": "interface ByteSeqIter"
        },
        {
            "location": "/builtin-ByteSeqIter/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-ByteSeqIter/#fun-values",
            "text": "fun box\n values():  Iterator [ ByteSeq  val] ref  Public.",
            "title": "fun values()"
        },
        {
            "location": "/builtin-Comparable/",
            "text": "interface Comparable[A: \nComparable\n[A #read] #read] is \nEquatable\n[A #read] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nFunctions\n\n\nfun compare()\n\n\nfun box\n compare(that: box-\nA #read): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: box-\nA #read): \nBool\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(that: box-\nA #read): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(that: box-\nA #read): \nBool\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(that: box-\nA #read): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(that: box-\nA #read): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: box-\nA #read): \nBool\n val\n\n\nPublic.",
            "title": "interface Comparable"
        },
        {
            "location": "/builtin-Comparable/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Comparable/#fun-compare",
            "text": "fun box\n compare(that: box- A #read): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-Comparable/#fun-eq",
            "text": "fun box\n eq(that: box- A #read):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-Comparable/#fun-ge",
            "text": "fun box\n ge(that: box- A #read):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-Comparable/#fun-gt",
            "text": "fun box\n gt(that: box- A #read):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-Comparable/#fun-le",
            "text": "fun box\n le(that: box- A #read):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-Comparable/#fun-lt",
            "text": "fun box\n lt(that: box- A #read):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-Comparable/#fun-ne",
            "text": "fun box\n ne(that: box- A #read):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Compare/",
            "text": "type Compare is ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type Compare"
        },
        {
            "location": "/builtin-Creatable/",
            "text": "interface Creatable\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.",
            "title": "interface Creatable"
        },
        {
            "location": "/builtin-Creatable/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Creatable/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-DisposableActor/",
            "text": "interface DisposableActor\n\n\nIn package \"builtin\".\n\n\nPublic, default capability tag.\n\n\nAn interface used to asynchronously dispose of an actor.\n\n\nBehaviours\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.",
            "title": "interface DisposableActor"
        },
        {
            "location": "/builtin-DisposableActor/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/builtin-DisposableActor/#be-dispose",
            "text": "be dispose()  Public.",
            "title": "be dispose()"
        },
        {
            "location": "/builtin-Env/",
            "text": "class Env\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nAn environment holds the command line and other values injected into the\nprogram by default by the runtime.\n\n\nPublic fields\n\n\n\n\nlet args: \nArray\n[\nString\n val] val\n\n\nlet err: \nStdStream\n tag\n\n\nlet input: \nStdin\n tag\n\n\nlet out: \nStdStream\n tag\n\n\nlet root: (\nAmbientAuth\n val | \nNone\n val)\n\n\n\n\nConstructors\n\n\nnew _create()\n\n\nnew _create(argc: \nU32\n val, argv: \nPointer\n[\nPointer\n[\nU8\n val] ref] val, envp: \nPointer\n[\nPointer\n[\nU8\n val] ref] val)\n\n\nPrivate.\n\n\nBuilds an environment from the command line. This is done before the Main\nactor is created.\n\n\nnew create()\n\n\nnew create(root': (\nAmbientAuth\n val | \nNone\n val), input': \nStdin\n tag, out': \nStdStream\n tag, err': \nStdStream\n tag, args': \nArray\n[\nString\n val] val, vars': (\nArray\n[\nString\n val] val | \nNone\n val))\n\n\nPublic.\n\n\nBuild an artificial environment. A root capability may be supplied.\n\n\nFunctions\n\n\nfun _count_strings()\n\n\nfun tag\n _count_strings(data: \nPointer\n[\nPointer\n[\nU8\n val] ref] val): \nUSize\n val\n\n\nPrivate.\n\n\nfun exitcode()\n\n\nfun tag\n exitcode(code: \nI32\n val): \nNone\n val\n\n\nPublic.\n\n\nSets the application exit code. If this is called more than once, the last\nvalue set will be the exit code. The exit code defaults to 0.\n\n\nfun _strings_from_pointers()\n\n\nfun tag\n _strings_from_pointers(data: \nPointer\n[\nPointer\n[\nU8\n val] ref] val, len: \nUSize\n val): \nArray\n[\nString\n val] iso^\n\n\nPrivate.\n\n\nfun vars()\n\n\nfun box\n vars(): \nArray\n[\nString\n val] val\n\n\nPublic.\n\n\nReturn the environment variables as an array of strings of the form\n\"key=value\".",
            "title": "class Env"
        },
        {
            "location": "/builtin-Env/#public-fields",
            "text": "let args:  Array [ String  val] val  let err:  StdStream  tag  let input:  Stdin  tag  let out:  StdStream  tag  let root: ( AmbientAuth  val |  None  val)",
            "title": "Public fields"
        },
        {
            "location": "/builtin-Env/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Env/#new-_create",
            "text": "new _create(argc:  U32  val, argv:  Pointer [ Pointer [ U8  val] ref] val, envp:  Pointer [ Pointer [ U8  val] ref] val)  Private.  Builds an environment from the command line. This is done before the Main\nactor is created.",
            "title": "new _create()"
        },
        {
            "location": "/builtin-Env/#new-create",
            "text": "new create(root': ( AmbientAuth  val |  None  val), input':  Stdin  tag, out':  StdStream  tag, err':  StdStream  tag, args':  Array [ String  val] val, vars': ( Array [ String  val] val |  None  val))  Public.  Build an artificial environment. A root capability may be supplied.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Env/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Env/#fun-_count_strings",
            "text": "fun tag\n _count_strings(data:  Pointer [ Pointer [ U8  val] ref] val):  USize  val  Private.",
            "title": "fun _count_strings()"
        },
        {
            "location": "/builtin-Env/#fun-exitcode",
            "text": "fun tag\n exitcode(code:  I32  val):  None  val  Public.  Sets the application exit code. If this is called more than once, the last\nvalue set will be the exit code. The exit code defaults to 0.",
            "title": "fun exitcode()"
        },
        {
            "location": "/builtin-Env/#fun-_strings_from_pointers",
            "text": "fun tag\n _strings_from_pointers(data:  Pointer [ Pointer [ U8  val] ref] val, len:  USize  val):  Array [ String  val] iso^  Private.",
            "title": "fun _strings_from_pointers()"
        },
        {
            "location": "/builtin-Env/#fun-vars",
            "text": "fun box\n vars():  Array [ String  val] val  Public.  Return the environment variables as an array of strings of the form\n\"key=value\".",
            "title": "fun vars()"
        },
        {
            "location": "/builtin-Equal/",
            "text": "primitive Equal is \nEquatable\n[((\nLess\n val | \nEqual\n val) | \nGreater\n val)] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nPublic.",
            "title": "primitive Equal"
        },
        {
            "location": "/builtin-Equal/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Equal/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Equal/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Equal/#fun-eq",
            "text": "fun box\n eq(that: (( Less  val |  Equal  val) |  Greater  val)):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-Equal/#fun-ne",
            "text": "fun box\n ne(that: (( Less  val |  Equal  val) |  Greater  val)):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Equal/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [ FormatDefault  val,  PrefixDefault  val] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-Equatable/",
            "text": "interface Equatable[A: \nEquatable\n[A #read] #read]\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: box-\nA #read): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: box-\nA #read): \nBool\n val\n\n\nPublic.",
            "title": "interface Equatable"
        },
        {
            "location": "/builtin-Equatable/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Equatable/#fun-eq",
            "text": "fun box\n eq(that: box- A #read):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-Equatable/#fun-ne",
            "text": "fun box\n ne(that: box- A #read):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-F32/",
            "text": "primitive F32 is \nFloatingPoint\n[\nF32\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nF32\n val)\n\n\nPublic.\n\n\nnew e()\n\n\nnew e()\n\n\nPublic.\n\n\nnew from_bits()\n\n\nnew from_bits(i: \nU32\n val)\n\n\nPublic.\n\n\nnew pi()\n\n\nnew pi()\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nF32\n val\n\n\nPublic.\n\n\nfun acos()\n\n\nfun box\n acos(): \nF32\n val\n\n\nPublic.\n\n\nfun acosh()\n\n\nfun box\n acosh(): \nF32\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nF32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun asin()\n\n\nfun box\n asin(): \nF32\n val\n\n\nPublic.\n\n\nfun asinh()\n\n\nfun box\n asinh(): \nF32\n val\n\n\nPublic.\n\n\nfun atan()\n\n\nfun box\n atan(): \nF32\n val\n\n\nPublic.\n\n\nfun atan2()\n\n\nfun box\n atan2(y: \nF32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun atanh()\n\n\nfun box\n atanh(): \nF32\n val\n\n\nPublic.\n\n\nfun bits()\n\n\nfun box\n bits(): \nU32\n val\n\n\nPublic.\n\n\nfun cbrt()\n\n\nfun box\n cbrt(): \nF32\n val\n\n\nPublic.\n\n\nfun ceil()\n\n\nfun box\n ceil(): \nF32\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nF32\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun cos()\n\n\nfun box\n cos(): \nF32\n val\n\n\nPublic.\n\n\nfun cosh()\n\n\nfun box\n cosh(): \nF32\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nF32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nF32\n val): (\nF32\n val , \nF32\n val)\n\n\nPublic.\n\n\nfun epsilon()\n\n\nfun tag\n epsilon(): \nF32\n val\n\n\nPublic.\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nF32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun exp()\n\n\nfun box\n exp(): \nF32\n val\n\n\nPublic.\n\n\nfun exp2()\n\n\nfun box\n exp2(): \nF32\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun finite()\n\n\nfun box\n finite(): \nBool\n val\n\n\nPublic.\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun floor()\n\n\nfun box\n floor(): \nF32\n val\n\n\nPublic.\n\n\nfun frexp()\n\n\nfun box\n frexp(): (\nF32\n val , \nU32\n val)\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): \nF32\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nF32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nF32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun ldexp()\n\n\nfun box\n ldexp(x: \nF32\n val, exponent: \nI32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nF32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun log()\n\n\nfun box\n log(): \nF32\n val\n\n\nPublic.\n\n\nfun log10()\n\n\nfun box\n log10(): \nF32\n val\n\n\nPublic.\n\n\nfun log2()\n\n\nfun box\n log2(): \nF32\n val\n\n\nPublic.\n\n\nfun logb()\n\n\nfun box\n logb(): \nF32\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nF32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nF32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun max_exp10()\n\n\nfun tag\n max_exp10(): \nI16\n val\n\n\nPublic.\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun max_exp2()\n\n\nfun tag\n max_exp2(): \nI16\n val\n\n\nPublic.\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nF32\n val\n\n\nPublic.\n\n\nMaximum positive value representable.\n\n\nfun min()\n\n\nfun box\n min(y: \nF32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun min_exp10()\n\n\nfun tag\n min_exp10(): \nI16\n val\n\n\nPublic.\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun min_exp2()\n\n\nfun tag\n min_exp2(): \nI16\n val\n\n\nPublic.\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nF32\n val\n\n\nPublic.\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nfun mod()\n\n\nfun box\n mod(y: \nF32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nF32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun nan()\n\n\nfun box\n nan(): \nBool\n val\n\n\nPublic.\n\n\nCheck whether this number is NaN.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nF32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nF32\n val\n\n\nPublic.\n\n\nfun pow()\n\n\nfun box\n pow(y: \nF32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun powi()\n\n\nfun box\n powi(y: \nI32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun precision10()\n\n\nfun tag\n precision10(): \nU8\n val\n\n\nPublic.\n\n\nMantissa precision in decimal digits.\n\n\nfun precision2()\n\n\nfun tag\n precision2(): \nU8\n val\n\n\nPublic.\n\n\nMantissa precision in bits.\n\n\nfun radix()\n\n\nfun tag\n radix(): \nU8\n val\n\n\nPublic.\n\n\nExponent radix.\n\n\nfun round()\n\n\nfun box\n round(): \nF32\n val\n\n\nPublic.\n\n\nfun sin()\n\n\nfun box\n sin(): \nF32\n val\n\n\nPublic.\n\n\nfun sinh()\n\n\nfun box\n sinh(): \nF32\n val\n\n\nPublic.\n\n\nfun sqrt()\n\n\nfun box\n sqrt(): \nF32\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nF32\n val): \nF32\n val\n\n\nPublic.\n\n\nfun tan()\n\n\nfun box\n tan(): \nF32\n val\n\n\nPublic.\n\n\nfun tanh()\n\n\nfun box\n tanh(): \nF32\n val\n\n\nPublic.\n\n\nfun trunc()\n\n\nfun box\n trunc(): \nF32\n val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive F32"
        },
        {
            "location": "/builtin-F32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-F32/#new-create",
            "text": "new create(optional value:  F32  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-F32/#new-e",
            "text": "new e()  Public.",
            "title": "new e()"
        },
        {
            "location": "/builtin-F32/#new-from_bits",
            "text": "new from_bits(i:  U32  val)  Public.",
            "title": "new from_bits()"
        },
        {
            "location": "/builtin-F32/#new-pi",
            "text": "new pi()  Public.",
            "title": "new pi()"
        },
        {
            "location": "/builtin-F32/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-F32/#fun-abs",
            "text": "fun box\n abs():  F32  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-F32/#fun-acos",
            "text": "fun box\n acos():  F32  val  Public.",
            "title": "fun acos()"
        },
        {
            "location": "/builtin-F32/#fun-acosh",
            "text": "fun box\n acosh():  F32  val  Public.",
            "title": "fun acosh()"
        },
        {
            "location": "/builtin-F32/#fun-add",
            "text": "fun box\n add(y:  F32  val):  F32  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-F32/#fun-asin",
            "text": "fun box\n asin():  F32  val  Public.",
            "title": "fun asin()"
        },
        {
            "location": "/builtin-F32/#fun-asinh",
            "text": "fun box\n asinh():  F32  val  Public.",
            "title": "fun asinh()"
        },
        {
            "location": "/builtin-F32/#fun-atan",
            "text": "fun box\n atan():  F32  val  Public.",
            "title": "fun atan()"
        },
        {
            "location": "/builtin-F32/#fun-atan2",
            "text": "fun box\n atan2(y:  F32  val):  F32  val  Public.",
            "title": "fun atan2()"
        },
        {
            "location": "/builtin-F32/#fun-atanh",
            "text": "fun box\n atanh():  F32  val  Public.",
            "title": "fun atanh()"
        },
        {
            "location": "/builtin-F32/#fun-bits",
            "text": "fun box\n bits():  U32  val  Public.",
            "title": "fun bits()"
        },
        {
            "location": "/builtin-F32/#fun-cbrt",
            "text": "fun box\n cbrt():  F32  val  Public.",
            "title": "fun cbrt()"
        },
        {
            "location": "/builtin-F32/#fun-ceil",
            "text": "fun box\n ceil():  F32  val  Public.",
            "title": "fun ceil()"
        },
        {
            "location": "/builtin-F32/#fun-compare",
            "text": "fun box\n compare(that:  F32  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-F32/#fun-cos",
            "text": "fun box\n cos():  F32  val  Public.",
            "title": "fun cos()"
        },
        {
            "location": "/builtin-F32/#fun-cosh",
            "text": "fun box\n cosh():  F32  val  Public.",
            "title": "fun cosh()"
        },
        {
            "location": "/builtin-F32/#fun-div",
            "text": "fun box\n div(y:  F32  val):  F32  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-F32/#fun-divmod",
            "text": "fun box\n divmod(y:  F32  val): ( F32  val ,  F32  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-F32/#fun-epsilon",
            "text": "fun tag\n epsilon():  F32  val  Public.  Minimum positive value such that (1 + epsilon) != 1.",
            "title": "fun epsilon()"
        },
        {
            "location": "/builtin-F32/#fun-eq",
            "text": "fun box\n eq(y:  F32  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-F32/#fun-exp",
            "text": "fun box\n exp():  F32  val  Public.",
            "title": "fun exp()"
        },
        {
            "location": "/builtin-F32/#fun-exp2",
            "text": "fun box\n exp2():  F32  val  Public.",
            "title": "fun exp2()"
        },
        {
            "location": "/builtin-F32/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-F32/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-F32/#fun-finite",
            "text": "fun box\n finite():  Bool  val  Public.  Check whether this number is finite, ie not +/-infinity and not NaN.",
            "title": "fun finite()"
        },
        {
            "location": "/builtin-F32/#fun-floor",
            "text": "fun box\n floor():  F32  val  Public.",
            "title": "fun floor()"
        },
        {
            "location": "/builtin-F32/#fun-frexp",
            "text": "fun box\n frexp(): ( F32  val ,  U32  val)  Public.",
            "title": "fun frexp()"
        },
        {
            "location": "/builtin-F32/#fun-from",
            "text": "fun tag\n from[B: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [B val] val)](a: B val):  F32  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-F32/#fun-ge",
            "text": "fun box\n ge(y:  F32  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-F32/#fun-gt",
            "text": "fun box\n gt(y:  F32  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-F32/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-F32/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-F32/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-F32/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-F32/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-F32/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-F32/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-F32/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-F32/#fun-ldexp",
            "text": "fun box\n ldexp(x:  F32  val, exponent:  I32  val):  F32  val  Public.",
            "title": "fun ldexp()"
        },
        {
            "location": "/builtin-F32/#fun-le",
            "text": "fun box\n le(y:  F32  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-F32/#fun-log",
            "text": "fun box\n log():  F32  val  Public.",
            "title": "fun log()"
        },
        {
            "location": "/builtin-F32/#fun-log10",
            "text": "fun box\n log10():  F32  val  Public.",
            "title": "fun log10()"
        },
        {
            "location": "/builtin-F32/#fun-log2",
            "text": "fun box\n log2():  F32  val  Public.",
            "title": "fun log2()"
        },
        {
            "location": "/builtin-F32/#fun-logb",
            "text": "fun box\n logb():  F32  val  Public.",
            "title": "fun logb()"
        },
        {
            "location": "/builtin-F32/#fun-lt",
            "text": "fun box\n lt(y:  F32  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-F32/#fun-max",
            "text": "fun box\n max(y:  F32  val):  F32  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-F32/#fun-max_exp10",
            "text": "fun tag\n max_exp10():  I16  val  Public.  Maximum exponent value such that (10^exponent) - 1 is representable.",
            "title": "fun max_exp10()"
        },
        {
            "location": "/builtin-F32/#fun-max_exp2",
            "text": "fun tag\n max_exp2():  I16  val  Public.  Maximum exponent value such that (2^exponent) - 1 is representable.",
            "title": "fun max_exp2()"
        },
        {
            "location": "/builtin-F32/#fun-max_value",
            "text": "fun tag\n max_value():  F32  val  Public.  Maximum positive value representable.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-F32/#fun-min",
            "text": "fun box\n min(y:  F32  val):  F32  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-F32/#fun-min_exp10",
            "text": "fun tag\n min_exp10():  I16  val  Public.  Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).",
            "title": "fun min_exp10()"
        },
        {
            "location": "/builtin-F32/#fun-min_exp2",
            "text": "fun tag\n min_exp2():  I16  val  Public.  Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).",
            "title": "fun min_exp2()"
        },
        {
            "location": "/builtin-F32/#fun-min_value",
            "text": "fun tag\n min_value():  F32  val  Public.  Minimum positive value representable at full precision (ie a normalised\nnumber).",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-F32/#fun-mod",
            "text": "fun box\n mod(y:  F32  val):  F32  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-F32/#fun-mul",
            "text": "fun box\n mul(y:  F32  val):  F32  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-F32/#fun-nan",
            "text": "fun box\n nan():  Bool  val  Public.  Check whether this number is NaN.",
            "title": "fun nan()"
        },
        {
            "location": "/builtin-F32/#fun-ne",
            "text": "fun box\n ne(y:  F32  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-F32/#fun-neg",
            "text": "fun box\n neg():  F32  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-F32/#fun-pow",
            "text": "fun box\n pow(y:  F32  val):  F32  val  Public.",
            "title": "fun pow()"
        },
        {
            "location": "/builtin-F32/#fun-powi",
            "text": "fun box\n powi(y:  I32  val):  F32  val  Public.",
            "title": "fun powi()"
        },
        {
            "location": "/builtin-F32/#fun-precision10",
            "text": "fun tag\n precision10():  U8  val  Public.  Mantissa precision in decimal digits.",
            "title": "fun precision10()"
        },
        {
            "location": "/builtin-F32/#fun-precision2",
            "text": "fun tag\n precision2():  U8  val  Public.  Mantissa precision in bits.",
            "title": "fun precision2()"
        },
        {
            "location": "/builtin-F32/#fun-radix",
            "text": "fun tag\n radix():  U8  val  Public.  Exponent radix.",
            "title": "fun radix()"
        },
        {
            "location": "/builtin-F32/#fun-round",
            "text": "fun box\n round():  F32  val  Public.",
            "title": "fun round()"
        },
        {
            "location": "/builtin-F32/#fun-sin",
            "text": "fun box\n sin():  F32  val  Public.",
            "title": "fun sin()"
        },
        {
            "location": "/builtin-F32/#fun-sinh",
            "text": "fun box\n sinh():  F32  val  Public.",
            "title": "fun sinh()"
        },
        {
            "location": "/builtin-F32/#fun-sqrt",
            "text": "fun box\n sqrt():  F32  val  Public.",
            "title": "fun sqrt()"
        },
        {
            "location": "/builtin-F32/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [(((((( FormatDefault  val |  FormatExp  val) |  FormatExpLarge  val) |  FormatFix  val) |  FormatFixLarge  val) |  FormatGeneral  val) |  FormatGeneralLarge  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-F32/#fun-sub",
            "text": "fun box\n sub(y:  F32  val):  F32  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-F32/#fun-tan",
            "text": "fun box\n tan():  F32  val  Public.",
            "title": "fun tan()"
        },
        {
            "location": "/builtin-F32/#fun-tanh",
            "text": "fun box\n tanh():  F32  val  Public.",
            "title": "fun tanh()"
        },
        {
            "location": "/builtin-F32/#fun-trunc",
            "text": "fun box\n trunc():  F32  val  Public.",
            "title": "fun trunc()"
        },
        {
            "location": "/builtin-F32/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-F32/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-F32/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-F32/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-F32/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-F32/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-F32/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-F64/",
            "text": "primitive F64 is \nFloatingPoint\n[\nF64\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nF64\n val)\n\n\nPublic.\n\n\nnew e()\n\n\nnew e()\n\n\nPublic.\n\n\nnew from_bits()\n\n\nnew from_bits(i: \nU64\n val)\n\n\nPublic.\n\n\nnew pi()\n\n\nnew pi()\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nF64\n val\n\n\nPublic.\n\n\nfun acos()\n\n\nfun box\n acos(): \nF64\n val\n\n\nPublic.\n\n\nfun acosh()\n\n\nfun box\n acosh(): \nF64\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nF64\n val): \nF64\n val\n\n\nPublic.\n\n\nfun asin()\n\n\nfun box\n asin(): \nF64\n val\n\n\nPublic.\n\n\nfun asinh()\n\n\nfun box\n asinh(): \nF64\n val\n\n\nPublic.\n\n\nfun atan()\n\n\nfun box\n atan(): \nF64\n val\n\n\nPublic.\n\n\nfun atan2()\n\n\nfun box\n atan2(y: \nF64\n val): \nF64\n val\n\n\nPublic.\n\n\nfun atanh()\n\n\nfun box\n atanh(): \nF64\n val\n\n\nPublic.\n\n\nfun bits()\n\n\nfun box\n bits(): \nU64\n val\n\n\nPublic.\n\n\nfun cbrt()\n\n\nfun box\n cbrt(): \nF64\n val\n\n\nPublic.\n\n\nfun ceil()\n\n\nfun box\n ceil(): \nF64\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nF64\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun cos()\n\n\nfun box\n cos(): \nF64\n val\n\n\nPublic.\n\n\nfun cosh()\n\n\nfun box\n cosh(): \nF64\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nF64\n val): \nF64\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nF64\n val): (\nF64\n val , \nF64\n val)\n\n\nPublic.\n\n\nfun epsilon()\n\n\nfun tag\n epsilon(): \nF64\n val\n\n\nPublic.\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nF64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun exp()\n\n\nfun box\n exp(): \nF64\n val\n\n\nPublic.\n\n\nfun exp2()\n\n\nfun box\n exp2(): \nF64\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun finite()\n\n\nfun box\n finite(): \nBool\n val\n\n\nPublic.\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun floor()\n\n\nfun box\n floor(): \nF64\n val\n\n\nPublic.\n\n\nfun frexp()\n\n\nfun box\n frexp(): (\nF64\n val , \nU32\n val)\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): \nF64\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nF64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nF64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun ldexp()\n\n\nfun box\n ldexp(x: \nF64\n val, exponent: \nI32\n val): \nF64\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nF64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun log()\n\n\nfun box\n log(): \nF64\n val\n\n\nPublic.\n\n\nfun log10()\n\n\nfun box\n log10(): \nF64\n val\n\n\nPublic.\n\n\nfun log2()\n\n\nfun box\n log2(): \nF64\n val\n\n\nPublic.\n\n\nfun logb()\n\n\nfun box\n logb(): \nF64\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nF64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nF64\n val): \nF64\n val\n\n\nPublic.\n\n\nfun max_exp10()\n\n\nfun tag\n max_exp10(): \nI16\n val\n\n\nPublic.\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun max_exp2()\n\n\nfun tag\n max_exp2(): \nI16\n val\n\n\nPublic.\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nF64\n val\n\n\nPublic.\n\n\nMaximum positive value representable.\n\n\nfun min()\n\n\nfun box\n min(y: \nF64\n val): \nF64\n val\n\n\nPublic.\n\n\nfun min_exp10()\n\n\nfun tag\n min_exp10(): \nI16\n val\n\n\nPublic.\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun min_exp2()\n\n\nfun tag\n min_exp2(): \nI16\n val\n\n\nPublic.\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nF64\n val\n\n\nPublic.\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nfun mod()\n\n\nfun box\n mod(y: \nF64\n val): \nF64\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nF64\n val): \nF64\n val\n\n\nPublic.\n\n\nfun nan()\n\n\nfun box\n nan(): \nBool\n val\n\n\nPublic.\n\n\nCheck whether this number is NaN.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nF64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nF64\n val\n\n\nPublic.\n\n\nfun pow()\n\n\nfun box\n pow(y: \nF64\n val): \nF64\n val\n\n\nPublic.\n\n\nfun powi()\n\n\nfun box\n powi(y: \nI32\n val): \nF64\n val\n\n\nPublic.\n\n\nfun precision10()\n\n\nfun tag\n precision10(): \nU8\n val\n\n\nPublic.\n\n\nMantissa precision in decimal digits.\n\n\nfun precision2()\n\n\nfun tag\n precision2(): \nU8\n val\n\n\nPublic.\n\n\nMantissa precision in bits.\n\n\nfun radix()\n\n\nfun tag\n radix(): \nU8\n val\n\n\nPublic.\n\n\nExponent radix.\n\n\nfun round()\n\n\nfun box\n round(): \nF64\n val\n\n\nPublic.\n\n\nfun sin()\n\n\nfun box\n sin(): \nF64\n val\n\n\nPublic.\n\n\nfun sinh()\n\n\nfun box\n sinh(): \nF64\n val\n\n\nPublic.\n\n\nfun sqrt()\n\n\nfun box\n sqrt(): \nF64\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nF64\n val): \nF64\n val\n\n\nPublic.\n\n\nfun tan()\n\n\nfun box\n tan(): \nF64\n val\n\n\nPublic.\n\n\nfun tanh()\n\n\nfun box\n tanh(): \nF64\n val\n\n\nPublic.\n\n\nfun trunc()\n\n\nfun box\n trunc(): \nF64\n val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive F64"
        },
        {
            "location": "/builtin-F64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-F64/#new-create",
            "text": "new create(optional value:  F64  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-F64/#new-e",
            "text": "new e()  Public.",
            "title": "new e()"
        },
        {
            "location": "/builtin-F64/#new-from_bits",
            "text": "new from_bits(i:  U64  val)  Public.",
            "title": "new from_bits()"
        },
        {
            "location": "/builtin-F64/#new-pi",
            "text": "new pi()  Public.",
            "title": "new pi()"
        },
        {
            "location": "/builtin-F64/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-F64/#fun-abs",
            "text": "fun box\n abs():  F64  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-F64/#fun-acos",
            "text": "fun box\n acos():  F64  val  Public.",
            "title": "fun acos()"
        },
        {
            "location": "/builtin-F64/#fun-acosh",
            "text": "fun box\n acosh():  F64  val  Public.",
            "title": "fun acosh()"
        },
        {
            "location": "/builtin-F64/#fun-add",
            "text": "fun box\n add(y:  F64  val):  F64  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-F64/#fun-asin",
            "text": "fun box\n asin():  F64  val  Public.",
            "title": "fun asin()"
        },
        {
            "location": "/builtin-F64/#fun-asinh",
            "text": "fun box\n asinh():  F64  val  Public.",
            "title": "fun asinh()"
        },
        {
            "location": "/builtin-F64/#fun-atan",
            "text": "fun box\n atan():  F64  val  Public.",
            "title": "fun atan()"
        },
        {
            "location": "/builtin-F64/#fun-atan2",
            "text": "fun box\n atan2(y:  F64  val):  F64  val  Public.",
            "title": "fun atan2()"
        },
        {
            "location": "/builtin-F64/#fun-atanh",
            "text": "fun box\n atanh():  F64  val  Public.",
            "title": "fun atanh()"
        },
        {
            "location": "/builtin-F64/#fun-bits",
            "text": "fun box\n bits():  U64  val  Public.",
            "title": "fun bits()"
        },
        {
            "location": "/builtin-F64/#fun-cbrt",
            "text": "fun box\n cbrt():  F64  val  Public.",
            "title": "fun cbrt()"
        },
        {
            "location": "/builtin-F64/#fun-ceil",
            "text": "fun box\n ceil():  F64  val  Public.",
            "title": "fun ceil()"
        },
        {
            "location": "/builtin-F64/#fun-compare",
            "text": "fun box\n compare(that:  F64  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-F64/#fun-cos",
            "text": "fun box\n cos():  F64  val  Public.",
            "title": "fun cos()"
        },
        {
            "location": "/builtin-F64/#fun-cosh",
            "text": "fun box\n cosh():  F64  val  Public.",
            "title": "fun cosh()"
        },
        {
            "location": "/builtin-F64/#fun-div",
            "text": "fun box\n div(y:  F64  val):  F64  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-F64/#fun-divmod",
            "text": "fun box\n divmod(y:  F64  val): ( F64  val ,  F64  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-F64/#fun-epsilon",
            "text": "fun tag\n epsilon():  F64  val  Public.  Minimum positive value such that (1 + epsilon) != 1.",
            "title": "fun epsilon()"
        },
        {
            "location": "/builtin-F64/#fun-eq",
            "text": "fun box\n eq(y:  F64  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-F64/#fun-exp",
            "text": "fun box\n exp():  F64  val  Public.",
            "title": "fun exp()"
        },
        {
            "location": "/builtin-F64/#fun-exp2",
            "text": "fun box\n exp2():  F64  val  Public.",
            "title": "fun exp2()"
        },
        {
            "location": "/builtin-F64/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-F64/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-F64/#fun-finite",
            "text": "fun box\n finite():  Bool  val  Public.  Check whether this number is finite, ie not +/-infinity and not NaN.",
            "title": "fun finite()"
        },
        {
            "location": "/builtin-F64/#fun-floor",
            "text": "fun box\n floor():  F64  val  Public.",
            "title": "fun floor()"
        },
        {
            "location": "/builtin-F64/#fun-frexp",
            "text": "fun box\n frexp(): ( F64  val ,  U32  val)  Public.",
            "title": "fun frexp()"
        },
        {
            "location": "/builtin-F64/#fun-from",
            "text": "fun tag\n from[B: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [B val] val)](a: B val):  F64  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-F64/#fun-ge",
            "text": "fun box\n ge(y:  F64  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-F64/#fun-gt",
            "text": "fun box\n gt(y:  F64  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-F64/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-F64/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-F64/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-F64/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-F64/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-F64/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-F64/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-F64/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-F64/#fun-ldexp",
            "text": "fun box\n ldexp(x:  F64  val, exponent:  I32  val):  F64  val  Public.",
            "title": "fun ldexp()"
        },
        {
            "location": "/builtin-F64/#fun-le",
            "text": "fun box\n le(y:  F64  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-F64/#fun-log",
            "text": "fun box\n log():  F64  val  Public.",
            "title": "fun log()"
        },
        {
            "location": "/builtin-F64/#fun-log10",
            "text": "fun box\n log10():  F64  val  Public.",
            "title": "fun log10()"
        },
        {
            "location": "/builtin-F64/#fun-log2",
            "text": "fun box\n log2():  F64  val  Public.",
            "title": "fun log2()"
        },
        {
            "location": "/builtin-F64/#fun-logb",
            "text": "fun box\n logb():  F64  val  Public.",
            "title": "fun logb()"
        },
        {
            "location": "/builtin-F64/#fun-lt",
            "text": "fun box\n lt(y:  F64  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-F64/#fun-max",
            "text": "fun box\n max(y:  F64  val):  F64  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-F64/#fun-max_exp10",
            "text": "fun tag\n max_exp10():  I16  val  Public.  Maximum exponent value such that (10^exponent) - 1 is representable.",
            "title": "fun max_exp10()"
        },
        {
            "location": "/builtin-F64/#fun-max_exp2",
            "text": "fun tag\n max_exp2():  I16  val  Public.  Maximum exponent value such that (2^exponent) - 1 is representable.",
            "title": "fun max_exp2()"
        },
        {
            "location": "/builtin-F64/#fun-max_value",
            "text": "fun tag\n max_value():  F64  val  Public.  Maximum positive value representable.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-F64/#fun-min",
            "text": "fun box\n min(y:  F64  val):  F64  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-F64/#fun-min_exp10",
            "text": "fun tag\n min_exp10():  I16  val  Public.  Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).",
            "title": "fun min_exp10()"
        },
        {
            "location": "/builtin-F64/#fun-min_exp2",
            "text": "fun tag\n min_exp2():  I16  val  Public.  Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).",
            "title": "fun min_exp2()"
        },
        {
            "location": "/builtin-F64/#fun-min_value",
            "text": "fun tag\n min_value():  F64  val  Public.  Minimum positive value representable at full precision (ie a normalised\nnumber).",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-F64/#fun-mod",
            "text": "fun box\n mod(y:  F64  val):  F64  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-F64/#fun-mul",
            "text": "fun box\n mul(y:  F64  val):  F64  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-F64/#fun-nan",
            "text": "fun box\n nan():  Bool  val  Public.  Check whether this number is NaN.",
            "title": "fun nan()"
        },
        {
            "location": "/builtin-F64/#fun-ne",
            "text": "fun box\n ne(y:  F64  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-F64/#fun-neg",
            "text": "fun box\n neg():  F64  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-F64/#fun-pow",
            "text": "fun box\n pow(y:  F64  val):  F64  val  Public.",
            "title": "fun pow()"
        },
        {
            "location": "/builtin-F64/#fun-powi",
            "text": "fun box\n powi(y:  I32  val):  F64  val  Public.",
            "title": "fun powi()"
        },
        {
            "location": "/builtin-F64/#fun-precision10",
            "text": "fun tag\n precision10():  U8  val  Public.  Mantissa precision in decimal digits.",
            "title": "fun precision10()"
        },
        {
            "location": "/builtin-F64/#fun-precision2",
            "text": "fun tag\n precision2():  U8  val  Public.  Mantissa precision in bits.",
            "title": "fun precision2()"
        },
        {
            "location": "/builtin-F64/#fun-radix",
            "text": "fun tag\n radix():  U8  val  Public.  Exponent radix.",
            "title": "fun radix()"
        },
        {
            "location": "/builtin-F64/#fun-round",
            "text": "fun box\n round():  F64  val  Public.",
            "title": "fun round()"
        },
        {
            "location": "/builtin-F64/#fun-sin",
            "text": "fun box\n sin():  F64  val  Public.",
            "title": "fun sin()"
        },
        {
            "location": "/builtin-F64/#fun-sinh",
            "text": "fun box\n sinh():  F64  val  Public.",
            "title": "fun sinh()"
        },
        {
            "location": "/builtin-F64/#fun-sqrt",
            "text": "fun box\n sqrt():  F64  val  Public.",
            "title": "fun sqrt()"
        },
        {
            "location": "/builtin-F64/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [(((((( FormatDefault  val |  FormatExp  val) |  FormatExpLarge  val) |  FormatFix  val) |  FormatFixLarge  val) |  FormatGeneral  val) |  FormatGeneralLarge  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-F64/#fun-sub",
            "text": "fun box\n sub(y:  F64  val):  F64  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-F64/#fun-tan",
            "text": "fun box\n tan():  F64  val  Public.",
            "title": "fun tan()"
        },
        {
            "location": "/builtin-F64/#fun-tanh",
            "text": "fun box\n tanh():  F64  val  Public.",
            "title": "fun tanh()"
        },
        {
            "location": "/builtin-F64/#fun-trunc",
            "text": "fun box\n trunc():  F64  val  Public.",
            "title": "fun trunc()"
        },
        {
            "location": "/builtin-F64/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-F64/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-F64/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-F64/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-F64/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-F64/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-F64/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-Float/",
            "text": "type Float is (\nF32\n val | \nF64\n val)\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type Float"
        },
        {
            "location": "/builtin-FloatingPoint/",
            "text": "trait FloatingPoint[A: \nFloatingPoint\n[A val] val] is \nReal\n[A val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(value: A val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): A val\n\n\nPublic.\n\n\nfun acos()\n\n\nfun box\n acos(): A val\n\n\nPublic.\n\n\nfun acosh()\n\n\nfun box\n acosh(): A val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: A val): A val\n\n\nPublic.\n\n\nfun asin()\n\n\nfun box\n asin(): A val\n\n\nPublic.\n\n\nfun asinh()\n\n\nfun box\n asinh(): A val\n\n\nPublic.\n\n\nfun atan()\n\n\nfun box\n atan(): A val\n\n\nPublic.\n\n\nfun atan2()\n\n\nfun box\n atan2(y: A val): A val\n\n\nPublic.\n\n\nfun atanh()\n\n\nfun box\n atanh(): A val\n\n\nPublic.\n\n\nfun cbrt()\n\n\nfun box\n cbrt(): A val\n\n\nPublic.\n\n\nfun ceil()\n\n\nfun box\n ceil(): A val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: A val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun cos()\n\n\nfun box\n cos(): A val\n\n\nPublic.\n\n\nfun cosh()\n\n\nfun box\n cosh(): A val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: A val): A val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: A val): (A val , A val)\n\n\nPublic.\n\n\nfun epsilon()\n\n\nfun tag\n epsilon(): A val\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun exp()\n\n\nfun box\n exp(): A val\n\n\nPublic.\n\n\nfun exp2()\n\n\nfun box\n exp2(): A val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun finite()\n\n\nfun box\n finite(): \nBool\n val\n\n\nPublic.\n\n\nfun floor()\n\n\nfun box\n floor(): A val\n\n\nPublic.\n\n\nfun frexp()\n\n\nfun box\n frexp(): (A val , \nU32\n val)\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): A val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun ldexp()\n\n\nfun box\n ldexp(x: A val, exponent: \nI32\n val): A val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun log()\n\n\nfun box\n log(): A val\n\n\nPublic.\n\n\nfun log10()\n\n\nfun box\n log10(): A val\n\n\nPublic.\n\n\nfun log2()\n\n\nfun box\n log2(): A val\n\n\nPublic.\n\n\nfun logb()\n\n\nfun box\n logb(): A val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: A val): A val\n\n\nPublic.\n\n\nfun max_exp10()\n\n\nfun tag\n max_exp10(): \nI16\n val\n\n\nPublic.\n\n\nfun max_exp2()\n\n\nfun tag\n max_exp2(): \nI16\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): A val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: A val): A val\n\n\nPublic.\n\n\nfun min_exp10()\n\n\nfun tag\n min_exp10(): \nI16\n val\n\n\nPublic.\n\n\nfun min_exp2()\n\n\nfun tag\n min_exp2(): \nI16\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): A val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: A val): A val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: A val): A val\n\n\nPublic.\n\n\nfun nan()\n\n\nfun box\n nan(): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): A val\n\n\nPublic.\n\n\nfun pow()\n\n\nfun box\n pow(y: A val): A val\n\n\nPublic.\n\n\nfun powi()\n\n\nfun box\n powi(y: \nI32\n val): A val\n\n\nPublic.\n\n\nfun precision10()\n\n\nfun tag\n precision10(): \nU8\n val\n\n\nPublic.\n\n\nfun precision2()\n\n\nfun tag\n precision2(): \nU8\n val\n\n\nPublic.\n\n\nfun radix()\n\n\nfun tag\n radix(): \nU8\n val\n\n\nPublic.\n\n\nfun round()\n\n\nfun box\n round(): A val\n\n\nPublic.\n\n\nfun sin()\n\n\nfun box\n sin(): A val\n\n\nPublic.\n\n\nfun sinh()\n\n\nfun box\n sinh(): A val\n\n\nPublic.\n\n\nfun sqrt()\n\n\nfun box\n sqrt(): A val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: A val): A val\n\n\nPublic.\n\n\nfun tan()\n\n\nfun box\n tan(): A val\n\n\nPublic.\n\n\nfun tanh()\n\n\nfun box\n tanh(): A val\n\n\nPublic.\n\n\nfun trunc()\n\n\nfun box\n trunc(): A val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "trait FloatingPoint"
        },
        {
            "location": "/builtin-FloatingPoint/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FloatingPoint/#new-create",
            "text": "new create(value: A val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FloatingPoint/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-abs",
            "text": "fun box\n abs(): A val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-acos",
            "text": "fun box\n acos(): A val  Public.",
            "title": "fun acos()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-acosh",
            "text": "fun box\n acosh(): A val  Public.",
            "title": "fun acosh()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-add",
            "text": "fun box\n add(y: A val): A val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-asin",
            "text": "fun box\n asin(): A val  Public.",
            "title": "fun asin()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-asinh",
            "text": "fun box\n asinh(): A val  Public.",
            "title": "fun asinh()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-atan",
            "text": "fun box\n atan(): A val  Public.",
            "title": "fun atan()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-atan2",
            "text": "fun box\n atan2(y: A val): A val  Public.",
            "title": "fun atan2()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-atanh",
            "text": "fun box\n atanh(): A val  Public.",
            "title": "fun atanh()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-cbrt",
            "text": "fun box\n cbrt(): A val  Public.",
            "title": "fun cbrt()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-ceil",
            "text": "fun box\n ceil(): A val  Public.",
            "title": "fun ceil()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-compare",
            "text": "fun box\n compare(that: A val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-cos",
            "text": "fun box\n cos(): A val  Public.",
            "title": "fun cos()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-cosh",
            "text": "fun box\n cosh(): A val  Public.",
            "title": "fun cosh()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-div",
            "text": "fun box\n div(y: A val): A val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-divmod",
            "text": "fun box\n divmod(y: A val): (A val , A val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-epsilon",
            "text": "fun tag\n epsilon(): A val  Public.",
            "title": "fun epsilon()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-eq",
            "text": "fun box\n eq(y: A val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-exp",
            "text": "fun box\n exp(): A val  Public.",
            "title": "fun exp()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-exp2",
            "text": "fun box\n exp2(): A val  Public.",
            "title": "fun exp2()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-finite",
            "text": "fun box\n finite():  Bool  val  Public.",
            "title": "fun finite()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-floor",
            "text": "fun box\n floor(): A val  Public.",
            "title": "fun floor()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-frexp",
            "text": "fun box\n frexp(): (A val ,  U32  val)  Public.",
            "title": "fun frexp()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-from",
            "text": "fun tag\n from[B: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [B val] val)](a: B val): A val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-ge",
            "text": "fun box\n ge(y: A val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-gt",
            "text": "fun box\n gt(y: A val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-ldexp",
            "text": "fun box\n ldexp(x: A val, exponent:  I32  val): A val  Public.",
            "title": "fun ldexp()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-le",
            "text": "fun box\n le(y: A val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-log",
            "text": "fun box\n log(): A val  Public.",
            "title": "fun log()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-log10",
            "text": "fun box\n log10(): A val  Public.",
            "title": "fun log10()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-log2",
            "text": "fun box\n log2(): A val  Public.",
            "title": "fun log2()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-logb",
            "text": "fun box\n logb(): A val  Public.",
            "title": "fun logb()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-lt",
            "text": "fun box\n lt(y: A val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-max",
            "text": "fun box\n max(y: A val): A val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-max_exp10",
            "text": "fun tag\n max_exp10():  I16  val  Public.",
            "title": "fun max_exp10()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-max_exp2",
            "text": "fun tag\n max_exp2():  I16  val  Public.",
            "title": "fun max_exp2()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-max_value",
            "text": "fun tag\n max_value(): A val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-min",
            "text": "fun box\n min(y: A val): A val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-min_exp10",
            "text": "fun tag\n min_exp10():  I16  val  Public.",
            "title": "fun min_exp10()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-min_exp2",
            "text": "fun tag\n min_exp2():  I16  val  Public.",
            "title": "fun min_exp2()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-min_value",
            "text": "fun tag\n min_value(): A val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-mod",
            "text": "fun box\n mod(y: A val): A val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-mul",
            "text": "fun box\n mul(y: A val): A val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-nan",
            "text": "fun box\n nan():  Bool  val  Public.",
            "title": "fun nan()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-ne",
            "text": "fun box\n ne(y: A val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-neg",
            "text": "fun box\n neg(): A val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-pow",
            "text": "fun box\n pow(y: A val): A val  Public.",
            "title": "fun pow()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-powi",
            "text": "fun box\n powi(y:  I32  val): A val  Public.",
            "title": "fun powi()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-precision10",
            "text": "fun tag\n precision10():  U8  val  Public.",
            "title": "fun precision10()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-precision2",
            "text": "fun tag\n precision2():  U8  val  Public.",
            "title": "fun precision2()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-radix",
            "text": "fun tag\n radix():  U8  val  Public.",
            "title": "fun radix()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-round",
            "text": "fun box\n round(): A val  Public.",
            "title": "fun round()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-sin",
            "text": "fun box\n sin(): A val  Public.",
            "title": "fun sin()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-sinh",
            "text": "fun box\n sinh(): A val  Public.",
            "title": "fun sinh()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-sqrt",
            "text": "fun box\n sqrt(): A val  Public.",
            "title": "fun sqrt()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [(((((( FormatDefault  val |  FormatExp  val) |  FormatExpLarge  val) |  FormatFix  val) |  FormatFixLarge  val) |  FormatGeneral  val) |  FormatGeneralLarge  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-sub",
            "text": "fun box\n sub(y: A val): A val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-tan",
            "text": "fun box\n tan(): A val  Public.",
            "title": "fun tan()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-tanh",
            "text": "fun box\n tanh(): A val  Public.",
            "title": "fun tanh()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-trunc",
            "text": "fun box\n trunc(): A val  Public.",
            "title": "fun trunc()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-FloatingPoint/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-FormatBinary/",
            "text": "primitive FormatBinary is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatBinary\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatBinary\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatBinary"
        },
        {
            "location": "/builtin-FormatBinary/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatBinary/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatBinary/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatBinary/#fun-eq",
            "text": "fun box\n eq(that:  FormatBinary  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatBinary/#fun-ne",
            "text": "fun box\n ne(that:  FormatBinary  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatBinaryBare/",
            "text": "primitive FormatBinaryBare is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatBinaryBare\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatBinaryBare\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatBinaryBare"
        },
        {
            "location": "/builtin-FormatBinaryBare/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatBinaryBare/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatBinaryBare/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatBinaryBare/#fun-eq",
            "text": "fun box\n eq(that:  FormatBinaryBare  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatBinaryBare/#fun-ne",
            "text": "fun box\n ne(that:  FormatBinaryBare  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatDefault/",
            "text": "primitive FormatDefault is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatDefault\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatDefault\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatDefault"
        },
        {
            "location": "/builtin-FormatDefault/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatDefault/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatDefault/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatDefault/#fun-eq",
            "text": "fun box\n eq(that:  FormatDefault  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatDefault/#fun-ne",
            "text": "fun box\n ne(that:  FormatDefault  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatDefaultNumber/",
            "text": "primitive FormatDefaultNumber\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nDefault format settings for numbers.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun align()\n\n\nfun box\n align(): ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatDefaultNumber\n val): \nBool\n val\n\n\nPublic.\n\n\nfun fill()\n\n\nfun box\n fill(): \nU32\n val\n\n\nPublic.\n\n\nfun format()\n\n\nfun box\n format(): \nFormatDefault\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatDefaultNumber\n val): \nBool\n val\n\n\nPublic.\n\n\nfun precision()\n\n\nfun box\n precision(): \nUSize\n val\n\n\nPublic.\n\n\nfun prefix()\n\n\nfun box\n prefix(): \nPrefixDefault\n val\n\n\nPublic.\n\n\nfun width()\n\n\nfun box\n width(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive FormatDefaultNumber"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#fun-align",
            "text": "fun box\n align(): (( AlignLeft  val |  AlignRight  val) |  AlignCenter  val)  Public.",
            "title": "fun align()"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#fun-eq",
            "text": "fun box\n eq(that:  FormatDefaultNumber  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#fun-fill",
            "text": "fun box\n fill():  U32  val  Public.",
            "title": "fun fill()"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#fun-format",
            "text": "fun box\n format():  FormatDefault  val  Public.",
            "title": "fun format()"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#fun-ne",
            "text": "fun box\n ne(that:  FormatDefaultNumber  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#fun-precision",
            "text": "fun box\n precision():  USize  val  Public.",
            "title": "fun precision()"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#fun-prefix",
            "text": "fun box\n prefix():  PrefixDefault  val  Public.",
            "title": "fun prefix()"
        },
        {
            "location": "/builtin-FormatDefaultNumber/#fun-width",
            "text": "fun box\n width():  USize  val  Public.",
            "title": "fun width()"
        },
        {
            "location": "/builtin-FormatExp/",
            "text": "primitive FormatExp is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatExp\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatExp\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatExp"
        },
        {
            "location": "/builtin-FormatExp/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatExp/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatExp/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatExp/#fun-eq",
            "text": "fun box\n eq(that:  FormatExp  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatExp/#fun-ne",
            "text": "fun box\n ne(that:  FormatExp  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatExpLarge/",
            "text": "primitive FormatExpLarge is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatExpLarge\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatExpLarge\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatExpLarge"
        },
        {
            "location": "/builtin-FormatExpLarge/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatExpLarge/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatExpLarge/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatExpLarge/#fun-eq",
            "text": "fun box\n eq(that:  FormatExpLarge  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatExpLarge/#fun-ne",
            "text": "fun box\n ne(that:  FormatExpLarge  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatFix/",
            "text": "primitive FormatFix is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatFix\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatFix\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatFix"
        },
        {
            "location": "/builtin-FormatFix/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatFix/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatFix/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatFix/#fun-eq",
            "text": "fun box\n eq(that:  FormatFix  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatFix/#fun-ne",
            "text": "fun box\n ne(that:  FormatFix  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatFixLarge/",
            "text": "primitive FormatFixLarge is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatFixLarge\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatFixLarge\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatFixLarge"
        },
        {
            "location": "/builtin-FormatFixLarge/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatFixLarge/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatFixLarge/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatFixLarge/#fun-eq",
            "text": "fun box\n eq(that:  FormatFixLarge  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatFixLarge/#fun-ne",
            "text": "fun box\n ne(that:  FormatFixLarge  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatFloat/",
            "text": "type FormatFloat is ((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val)\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type FormatFloat"
        },
        {
            "location": "/builtin-FormatGeneral/",
            "text": "primitive FormatGeneral is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatGeneral\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatGeneral\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatGeneral"
        },
        {
            "location": "/builtin-FormatGeneral/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatGeneral/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatGeneral/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatGeneral/#fun-eq",
            "text": "fun box\n eq(that:  FormatGeneral  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatGeneral/#fun-ne",
            "text": "fun box\n ne(that:  FormatGeneral  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatGeneralLarge/",
            "text": "primitive FormatGeneralLarge is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatGeneralLarge\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatGeneralLarge\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatGeneralLarge"
        },
        {
            "location": "/builtin-FormatGeneralLarge/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatGeneralLarge/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatGeneralLarge/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatGeneralLarge/#fun-eq",
            "text": "fun box\n eq(that:  FormatGeneralLarge  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatGeneralLarge/#fun-ne",
            "text": "fun box\n ne(that:  FormatGeneralLarge  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatHex/",
            "text": "primitive FormatHex is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatHex\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatHex\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatHex"
        },
        {
            "location": "/builtin-FormatHex/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatHex/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatHex/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatHex/#fun-eq",
            "text": "fun box\n eq(that:  FormatHex  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatHex/#fun-ne",
            "text": "fun box\n ne(that:  FormatHex  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatHexBare/",
            "text": "primitive FormatHexBare is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatHexBare\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatHexBare\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatHexBare"
        },
        {
            "location": "/builtin-FormatHexBare/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatHexBare/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatHexBare/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatHexBare/#fun-eq",
            "text": "fun box\n eq(that:  FormatHexBare  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatHexBare/#fun-ne",
            "text": "fun box\n ne(that:  FormatHexBare  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatHexSmall/",
            "text": "primitive FormatHexSmall is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatHexSmall\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatHexSmall\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatHexSmall"
        },
        {
            "location": "/builtin-FormatHexSmall/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatHexSmall/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatHexSmall/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatHexSmall/#fun-eq",
            "text": "fun box\n eq(that:  FormatHexSmall  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatHexSmall/#fun-ne",
            "text": "fun box\n ne(that:  FormatHexSmall  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatHexSmallBare/",
            "text": "primitive FormatHexSmallBare is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatHexSmallBare\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatHexSmallBare\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatHexSmallBare"
        },
        {
            "location": "/builtin-FormatHexSmallBare/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatHexSmallBare/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatHexSmallBare/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatHexSmallBare/#fun-eq",
            "text": "fun box\n eq(that:  FormatHexSmallBare  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatHexSmallBare/#fun-ne",
            "text": "fun box\n ne(that:  FormatHexSmallBare  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatInt/",
            "text": "type FormatInt is (((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val)\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type FormatInt"
        },
        {
            "location": "/builtin-FormatOctal/",
            "text": "primitive FormatOctal is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatOctal\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatOctal\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatOctal"
        },
        {
            "location": "/builtin-FormatOctal/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatOctal/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatOctal/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatOctal/#fun-eq",
            "text": "fun box\n eq(that:  FormatOctal  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatOctal/#fun-ne",
            "text": "fun box\n ne(that:  FormatOctal  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatOctalBare/",
            "text": "primitive FormatOctalBare is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatOctalBare\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatOctalBare\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatOctalBare"
        },
        {
            "location": "/builtin-FormatOctalBare/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatOctalBare/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatOctalBare/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatOctalBare/#fun-eq",
            "text": "fun box\n eq(that:  FormatOctalBare  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatOctalBare/#fun-ne",
            "text": "fun box\n ne(that:  FormatOctalBare  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatSettings/",
            "text": "interface FormatSettings[optional F: \nFormatSpec\n val, optional P: \nPrefixSpec\n val]\n\n\nIn package \"builtin\".\n\n\nPublic, default capability box.\n\n\nProvide the settings to be used when converting objects to strings.\n\n\nThe \nformat\n and \nprefix\n settings are effectively enums. The \nFormatDefault\n\nand \nPrefixDefault\n values are acceptable for all Stringable objects. Other\npossible values can be added for each Stringable, without those values having\nto be handled by all Stringables. For example, integers have the option\n\nFormatHex\n, whereas floats do not.\n\n\n\n\nformat. Format to use.\n\n\nprefix. Prefix to use.\n\n\nprecision. Precision to use. The exact meaning of this depends on the type,\nbut is generally the number of characters used for all, or part, of the\nstring. A value of -1 indicates that the default for the type should be\nused.\n\n\nwidth. The minimum number of characters that will be in the produced\nstring. If necessary the string will be padded with the fill character to\nmake it long enough.\n\n\nalign. Whether fill characters should be added at the beginning or end of\nthe generated string, or both.\n\n\nfill: The character to pad a string with if it is shorter than width.\n\n\n\n\nFunctions\n\n\nfun align()\n\n\nfun box\n align(): ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nPublic.\n\n\nfun fill()\n\n\nfun box\n fill(): \nU32\n val\n\n\nPublic.\n\n\nfun format()\n\n\nfun box\n format(): (F val | \nFormatDefault\n val)\n\n\nPublic.\n\n\nfun precision()\n\n\nfun box\n precision(): \nUSize\n val\n\n\nPublic.\n\n\nfun prefix()\n\n\nfun box\n prefix(): (P val | \nPrefixDefault\n val)\n\n\nPublic.\n\n\nfun width()\n\n\nfun box\n width(): \nUSize\n val\n\n\nPublic.",
            "title": "interface FormatSettings"
        },
        {
            "location": "/builtin-FormatSettings/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatSettings/#fun-align",
            "text": "fun box\n align(): (( AlignLeft  val |  AlignRight  val) |  AlignCenter  val)  Public.",
            "title": "fun align()"
        },
        {
            "location": "/builtin-FormatSettings/#fun-fill",
            "text": "fun box\n fill():  U32  val  Public.",
            "title": "fun fill()"
        },
        {
            "location": "/builtin-FormatSettings/#fun-format",
            "text": "fun box\n format(): (F val |  FormatDefault  val)  Public.",
            "title": "fun format()"
        },
        {
            "location": "/builtin-FormatSettings/#fun-precision",
            "text": "fun box\n precision():  USize  val  Public.",
            "title": "fun precision()"
        },
        {
            "location": "/builtin-FormatSettings/#fun-prefix",
            "text": "fun box\n prefix(): (P val |  PrefixDefault  val)  Public.",
            "title": "fun prefix()"
        },
        {
            "location": "/builtin-FormatSettings/#fun-width",
            "text": "fun box\n width():  USize  val  Public.",
            "title": "fun width()"
        },
        {
            "location": "/builtin-FormatSettingsDefault/",
            "text": "primitive FormatSettingsDefault\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nDefault format settings for general Stringable objects.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun align()\n\n\nfun box\n align(): ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatSettingsDefault\n val): \nBool\n val\n\n\nPublic.\n\n\nfun fill()\n\n\nfun box\n fill(): \nU32\n val\n\n\nPublic.\n\n\nfun format()\n\n\nfun box\n format(): \nFormatDefault\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatSettingsDefault\n val): \nBool\n val\n\n\nPublic.\n\n\nfun precision()\n\n\nfun box\n precision(): \nUSize\n val\n\n\nPublic.\n\n\nfun prefix()\n\n\nfun box\n prefix(): \nPrefixDefault\n val\n\n\nPublic.\n\n\nfun width()\n\n\nfun box\n width(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive FormatSettingsDefault"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#fun-align",
            "text": "fun box\n align(): (( AlignLeft  val |  AlignRight  val) |  AlignCenter  val)  Public.",
            "title": "fun align()"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#fun-eq",
            "text": "fun box\n eq(that:  FormatSettingsDefault  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#fun-fill",
            "text": "fun box\n fill():  U32  val  Public.",
            "title": "fun fill()"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#fun-format",
            "text": "fun box\n format():  FormatDefault  val  Public.",
            "title": "fun format()"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#fun-ne",
            "text": "fun box\n ne(that:  FormatSettingsDefault  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#fun-precision",
            "text": "fun box\n precision():  USize  val  Public.",
            "title": "fun precision()"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#fun-prefix",
            "text": "fun box\n prefix():  PrefixDefault  val  Public.",
            "title": "fun prefix()"
        },
        {
            "location": "/builtin-FormatSettingsDefault/#fun-width",
            "text": "fun box\n width():  USize  val  Public.",
            "title": "fun width()"
        },
        {
            "location": "/builtin-FormatSettingsFloat/",
            "text": "type FormatSettingsFloat is \nFormatSettingsHolder\n[((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val), \nFormatDefaultNumber\n val] ref\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nFormat holder for floats.",
            "title": "type FormatSettingsFloat"
        },
        {
            "location": "/builtin-FormatSettingsHolder/",
            "text": "class FormatSettingsHolder[optional F: \nFormatSpec\n val, optional P: \nPrefixSpec\n val, optional D: (\nFormatSettings\n[F val, P val] #read \n \nCreatable\n #read)]\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nModifiable format settings holder.\n\n\nEach setting should be set as appropriate and then the holder can be passed\nto the relevant \nstring()\n functions. The settings can then be tweaked and\nthe holder reused for other \nstring()\n calls if required.\n\n\nDefault settings may be provided to the \ncreate()\n constructor. If they\naren't, defaults are specified by an instance of the \nD\n type parameter.\n\n\nSettings may be read and written directly or the provided accessors may be\nused. The write accessors return \nthis\n to allow call chaining.\n\n\nPublic fields\n\n\n\n\nvar align': ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nvar fill': \nU32\n val\n\n\nvar format': (F val | \nFormatDefault\n val)\n\n\nvar precision': \nUSize\n val\n\n\nvar prefix': (P val | \nPrefixDefault\n val)\n\n\nvar width': \nUSize\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional defaults: \nFormatSettings\n[F val, P val] box)\n\n\nPublic.\n\n\nInitialise fields using the given default source.\n\n\nFunctions\n\n\nfun align()\n\n\nfun box\n align(): ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)\n\n\nPublic.\n\n\nfun fill()\n\n\nfun box\n fill(): \nU32\n val\n\n\nPublic.\n\n\nfun format()\n\n\nfun box\n format(): (F val | \nFormatDefault\n val)\n\n\nPublic.\n\n\nfun precision()\n\n\nfun box\n precision(): \nUSize\n val\n\n\nPublic.\n\n\nfun prefix()\n\n\nfun box\n prefix(): (P val | \nPrefixDefault\n val)\n\n\nPublic.\n\n\nfun set_align()\n\n\nfun ref\n set_align(a: ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val)): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nPublic.\n\n\nfun set_fill()\n\n\nfun ref\n set_fill(f: \nU32\n val): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nPublic.\n\n\nfun set_format()\n\n\nfun ref\n set_format(f: (F val | \nFormatDefault\n val)): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nPublic.\n\n\nfun set_precision()\n\n\nfun ref\n set_precision(p: \nUSize\n val): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nPublic.\n\n\nfun set_prefix()\n\n\nfun ref\n set_prefix(p: (P val | \nPrefixDefault\n val)): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nPublic.\n\n\nfun set_width()\n\n\nfun ref\n set_width(w: \nUSize\n val): \nFormatSettingsHolder\n[F val, P val, D #read] ref\n\n\nPublic.\n\n\nfun width()\n\n\nfun box\n width(): \nUSize\n val\n\n\nPublic.",
            "title": "class FormatSettingsHolder"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#public-fields",
            "text": "var align': (( AlignLeft  val |  AlignRight  val) |  AlignCenter  val)  var fill':  U32  val  var format': (F val |  FormatDefault  val)  var precision':  USize  val  var prefix': (P val |  PrefixDefault  val)  var width':  USize  val",
            "title": "Public fields"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#new-create",
            "text": "new create(optional defaults:  FormatSettings [F val, P val] box)  Public.  Initialise fields using the given default source.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-align",
            "text": "fun box\n align(): (( AlignLeft  val |  AlignRight  val) |  AlignCenter  val)  Public.",
            "title": "fun align()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-fill",
            "text": "fun box\n fill():  U32  val  Public.",
            "title": "fun fill()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-format",
            "text": "fun box\n format(): (F val |  FormatDefault  val)  Public.",
            "title": "fun format()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-precision",
            "text": "fun box\n precision():  USize  val  Public.",
            "title": "fun precision()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-prefix",
            "text": "fun box\n prefix(): (P val |  PrefixDefault  val)  Public.",
            "title": "fun prefix()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-set_align",
            "text": "fun ref\n set_align(a: (( AlignLeft  val |  AlignRight  val) |  AlignCenter  val)):  FormatSettingsHolder [F val, P val, D #read] ref  Public.",
            "title": "fun set_align()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-set_fill",
            "text": "fun ref\n set_fill(f:  U32  val):  FormatSettingsHolder [F val, P val, D #read] ref  Public.",
            "title": "fun set_fill()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-set_format",
            "text": "fun ref\n set_format(f: (F val |  FormatDefault  val)):  FormatSettingsHolder [F val, P val, D #read] ref  Public.",
            "title": "fun set_format()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-set_precision",
            "text": "fun ref\n set_precision(p:  USize  val):  FormatSettingsHolder [F val, P val, D #read] ref  Public.",
            "title": "fun set_precision()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-set_prefix",
            "text": "fun ref\n set_prefix(p: (P val |  PrefixDefault  val)):  FormatSettingsHolder [F val, P val, D #read] ref  Public.",
            "title": "fun set_prefix()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-set_width",
            "text": "fun ref\n set_width(w:  USize  val):  FormatSettingsHolder [F val, P val, D #read] ref  Public.",
            "title": "fun set_width()"
        },
        {
            "location": "/builtin-FormatSettingsHolder/#fun-width",
            "text": "fun box\n width():  USize  val  Public.",
            "title": "fun width()"
        },
        {
            "location": "/builtin-FormatSettingsInt/",
            "text": "type FormatSettingsInt is \nFormatSettingsHolder\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val), \nFormatDefaultNumber\n val] ref\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nFormat holder for integers.",
            "title": "type FormatSettingsInt"
        },
        {
            "location": "/builtin-FormatSpec/",
            "text": "trait FormatSpec\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.",
            "title": "trait FormatSpec"
        },
        {
            "location": "/builtin-FormatUTF32/",
            "text": "primitive FormatUTF32 is \nFormatSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFormatUTF32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFormatUTF32\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FormatUTF32"
        },
        {
            "location": "/builtin-FormatUTF32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-FormatUTF32/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-FormatUTF32/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-FormatUTF32/#fun-eq",
            "text": "fun box\n eq(that:  FormatUTF32  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-FormatUTF32/#fun-ne",
            "text": "fun box\n ne(that:  FormatUTF32  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Greater/",
            "text": "primitive Greater is \nEquatable\n[((\nLess\n val | \nEqual\n val) | \nGreater\n val)] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nPublic.",
            "title": "primitive Greater"
        },
        {
            "location": "/builtin-Greater/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Greater/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Greater/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Greater/#fun-eq",
            "text": "fun box\n eq(that: (( Less  val |  Equal  val) |  Greater  val)):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-Greater/#fun-ne",
            "text": "fun box\n ne(that: (( Less  val |  Equal  val) |  Greater  val)):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Greater/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [ FormatDefault  val,  PrefixDefault  val] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-I128/",
            "text": "primitive I128 is \n_SignedInteger\n[\nI128\n val, \nU128\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nI128\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nU128\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nI128\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nI128\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nI128\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nI128\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nI128\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nI128\n val): (\nI128\n val , \nI128\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nI128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nI128\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nI128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nI128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nI128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nI128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nI128\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nI128\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nI128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nI128\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nI128\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nI128\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nI128\n val): \nI128\n val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive I128"
        },
        {
            "location": "/builtin-I128/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I128/#new-create",
            "text": "new create(optional value:  I128  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-I128/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-I128/#fun-abs",
            "text": "fun box\n abs():  U128  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-I128/#fun-add",
            "text": "fun box\n add(y:  I128  val):  I128  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-I128/#fun-bitwidth",
            "text": "fun box\n bitwidth():  I128  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-I128/#fun-bswap",
            "text": "fun box\n bswap():  I128  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-I128/#fun-clz",
            "text": "fun box\n clz():  I128  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-I128/#fun-compare",
            "text": "fun box\n compare(that:  I128  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-I128/#fun-ctz",
            "text": "fun box\n ctz():  I128  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-I128/#fun-div",
            "text": "fun box\n div(y:  I128  val):  I128  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-I128/#fun-divmod",
            "text": "fun box\n divmod(y:  I128  val): ( I128  val ,  I128  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-I128/#fun-eq",
            "text": "fun box\n eq(y:  I128  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-I128/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-I128/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-I128/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  I128  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-I128/#fun-ge",
            "text": "fun box\n ge(y:  I128  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-I128/#fun-gt",
            "text": "fun box\n gt(y:  I128  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-I128/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-I128/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-I128/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-I128/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-I128/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-I128/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-I128/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-I128/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-I128/#fun-le",
            "text": "fun box\n le(y:  I128  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-I128/#fun-lt",
            "text": "fun box\n lt(y:  I128  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-I128/#fun-max",
            "text": "fun box\n max(y:  I128  val):  I128  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-I128/#fun-max_value",
            "text": "fun tag\n max_value():  I128  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-I128/#fun-min",
            "text": "fun box\n min(y:  I128  val):  I128  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-I128/#fun-min_value",
            "text": "fun tag\n min_value():  I128  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-I128/#fun-mod",
            "text": "fun box\n mod(y:  I128  val):  I128  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-I128/#fun-mul",
            "text": "fun box\n mul(y:  I128  val):  I128  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-I128/#fun-ne",
            "text": "fun box\n ne(y:  I128  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-I128/#fun-neg",
            "text": "fun box\n neg():  I128  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-I128/#fun-op_and",
            "text": "fun box\n op_and(y:  I128  val):  I128  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-I128/#fun-op_not",
            "text": "fun box\n op_not():  I128  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-I128/#fun-op_or",
            "text": "fun box\n op_or(y:  I128  val):  I128  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-I128/#fun-op_xor",
            "text": "fun box\n op_xor(y:  I128  val):  I128  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-I128/#fun-popcount",
            "text": "fun box\n popcount():  I128  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-I128/#fun-rotl",
            "text": "fun box\n rotl(y:  I128  val):  I128  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-I128/#fun-rotr",
            "text": "fun box\n rotr(y:  I128  val):  I128  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-I128/#fun-shl",
            "text": "fun box\n shl(y:  I128  val):  I128  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-I128/#fun-shr",
            "text": "fun box\n shr(y:  I128  val):  I128  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-I128/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-I128/#fun-sub",
            "text": "fun box\n sub(y:  I128  val):  I128  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-I128/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-I128/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-I128/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-I128/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-I128/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-I128/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-I128/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-I16/",
            "text": "primitive I16 is \n_SignedInteger\n[\nI16\n val, \nU16\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nI16\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nU16\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nI16\n val): (\nI16\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nI16\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nI16\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nI16\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nI16\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nI16\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nI16\n val): (\nI16\n val , \nI16\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nI16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nI16\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nI16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nI16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nI16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nI16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nI16\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nI16\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nI16\n val): (\nI16\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nI16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nI16\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nI16\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nI16\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nI16\n val): \nI16\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nI16\n val): (\nI16\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive I16"
        },
        {
            "location": "/builtin-I16/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I16/#new-create",
            "text": "new create(optional value:  I16  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-I16/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-I16/#fun-abs",
            "text": "fun box\n abs():  U16  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-I16/#fun-add",
            "text": "fun box\n add(y:  I16  val):  I16  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-I16/#fun-addc",
            "text": "fun box\n addc(y:  I16  val): ( I16  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-I16/#fun-bitwidth",
            "text": "fun box\n bitwidth():  I16  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-I16/#fun-bswap",
            "text": "fun box\n bswap():  I16  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-I16/#fun-clz",
            "text": "fun box\n clz():  I16  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-I16/#fun-compare",
            "text": "fun box\n compare(that:  I16  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-I16/#fun-ctz",
            "text": "fun box\n ctz():  I16  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-I16/#fun-div",
            "text": "fun box\n div(y:  I16  val):  I16  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-I16/#fun-divmod",
            "text": "fun box\n divmod(y:  I16  val): ( I16  val ,  I16  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-I16/#fun-eq",
            "text": "fun box\n eq(y:  I16  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-I16/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-I16/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-I16/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  I16  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-I16/#fun-ge",
            "text": "fun box\n ge(y:  I16  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-I16/#fun-gt",
            "text": "fun box\n gt(y:  I16  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-I16/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-I16/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-I16/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-I16/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-I16/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-I16/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-I16/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-I16/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-I16/#fun-le",
            "text": "fun box\n le(y:  I16  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-I16/#fun-lt",
            "text": "fun box\n lt(y:  I16  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-I16/#fun-max",
            "text": "fun box\n max(y:  I16  val):  I16  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-I16/#fun-max_value",
            "text": "fun tag\n max_value():  I16  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-I16/#fun-min",
            "text": "fun box\n min(y:  I16  val):  I16  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-I16/#fun-min_value",
            "text": "fun tag\n min_value():  I16  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-I16/#fun-mod",
            "text": "fun box\n mod(y:  I16  val):  I16  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-I16/#fun-mul",
            "text": "fun box\n mul(y:  I16  val):  I16  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-I16/#fun-mulc",
            "text": "fun box\n mulc(y:  I16  val): ( I16  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-I16/#fun-ne",
            "text": "fun box\n ne(y:  I16  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-I16/#fun-neg",
            "text": "fun box\n neg():  I16  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-I16/#fun-op_and",
            "text": "fun box\n op_and(y:  I16  val):  I16  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-I16/#fun-op_not",
            "text": "fun box\n op_not():  I16  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-I16/#fun-op_or",
            "text": "fun box\n op_or(y:  I16  val):  I16  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-I16/#fun-op_xor",
            "text": "fun box\n op_xor(y:  I16  val):  I16  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-I16/#fun-popcount",
            "text": "fun box\n popcount():  I16  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-I16/#fun-rotl",
            "text": "fun box\n rotl(y:  I16  val):  I16  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-I16/#fun-rotr",
            "text": "fun box\n rotr(y:  I16  val):  I16  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-I16/#fun-shl",
            "text": "fun box\n shl(y:  I16  val):  I16  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-I16/#fun-shr",
            "text": "fun box\n shr(y:  I16  val):  I16  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-I16/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-I16/#fun-sub",
            "text": "fun box\n sub(y:  I16  val):  I16  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-I16/#fun-subc",
            "text": "fun box\n subc(y:  I16  val): ( I16  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-I16/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-I16/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-I16/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-I16/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-I16/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-I16/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-I16/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-I32/",
            "text": "primitive I32 is \n_SignedInteger\n[\nI32\n val, \nU32\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nI32\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nU32\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nI32\n val): (\nI32\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nI32\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nI32\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nI32\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nI32\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nI32\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nI32\n val): (\nI32\n val , \nI32\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nI32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nI32\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nI32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nI32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nI32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nI32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nI32\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nI32\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nI32\n val): (\nI32\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nI32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nI32\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nI32\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nI32\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nI32\n val): \nI32\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nI32\n val): (\nI32\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive I32"
        },
        {
            "location": "/builtin-I32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I32/#new-create",
            "text": "new create(optional value:  I32  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-I32/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-I32/#fun-abs",
            "text": "fun box\n abs():  U32  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-I32/#fun-add",
            "text": "fun box\n add(y:  I32  val):  I32  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-I32/#fun-addc",
            "text": "fun box\n addc(y:  I32  val): ( I32  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-I32/#fun-bitwidth",
            "text": "fun box\n bitwidth():  I32  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-I32/#fun-bswap",
            "text": "fun box\n bswap():  I32  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-I32/#fun-clz",
            "text": "fun box\n clz():  I32  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-I32/#fun-compare",
            "text": "fun box\n compare(that:  I32  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-I32/#fun-ctz",
            "text": "fun box\n ctz():  I32  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-I32/#fun-div",
            "text": "fun box\n div(y:  I32  val):  I32  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-I32/#fun-divmod",
            "text": "fun box\n divmod(y:  I32  val): ( I32  val ,  I32  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-I32/#fun-eq",
            "text": "fun box\n eq(y:  I32  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-I32/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-I32/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-I32/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  I32  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-I32/#fun-ge",
            "text": "fun box\n ge(y:  I32  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-I32/#fun-gt",
            "text": "fun box\n gt(y:  I32  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-I32/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-I32/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-I32/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-I32/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-I32/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-I32/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-I32/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-I32/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-I32/#fun-le",
            "text": "fun box\n le(y:  I32  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-I32/#fun-lt",
            "text": "fun box\n lt(y:  I32  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-I32/#fun-max",
            "text": "fun box\n max(y:  I32  val):  I32  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-I32/#fun-max_value",
            "text": "fun tag\n max_value():  I32  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-I32/#fun-min",
            "text": "fun box\n min(y:  I32  val):  I32  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-I32/#fun-min_value",
            "text": "fun tag\n min_value():  I32  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-I32/#fun-mod",
            "text": "fun box\n mod(y:  I32  val):  I32  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-I32/#fun-mul",
            "text": "fun box\n mul(y:  I32  val):  I32  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-I32/#fun-mulc",
            "text": "fun box\n mulc(y:  I32  val): ( I32  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-I32/#fun-ne",
            "text": "fun box\n ne(y:  I32  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-I32/#fun-neg",
            "text": "fun box\n neg():  I32  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-I32/#fun-op_and",
            "text": "fun box\n op_and(y:  I32  val):  I32  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-I32/#fun-op_not",
            "text": "fun box\n op_not():  I32  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-I32/#fun-op_or",
            "text": "fun box\n op_or(y:  I32  val):  I32  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-I32/#fun-op_xor",
            "text": "fun box\n op_xor(y:  I32  val):  I32  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-I32/#fun-popcount",
            "text": "fun box\n popcount():  I32  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-I32/#fun-rotl",
            "text": "fun box\n rotl(y:  I32  val):  I32  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-I32/#fun-rotr",
            "text": "fun box\n rotr(y:  I32  val):  I32  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-I32/#fun-shl",
            "text": "fun box\n shl(y:  I32  val):  I32  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-I32/#fun-shr",
            "text": "fun box\n shr(y:  I32  val):  I32  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-I32/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-I32/#fun-sub",
            "text": "fun box\n sub(y:  I32  val):  I32  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-I32/#fun-subc",
            "text": "fun box\n subc(y:  I32  val): ( I32  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-I32/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-I32/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-I32/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-I32/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-I32/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-I32/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-I32/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-I64/",
            "text": "primitive I64 is \n_SignedInteger\n[\nI64\n val, \nU64\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nI64\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nU64\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nI64\n val): (\nI64\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nI64\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nI64\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nI64\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nI64\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nI64\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nI64\n val): (\nI64\n val , \nI64\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nI64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nI64\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nI64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nI64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nI64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nI64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nI64\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nI64\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nI64\n val): (\nI64\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nI64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nI64\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nI64\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nI64\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nI64\n val): \nI64\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nI64\n val): (\nI64\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive I64"
        },
        {
            "location": "/builtin-I64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I64/#new-create",
            "text": "new create(optional value:  I64  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-I64/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-I64/#fun-abs",
            "text": "fun box\n abs():  U64  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-I64/#fun-add",
            "text": "fun box\n add(y:  I64  val):  I64  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-I64/#fun-addc",
            "text": "fun box\n addc(y:  I64  val): ( I64  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-I64/#fun-bitwidth",
            "text": "fun box\n bitwidth():  I64  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-I64/#fun-bswap",
            "text": "fun box\n bswap():  I64  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-I64/#fun-clz",
            "text": "fun box\n clz():  I64  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-I64/#fun-compare",
            "text": "fun box\n compare(that:  I64  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-I64/#fun-ctz",
            "text": "fun box\n ctz():  I64  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-I64/#fun-div",
            "text": "fun box\n div(y:  I64  val):  I64  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-I64/#fun-divmod",
            "text": "fun box\n divmod(y:  I64  val): ( I64  val ,  I64  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-I64/#fun-eq",
            "text": "fun box\n eq(y:  I64  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-I64/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-I64/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-I64/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  I64  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-I64/#fun-ge",
            "text": "fun box\n ge(y:  I64  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-I64/#fun-gt",
            "text": "fun box\n gt(y:  I64  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-I64/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-I64/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-I64/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-I64/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-I64/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-I64/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-I64/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-I64/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-I64/#fun-le",
            "text": "fun box\n le(y:  I64  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-I64/#fun-lt",
            "text": "fun box\n lt(y:  I64  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-I64/#fun-max",
            "text": "fun box\n max(y:  I64  val):  I64  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-I64/#fun-max_value",
            "text": "fun tag\n max_value():  I64  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-I64/#fun-min",
            "text": "fun box\n min(y:  I64  val):  I64  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-I64/#fun-min_value",
            "text": "fun tag\n min_value():  I64  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-I64/#fun-mod",
            "text": "fun box\n mod(y:  I64  val):  I64  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-I64/#fun-mul",
            "text": "fun box\n mul(y:  I64  val):  I64  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-I64/#fun-mulc",
            "text": "fun box\n mulc(y:  I64  val): ( I64  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-I64/#fun-ne",
            "text": "fun box\n ne(y:  I64  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-I64/#fun-neg",
            "text": "fun box\n neg():  I64  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-I64/#fun-op_and",
            "text": "fun box\n op_and(y:  I64  val):  I64  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-I64/#fun-op_not",
            "text": "fun box\n op_not():  I64  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-I64/#fun-op_or",
            "text": "fun box\n op_or(y:  I64  val):  I64  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-I64/#fun-op_xor",
            "text": "fun box\n op_xor(y:  I64  val):  I64  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-I64/#fun-popcount",
            "text": "fun box\n popcount():  I64  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-I64/#fun-rotl",
            "text": "fun box\n rotl(y:  I64  val):  I64  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-I64/#fun-rotr",
            "text": "fun box\n rotr(y:  I64  val):  I64  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-I64/#fun-shl",
            "text": "fun box\n shl(y:  I64  val):  I64  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-I64/#fun-shr",
            "text": "fun box\n shr(y:  I64  val):  I64  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-I64/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-I64/#fun-sub",
            "text": "fun box\n sub(y:  I64  val):  I64  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-I64/#fun-subc",
            "text": "fun box\n subc(y:  I64  val): ( I64  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-I64/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-I64/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-I64/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-I64/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-I64/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-I64/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-I64/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-I8/",
            "text": "primitive I8 is \n_SignedInteger\n[\nI8\n val, \nU8\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nI8\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nU8\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nI8\n val): (\nI8\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nI8\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nI8\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nI8\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nI8\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nI8\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nI8\n val): (\nI8\n val , \nI8\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nI8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nI8\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nI8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nI8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nI8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nI8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nI8\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nI8\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nI8\n val): (\nI8\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nI8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nI8\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nI8\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nI8\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nI8\n val): \nI8\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nI8\n val): (\nI8\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive I8"
        },
        {
            "location": "/builtin-I8/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-I8/#new-create",
            "text": "new create(optional value:  I8  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-I8/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-I8/#fun-abs",
            "text": "fun box\n abs():  U8  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-I8/#fun-add",
            "text": "fun box\n add(y:  I8  val):  I8  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-I8/#fun-addc",
            "text": "fun box\n addc(y:  I8  val): ( I8  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-I8/#fun-bitwidth",
            "text": "fun box\n bitwidth():  I8  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-I8/#fun-bswap",
            "text": "fun box\n bswap():  I8  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-I8/#fun-clz",
            "text": "fun box\n clz():  I8  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-I8/#fun-compare",
            "text": "fun box\n compare(that:  I8  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-I8/#fun-ctz",
            "text": "fun box\n ctz():  I8  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-I8/#fun-div",
            "text": "fun box\n div(y:  I8  val):  I8  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-I8/#fun-divmod",
            "text": "fun box\n divmod(y:  I8  val): ( I8  val ,  I8  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-I8/#fun-eq",
            "text": "fun box\n eq(y:  I8  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-I8/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-I8/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-I8/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  I8  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-I8/#fun-ge",
            "text": "fun box\n ge(y:  I8  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-I8/#fun-gt",
            "text": "fun box\n gt(y:  I8  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-I8/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-I8/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-I8/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-I8/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-I8/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-I8/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-I8/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-I8/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-I8/#fun-le",
            "text": "fun box\n le(y:  I8  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-I8/#fun-lt",
            "text": "fun box\n lt(y:  I8  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-I8/#fun-max",
            "text": "fun box\n max(y:  I8  val):  I8  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-I8/#fun-max_value",
            "text": "fun tag\n max_value():  I8  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-I8/#fun-min",
            "text": "fun box\n min(y:  I8  val):  I8  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-I8/#fun-min_value",
            "text": "fun tag\n min_value():  I8  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-I8/#fun-mod",
            "text": "fun box\n mod(y:  I8  val):  I8  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-I8/#fun-mul",
            "text": "fun box\n mul(y:  I8  val):  I8  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-I8/#fun-mulc",
            "text": "fun box\n mulc(y:  I8  val): ( I8  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-I8/#fun-ne",
            "text": "fun box\n ne(y:  I8  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-I8/#fun-neg",
            "text": "fun box\n neg():  I8  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-I8/#fun-op_and",
            "text": "fun box\n op_and(y:  I8  val):  I8  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-I8/#fun-op_not",
            "text": "fun box\n op_not():  I8  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-I8/#fun-op_or",
            "text": "fun box\n op_or(y:  I8  val):  I8  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-I8/#fun-op_xor",
            "text": "fun box\n op_xor(y:  I8  val):  I8  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-I8/#fun-popcount",
            "text": "fun box\n popcount():  I8  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-I8/#fun-rotl",
            "text": "fun box\n rotl(y:  I8  val):  I8  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-I8/#fun-rotr",
            "text": "fun box\n rotr(y:  I8  val):  I8  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-I8/#fun-shl",
            "text": "fun box\n shl(y:  I8  val):  I8  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-I8/#fun-shr",
            "text": "fun box\n shr(y:  I8  val):  I8  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-I8/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-I8/#fun-sub",
            "text": "fun box\n sub(y:  I8  val):  I8  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-I8/#fun-subc",
            "text": "fun box\n subc(y:  I8  val): ( I8  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-I8/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-I8/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-I8/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-I8/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-I8/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-I8/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-I8/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-ILong/",
            "text": "primitive ILong is \n_SignedInteger\n[\nILong\n val, \nULong\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nILong\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nULong\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nILong\n val): (\nILong\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nILong\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nILong\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nILong\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nILong\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nILong\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nILong\n val): (\nILong\n val , \nILong\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nILong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nILong\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nILong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nILong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nILong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nILong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nILong\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nILong\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nILong\n val): (\nILong\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nILong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nILong\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nILong\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nILong\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nILong\n val): \nILong\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nILong\n val): (\nILong\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive ILong"
        },
        {
            "location": "/builtin-ILong/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ILong/#new-create",
            "text": "new create(optional value:  ILong  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-ILong/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-ILong/#fun-abs",
            "text": "fun box\n abs():  ULong  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-ILong/#fun-add",
            "text": "fun box\n add(y:  ILong  val):  ILong  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-ILong/#fun-addc",
            "text": "fun box\n addc(y:  ILong  val): ( ILong  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-ILong/#fun-bitwidth",
            "text": "fun box\n bitwidth():  ILong  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-ILong/#fun-bswap",
            "text": "fun box\n bswap():  ILong  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-ILong/#fun-clz",
            "text": "fun box\n clz():  ILong  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-ILong/#fun-compare",
            "text": "fun box\n compare(that:  ILong  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-ILong/#fun-ctz",
            "text": "fun box\n ctz():  ILong  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-ILong/#fun-div",
            "text": "fun box\n div(y:  ILong  val):  ILong  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-ILong/#fun-divmod",
            "text": "fun box\n divmod(y:  ILong  val): ( ILong  val ,  ILong  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-ILong/#fun-eq",
            "text": "fun box\n eq(y:  ILong  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-ILong/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-ILong/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-ILong/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  ILong  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-ILong/#fun-ge",
            "text": "fun box\n ge(y:  ILong  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-ILong/#fun-gt",
            "text": "fun box\n gt(y:  ILong  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-ILong/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-ILong/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-ILong/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-ILong/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-ILong/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-ILong/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-ILong/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-ILong/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-ILong/#fun-le",
            "text": "fun box\n le(y:  ILong  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-ILong/#fun-lt",
            "text": "fun box\n lt(y:  ILong  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-ILong/#fun-max",
            "text": "fun box\n max(y:  ILong  val):  ILong  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-ILong/#fun-max_value",
            "text": "fun tag\n max_value():  ILong  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-ILong/#fun-min",
            "text": "fun box\n min(y:  ILong  val):  ILong  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-ILong/#fun-min_value",
            "text": "fun tag\n min_value():  ILong  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-ILong/#fun-mod",
            "text": "fun box\n mod(y:  ILong  val):  ILong  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-ILong/#fun-mul",
            "text": "fun box\n mul(y:  ILong  val):  ILong  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-ILong/#fun-mulc",
            "text": "fun box\n mulc(y:  ILong  val): ( ILong  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-ILong/#fun-ne",
            "text": "fun box\n ne(y:  ILong  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-ILong/#fun-neg",
            "text": "fun box\n neg():  ILong  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-ILong/#fun-op_and",
            "text": "fun box\n op_and(y:  ILong  val):  ILong  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-ILong/#fun-op_not",
            "text": "fun box\n op_not():  ILong  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-ILong/#fun-op_or",
            "text": "fun box\n op_or(y:  ILong  val):  ILong  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-ILong/#fun-op_xor",
            "text": "fun box\n op_xor(y:  ILong  val):  ILong  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-ILong/#fun-popcount",
            "text": "fun box\n popcount():  ILong  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-ILong/#fun-rotl",
            "text": "fun box\n rotl(y:  ILong  val):  ILong  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-ILong/#fun-rotr",
            "text": "fun box\n rotr(y:  ILong  val):  ILong  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-ILong/#fun-shl",
            "text": "fun box\n shl(y:  ILong  val):  ILong  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-ILong/#fun-shr",
            "text": "fun box\n shr(y:  ILong  val):  ILong  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-ILong/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-ILong/#fun-sub",
            "text": "fun box\n sub(y:  ILong  val):  ILong  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-ILong/#fun-subc",
            "text": "fun box\n subc(y:  ILong  val): ( ILong  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-ILong/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-ILong/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-ILong/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-ILong/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-ILong/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-ILong/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-ILong/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-ISize/",
            "text": "primitive ISize is \n_SignedInteger\n[\nISize\n val, \nUSize\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nISize\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nUSize\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nISize\n val): (\nISize\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nISize\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nISize\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nISize\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nISize\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nISize\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nISize\n val): (\nISize\n val , \nISize\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nISize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nISize\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nISize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nISize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nISize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nISize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nISize\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nISize\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nISize\n val): (\nISize\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nISize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nISize\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nISize\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nISize\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nISize\n val): \nISize\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nISize\n val): (\nISize\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive ISize"
        },
        {
            "location": "/builtin-ISize/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ISize/#new-create",
            "text": "new create(optional value:  ISize  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-ISize/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-ISize/#fun-abs",
            "text": "fun box\n abs():  USize  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-ISize/#fun-add",
            "text": "fun box\n add(y:  ISize  val):  ISize  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-ISize/#fun-addc",
            "text": "fun box\n addc(y:  ISize  val): ( ISize  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-ISize/#fun-bitwidth",
            "text": "fun box\n bitwidth():  ISize  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-ISize/#fun-bswap",
            "text": "fun box\n bswap():  ISize  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-ISize/#fun-clz",
            "text": "fun box\n clz():  ISize  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-ISize/#fun-compare",
            "text": "fun box\n compare(that:  ISize  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-ISize/#fun-ctz",
            "text": "fun box\n ctz():  ISize  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-ISize/#fun-div",
            "text": "fun box\n div(y:  ISize  val):  ISize  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-ISize/#fun-divmod",
            "text": "fun box\n divmod(y:  ISize  val): ( ISize  val ,  ISize  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-ISize/#fun-eq",
            "text": "fun box\n eq(y:  ISize  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-ISize/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-ISize/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-ISize/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  ISize  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-ISize/#fun-ge",
            "text": "fun box\n ge(y:  ISize  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-ISize/#fun-gt",
            "text": "fun box\n gt(y:  ISize  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-ISize/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-ISize/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-ISize/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-ISize/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-ISize/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-ISize/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-ISize/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-ISize/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-ISize/#fun-le",
            "text": "fun box\n le(y:  ISize  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-ISize/#fun-lt",
            "text": "fun box\n lt(y:  ISize  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-ISize/#fun-max",
            "text": "fun box\n max(y:  ISize  val):  ISize  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-ISize/#fun-max_value",
            "text": "fun tag\n max_value():  ISize  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-ISize/#fun-min",
            "text": "fun box\n min(y:  ISize  val):  ISize  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-ISize/#fun-min_value",
            "text": "fun tag\n min_value():  ISize  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-ISize/#fun-mod",
            "text": "fun box\n mod(y:  ISize  val):  ISize  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-ISize/#fun-mul",
            "text": "fun box\n mul(y:  ISize  val):  ISize  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-ISize/#fun-mulc",
            "text": "fun box\n mulc(y:  ISize  val): ( ISize  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-ISize/#fun-ne",
            "text": "fun box\n ne(y:  ISize  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-ISize/#fun-neg",
            "text": "fun box\n neg():  ISize  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-ISize/#fun-op_and",
            "text": "fun box\n op_and(y:  ISize  val):  ISize  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-ISize/#fun-op_not",
            "text": "fun box\n op_not():  ISize  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-ISize/#fun-op_or",
            "text": "fun box\n op_or(y:  ISize  val):  ISize  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-ISize/#fun-op_xor",
            "text": "fun box\n op_xor(y:  ISize  val):  ISize  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-ISize/#fun-popcount",
            "text": "fun box\n popcount():  ISize  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-ISize/#fun-rotl",
            "text": "fun box\n rotl(y:  ISize  val):  ISize  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-ISize/#fun-rotr",
            "text": "fun box\n rotr(y:  ISize  val):  ISize  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-ISize/#fun-shl",
            "text": "fun box\n shl(y:  ISize  val):  ISize  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-ISize/#fun-shr",
            "text": "fun box\n shr(y:  ISize  val):  ISize  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-ISize/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-ISize/#fun-sub",
            "text": "fun box\n sub(y:  ISize  val):  ISize  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-ISize/#fun-subc",
            "text": "fun box\n subc(y:  ISize  val): ( ISize  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-ISize/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-ISize/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-ISize/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-ISize/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-ISize/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-ISize/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-ISize/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-Integer/",
            "text": "trait Integer[A: \nInteger\n[A val] val] is \nReal\n[A val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(value: A val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun add()\n\n\nfun box\n add(y: A val): A val\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): A val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): A val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): A val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: A val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): A val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: A val): A val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: A val): (A val , A val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): A val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: A val): A val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): A val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: A val): A val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): A val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: A val): A val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: A val): A val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): A val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: A val): A val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): A val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: A val): A val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: A val): A val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): A val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: A val): A val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: A val): A val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: A val): A val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: A val): A val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: A val): A val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "trait Integer"
        },
        {
            "location": "/builtin-Integer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Integer/#new-create",
            "text": "new create(value: A val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Integer/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Integer/#fun-add",
            "text": "fun box\n add(y: A val): A val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-Integer/#fun-bitwidth",
            "text": "fun box\n bitwidth(): A val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-Integer/#fun-bswap",
            "text": "fun box\n bswap(): A val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-Integer/#fun-clz",
            "text": "fun box\n clz(): A val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-Integer/#fun-compare",
            "text": "fun box\n compare(that: A val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-Integer/#fun-ctz",
            "text": "fun box\n ctz(): A val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-Integer/#fun-div",
            "text": "fun box\n div(y: A val): A val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-Integer/#fun-divmod",
            "text": "fun box\n divmod(y: A val): (A val , A val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-Integer/#fun-eq",
            "text": "fun box\n eq(y: A val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-Integer/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-Integer/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-Integer/#fun-from",
            "text": "fun tag\n from[B: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [B val] val)](a: B val): A val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-Integer/#fun-ge",
            "text": "fun box\n ge(y: A val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-Integer/#fun-gt",
            "text": "fun box\n gt(y: A val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-Integer/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-Integer/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-Integer/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-Integer/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-Integer/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-Integer/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-Integer/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-Integer/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-Integer/#fun-le",
            "text": "fun box\n le(y: A val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-Integer/#fun-lt",
            "text": "fun box\n lt(y: A val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-Integer/#fun-max",
            "text": "fun box\n max(y: A val): A val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-Integer/#fun-max_value",
            "text": "fun tag\n max_value(): A val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-Integer/#fun-min",
            "text": "fun box\n min(y: A val): A val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-Integer/#fun-min_value",
            "text": "fun tag\n min_value(): A val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-Integer/#fun-mod",
            "text": "fun box\n mod(y: A val): A val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-Integer/#fun-mul",
            "text": "fun box\n mul(y: A val): A val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-Integer/#fun-ne",
            "text": "fun box\n ne(y: A val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Integer/#fun-neg",
            "text": "fun box\n neg(): A val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-Integer/#fun-op_and",
            "text": "fun box\n op_and(y: A val): A val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-Integer/#fun-op_not",
            "text": "fun box\n op_not(): A val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-Integer/#fun-op_or",
            "text": "fun box\n op_or(y: A val): A val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-Integer/#fun-op_xor",
            "text": "fun box\n op_xor(y: A val): A val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-Integer/#fun-popcount",
            "text": "fun box\n popcount(): A val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-Integer/#fun-rotl",
            "text": "fun box\n rotl(y: A val): A val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-Integer/#fun-rotr",
            "text": "fun box\n rotr(y: A val): A val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-Integer/#fun-shl",
            "text": "fun box\n shl(y: A val): A val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-Integer/#fun-shr",
            "text": "fun box\n shr(y: A val): A val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-Integer/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [ FormatDefault  val,  PrefixDefault  val] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-Integer/#fun-sub",
            "text": "fun box\n sub(y: A val): A val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-Integer/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-Integer/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-Integer/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-Integer/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-Integer/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-Integer/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-Integer/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-Iterator/",
            "text": "interface Iterator[A: A]\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun ref\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun next()\n\n\nfun ref\n next(): A ?\n\n\nPublic, may raise an error.",
            "title": "interface Iterator"
        },
        {
            "location": "/builtin-Iterator/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Iterator/#fun-has_next",
            "text": "fun ref\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/builtin-Iterator/#fun-next",
            "text": "fun ref\n next(): A ?  Public, may raise an error.",
            "title": "fun next()"
        },
        {
            "location": "/builtin-Less/",
            "text": "primitive Less is \nEquatable\n[((\nLess\n val | \nEqual\n val) | \nGreater\n val)] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: ((\nLess\n val | \nEqual\n val) | \nGreater\n val)): \nBool\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nPublic.",
            "title": "primitive Less"
        },
        {
            "location": "/builtin-Less/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Less/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Less/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Less/#fun-eq",
            "text": "fun box\n eq(that: (( Less  val |  Equal  val) |  Greater  val)):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-Less/#fun-ne",
            "text": "fun box\n ne(that: (( Less  val |  Equal  val) |  Greater  val)):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Less/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [ FormatDefault  val,  PrefixDefault  val] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-Maybe/",
            "text": "struct Maybe[A: A]\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nA Maybe[A] is used to encode a possibly-null type. It should \nonly\n be used\nfor structs that need to be passed to and from the C FFI.\n\n\nAn optional type for anything that isn't a struct should be encoded as a\nunion type, for example (A | None).\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(that: A)\n\n\nPublic.\n\n\nThis re-encodes the type of \nthat\n from A to Maybe[A], allowing \nthat\n to\nbe assigned to a field or variable of type Maybe[A]. It doesn't allocate a\nwrapper object: there is no containing object for \nthat\n.\n\n\nnew none()\n\n\nnew none()\n\n\nPublic.\n\n\nThis returns a null pointer typed as a Maybe[A].\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(): this-\nA ?\n\n\nPublic, may raise an error.\n\n\nThis re-encodes the type of \nthis\n from Maybe[A] to A, allowing \nthis\n to\nbe assigned to a field of variable of type A. If \nthis\n is a null pointer,\nan error is raised.\n\n\nfun is_none()\n\n\nfun box\n is_none(): \nBool\n val\n\n\nPublic.\n\n\nReturns true if \nthis\n is null (ie apply would raise an error).",
            "title": "struct Maybe"
        },
        {
            "location": "/builtin-Maybe/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Maybe/#new-create",
            "text": "new create(that: A)  Public.  This re-encodes the type of  that  from A to Maybe[A], allowing  that  to\nbe assigned to a field or variable of type Maybe[A]. It doesn't allocate a\nwrapper object: there is no containing object for  that .",
            "title": "new create()"
        },
        {
            "location": "/builtin-Maybe/#new-none",
            "text": "new none()  Public.  This returns a null pointer typed as a Maybe[A].",
            "title": "new none()"
        },
        {
            "location": "/builtin-Maybe/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Maybe/#fun-apply",
            "text": "fun box\n apply(): this- A ?  Public, may raise an error.  This re-encodes the type of  this  from Maybe[A] to A, allowing  this  to\nbe assigned to a field of variable of type A. If  this  is a null pointer,\nan error is raised.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin-Maybe/#fun-is_none",
            "text": "fun box\n is_none():  Bool  val  Public.  Returns true if  this  is null (ie apply would raise an error).",
            "title": "fun is_none()"
        },
        {
            "location": "/builtin-None/",
            "text": "primitive None is \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nNone\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nNone\n val): \nBool\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nPublic.",
            "title": "primitive None"
        },
        {
            "location": "/builtin-None/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-None/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-None/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-None/#fun-eq",
            "text": "fun box\n eq(that:  None  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-None/#fun-ne",
            "text": "fun box\n ne(that:  None  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-None/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [ FormatDefault  val,  PrefixDefault  val] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-Number/",
            "text": "type Number is ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val))\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type Number"
        },
        {
            "location": "/builtin-OutStream/",
            "text": "interface OutStream\n\n\nIn package \"builtin\".\n\n\nPublic, default capability tag.\n\n\nAsnychronous access to some output stream.\n\n\nBehaviours\n\n\nbe print()\n\n\nbe print(data: \nByteSeq\n val)\n\n\nPublic.\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe printv()\n\n\nbe printv(data: \nByteSeqIter\n val)\n\n\nPublic.\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe write()\n\n\nbe write(data: \nByteSeq\n val)\n\n\nPublic.\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe writev()\n\n\nbe writev(data: \nByteSeqIter\n val)\n\n\nPublic.\n\n\nWrite an iterable collection of ByteSeqs.",
            "title": "interface OutStream"
        },
        {
            "location": "/builtin-OutStream/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/builtin-OutStream/#be-print",
            "text": "be print(data:  ByteSeq  val)  Public.  Print some bytes and insert a newline afterwards.",
            "title": "be print()"
        },
        {
            "location": "/builtin-OutStream/#be-printv",
            "text": "be printv(data:  ByteSeqIter  val)  Public.  Print an iterable collection of ByteSeqs.",
            "title": "be printv()"
        },
        {
            "location": "/builtin-OutStream/#be-write",
            "text": "be write(data:  ByteSeq  val)  Public.  Print some bytes without inserting a newline afterwards.",
            "title": "be write()"
        },
        {
            "location": "/builtin-OutStream/#be-writev",
            "text": "be writev(data:  ByteSeqIter  val)  Public.  Write an iterable collection of ByteSeqs.",
            "title": "be writev()"
        },
        {
            "location": "/builtin-Platform/",
            "text": "primitive Platform\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun arm()\n\n\nfun box\n arm(): \nBool\n val\n\n\nPublic.\n\n\nfun debug()\n\n\nfun box\n debug(): \nBool\n val\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nPlatform\n val): \nBool\n val\n\n\nPublic.\n\n\nfun freebsd()\n\n\nfun box\n freebsd(): \nBool\n val\n\n\nPublic.\n\n\nfun ilp32()\n\n\nfun box\n ilp32(): \nBool\n val\n\n\nPublic.\n\n\nfun linux()\n\n\nfun box\n linux(): \nBool\n val\n\n\nPublic.\n\n\nfun llp64()\n\n\nfun box\n llp64(): \nBool\n val\n\n\nPublic.\n\n\nfun lp64()\n\n\nfun box\n lp64(): \nBool\n val\n\n\nPublic.\n\n\nfun native128()\n\n\nfun box\n native128(): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nPlatform\n val): \nBool\n val\n\n\nPublic.\n\n\nfun osx()\n\n\nfun box\n osx(): \nBool\n val\n\n\nPublic.\n\n\nfun posix()\n\n\nfun box\n posix(): \nBool\n val\n\n\nPublic.\n\n\nfun windows()\n\n\nfun box\n windows(): \nBool\n val\n\n\nPublic.\n\n\nfun x86()\n\n\nfun box\n x86(): \nBool\n val\n\n\nPublic.",
            "title": "primitive Platform"
        },
        {
            "location": "/builtin-Platform/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Platform/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Platform/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Platform/#fun-arm",
            "text": "fun box\n arm():  Bool  val  Public.",
            "title": "fun arm()"
        },
        {
            "location": "/builtin-Platform/#fun-debug",
            "text": "fun box\n debug():  Bool  val  Public.",
            "title": "fun debug()"
        },
        {
            "location": "/builtin-Platform/#fun-eq",
            "text": "fun box\n eq(that:  Platform  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-Platform/#fun-freebsd",
            "text": "fun box\n freebsd():  Bool  val  Public.",
            "title": "fun freebsd()"
        },
        {
            "location": "/builtin-Platform/#fun-ilp32",
            "text": "fun box\n ilp32():  Bool  val  Public.",
            "title": "fun ilp32()"
        },
        {
            "location": "/builtin-Platform/#fun-linux",
            "text": "fun box\n linux():  Bool  val  Public.",
            "title": "fun linux()"
        },
        {
            "location": "/builtin-Platform/#fun-llp64",
            "text": "fun box\n llp64():  Bool  val  Public.",
            "title": "fun llp64()"
        },
        {
            "location": "/builtin-Platform/#fun-lp64",
            "text": "fun box\n lp64():  Bool  val  Public.",
            "title": "fun lp64()"
        },
        {
            "location": "/builtin-Platform/#fun-native128",
            "text": "fun box\n native128():  Bool  val  Public.",
            "title": "fun native128()"
        },
        {
            "location": "/builtin-Platform/#fun-ne",
            "text": "fun box\n ne(that:  Platform  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Platform/#fun-osx",
            "text": "fun box\n osx():  Bool  val  Public.",
            "title": "fun osx()"
        },
        {
            "location": "/builtin-Platform/#fun-posix",
            "text": "fun box\n posix():  Bool  val  Public.",
            "title": "fun posix()"
        },
        {
            "location": "/builtin-Platform/#fun-windows",
            "text": "fun box\n windows():  Bool  val  Public.",
            "title": "fun windows()"
        },
        {
            "location": "/builtin-Platform/#fun-x86",
            "text": "fun box\n x86():  Bool  val  Public.",
            "title": "fun x86()"
        },
        {
            "location": "/builtin-Pointer/",
            "text": "struct Pointer[A: A]\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nA Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.\n\n\nConstructors\n\n\nnew _alloc()\n\n\nnew _alloc(len: \nUSize\n val)\n\n\nPrivate.\n\n\nSpace for len instances of A.\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nA null pointer.\n\n\nFunctions\n\n\nfun _apply()\n\n\nfun box\n _apply(i: \nUSize\n val): this-\nA\n\n\nPrivate.\n\n\nRetrieve index i.\n\n\nfun _copy_to()\n\n\nfun box\n _copy_to(that: \nPointer\n[this-\nA!] tag, n: \nUSize\n val): this-\nPointer\n[A] ref\n\n\nPrivate.\n\n\nCopy n elements from this to that.\n\n\nfun _delete()\n\n\nfun ref\n _delete(n: \nUSize\n val, len: \nUSize\n val): A^\n\n\nPrivate.\n\n\nDelete n elements from the head of pointer, compact remaining elements of\nthe underlying array. The array length before this should be n + len.\nReturns the first deleted element.\n\n\nfun eq()\n\n\nfun tag\n eq(that: \nPointer\n[A] tag): \nBool\n val\n\n\nPublic.\n\n\nReturn true if this address is that address.\n\n\nfun ge()\n\n\nfun tag\n ge(that: \nPointer\n[A] tag): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun tag\n gt(that: \nPointer\n[A] tag): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun tag\n hash(): \nU64\n val\n\n\nPublic.\n\n\nReturns a hash of the address.\n\n\nfun _insert()\n\n\nfun ref\n _insert(n: \nUSize\n val, len: \nUSize\n val): \nPointer\n[A] ref\n\n\nPrivate.\n\n\nCreates space for n new elements at the head, moving following elements.\nThe array length before this should be len, and the available space should\nbe at least n + len.\n\n\nfun is_null()\n\n\nfun tag\n is_null(): \nBool\n val\n\n\nPublic.\n\n\nReturn true for a null pointer, false for anything else.\n\n\nfun le()\n\n\nfun tag\n le(that: \nPointer\n[A] tag): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun tag\n lt(that: \nPointer\n[A] tag): \nBool\n val\n\n\nPublic.\n\n\nReturn true if this address is less than that address.\n\n\nfun ne()\n\n\nfun tag\n ne(that: \nPointer\n[A] tag): \nBool\n val\n\n\nPublic.\n\n\nfun _offset()\n\n\nfun box\n _offset(n: \nUSize\n val): this-\nPointer\n[A] ref\n\n\nPrivate.\n\n\nReturn a pointer to the n-th element.\n\n\nfun _offset_tag()\n\n\nfun tag\n _offset_tag(n: \nUSize\n val): \nPointer\n[A] tag\n\n\nPrivate.\n\n\nReturn a pointer to the n-th element.\n\n\nfun _realloc()\n\n\nfun ref\n _realloc(len: \nUSize\n val): \nPointer\n[A] ref\n\n\nPrivate.\n\n\nKeep the contents, but reserve space for len instances of A.\n\n\nfun _update()\n\n\nfun ref\n _update(i: \nUSize\n val, value: A!): A^\n\n\nPrivate.\n\n\nSet index i and return the previous value.\n\n\nfun usize()\n\n\nfun tag\n usize(): \nUSize\n val\n\n\nPublic.\n\n\nConvert the pointer into an integer.",
            "title": "struct Pointer"
        },
        {
            "location": "/builtin-Pointer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Pointer/#new-_alloc",
            "text": "new _alloc(len:  USize  val)  Private.  Space for len instances of A.",
            "title": "new _alloc()"
        },
        {
            "location": "/builtin-Pointer/#new-create",
            "text": "new create()  Public.  A null pointer.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Pointer/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Pointer/#fun-_apply",
            "text": "fun box\n _apply(i:  USize  val): this- A  Private.  Retrieve index i.",
            "title": "fun _apply()"
        },
        {
            "location": "/builtin-Pointer/#fun-_copy_to",
            "text": "fun box\n _copy_to(that:  Pointer [this- A!] tag, n:  USize  val): this- Pointer [A] ref  Private.  Copy n elements from this to that.",
            "title": "fun _copy_to()"
        },
        {
            "location": "/builtin-Pointer/#fun-_delete",
            "text": "fun ref\n _delete(n:  USize  val, len:  USize  val): A^  Private.  Delete n elements from the head of pointer, compact remaining elements of\nthe underlying array. The array length before this should be n + len.\nReturns the first deleted element.",
            "title": "fun _delete()"
        },
        {
            "location": "/builtin-Pointer/#fun-eq",
            "text": "fun tag\n eq(that:  Pointer [A] tag):  Bool  val  Public.  Return true if this address is that address.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-Pointer/#fun-ge",
            "text": "fun tag\n ge(that:  Pointer [A] tag):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-Pointer/#fun-gt",
            "text": "fun tag\n gt(that:  Pointer [A] tag):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-Pointer/#fun-hash",
            "text": "fun tag\n hash():  U64  val  Public.  Returns a hash of the address.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-Pointer/#fun-_insert",
            "text": "fun ref\n _insert(n:  USize  val, len:  USize  val):  Pointer [A] ref  Private.  Creates space for n new elements at the head, moving following elements.\nThe array length before this should be len, and the available space should\nbe at least n + len.",
            "title": "fun _insert()"
        },
        {
            "location": "/builtin-Pointer/#fun-is_null",
            "text": "fun tag\n is_null():  Bool  val  Public.  Return true for a null pointer, false for anything else.",
            "title": "fun is_null()"
        },
        {
            "location": "/builtin-Pointer/#fun-le",
            "text": "fun tag\n le(that:  Pointer [A] tag):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-Pointer/#fun-lt",
            "text": "fun tag\n lt(that:  Pointer [A] tag):  Bool  val  Public.  Return true if this address is less than that address.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-Pointer/#fun-ne",
            "text": "fun tag\n ne(that:  Pointer [A] tag):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Pointer/#fun-_offset",
            "text": "fun box\n _offset(n:  USize  val): this- Pointer [A] ref  Private.  Return a pointer to the n-th element.",
            "title": "fun _offset()"
        },
        {
            "location": "/builtin-Pointer/#fun-_offset_tag",
            "text": "fun tag\n _offset_tag(n:  USize  val):  Pointer [A] tag  Private.  Return a pointer to the n-th element.",
            "title": "fun _offset_tag()"
        },
        {
            "location": "/builtin-Pointer/#fun-_realloc",
            "text": "fun ref\n _realloc(len:  USize  val):  Pointer [A] ref  Private.  Keep the contents, but reserve space for len instances of A.",
            "title": "fun _realloc()"
        },
        {
            "location": "/builtin-Pointer/#fun-_update",
            "text": "fun ref\n _update(i:  USize  val, value: A!): A^  Private.  Set index i and return the previous value.",
            "title": "fun _update()"
        },
        {
            "location": "/builtin-Pointer/#fun-usize",
            "text": "fun tag\n usize():  USize  val  Public.  Convert the pointer into an integer.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-PrefixDefault/",
            "text": "primitive PrefixDefault is \nPrefixSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nPrefixDefault\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nPrefixDefault\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive PrefixDefault"
        },
        {
            "location": "/builtin-PrefixDefault/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-PrefixDefault/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-PrefixDefault/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-PrefixDefault/#fun-eq",
            "text": "fun box\n eq(that:  PrefixDefault  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-PrefixDefault/#fun-ne",
            "text": "fun box\n ne(that:  PrefixDefault  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-PrefixNumber/",
            "text": "type PrefixNumber is ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type PrefixNumber"
        },
        {
            "location": "/builtin-PrefixSign/",
            "text": "primitive PrefixSign is \nPrefixSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nPrefixSign\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nPrefixSign\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive PrefixSign"
        },
        {
            "location": "/builtin-PrefixSign/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-PrefixSign/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-PrefixSign/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-PrefixSign/#fun-eq",
            "text": "fun box\n eq(that:  PrefixSign  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-PrefixSign/#fun-ne",
            "text": "fun box\n ne(that:  PrefixSign  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-PrefixSpace/",
            "text": "primitive PrefixSpace is \nPrefixSpec\n val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nPrefixSpace\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nPrefixSpace\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive PrefixSpace"
        },
        {
            "location": "/builtin-PrefixSpace/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-PrefixSpace/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-PrefixSpace/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-PrefixSpace/#fun-eq",
            "text": "fun box\n eq(that:  PrefixSpace  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-PrefixSpace/#fun-ne",
            "text": "fun box\n ne(that:  PrefixSpace  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-PrefixSpec/",
            "text": "trait PrefixSpec\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.",
            "title": "trait PrefixSpec"
        },
        {
            "location": "/builtin-ReadSeq/",
            "text": "interface ReadSeq[A: A]\n\n\nIn package \"builtin\".\n\n\nPublic, default capability box.\n\n\nThe readable interface of a sequence.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(i: \nUSize\n val): A^ ?\n\n\nPublic, may raise an error.\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns A^, not this-\nA.\n\n\nfun size()\n\n\nfun box\n size(): \nUSize\n val\n\n\nPublic.\n\n\nReturns the number of elements in the sequence.\n\n\nfun values()\n\n\nfun box\n values(): \nIterator\n[A^] ref^\n\n\nPublic.\n\n\nReturns an iterator over the elements of the sequence. Note that this\niterates over A^, not this-\nA.",
            "title": "interface ReadSeq"
        },
        {
            "location": "/builtin-ReadSeq/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-ReadSeq/#fun-apply",
            "text": "fun box\n apply(i:  USize  val): A^ ?  Public, may raise an error.  Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns A^, not this- A.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin-ReadSeq/#fun-size",
            "text": "fun box\n size():  USize  val  Public.  Returns the number of elements in the sequence.",
            "title": "fun size()"
        },
        {
            "location": "/builtin-ReadSeq/#fun-values",
            "text": "fun box\n values():  Iterator [A^] ref^  Public.  Returns an iterator over the elements of the sequence. Note that this\niterates over A^, not this- A.",
            "title": "fun values()"
        },
        {
            "location": "/builtin-Real/",
            "text": "trait Real[A: \nReal\n[A val] val] is \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box, \n_ArithmeticConvertible\n val, \nComparable\n[A val] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(value: A val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun add()\n\n\nfun box\n add(y: A val): A val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: A val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: A val): A val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: A val): (A val , A val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: box-\nA val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): A val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: box-\nA val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: box-\nA val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: box-\nA val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: box-\nA val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: A val): A val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): A val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: A val): A val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): A val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: A val): A val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: A val): A val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: box-\nA val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): A val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: A val): A val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "trait Real"
        },
        {
            "location": "/builtin-Real/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Real/#new-create",
            "text": "new create(value: A val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Real/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Real/#fun-add",
            "text": "fun box\n add(y: A val): A val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-Real/#fun-compare",
            "text": "fun box\n compare(that: A val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-Real/#fun-div",
            "text": "fun box\n div(y: A val): A val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-Real/#fun-divmod",
            "text": "fun box\n divmod(y: A val): (A val , A val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-Real/#fun-eq",
            "text": "fun box\n eq(y: box- A val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-Real/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-Real/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-Real/#fun-from",
            "text": "fun tag\n from[B: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [B val] val)](a: B val): A val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-Real/#fun-ge",
            "text": "fun box\n ge(y: box- A val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-Real/#fun-gt",
            "text": "fun box\n gt(y: box- A val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-Real/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-Real/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-Real/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-Real/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-Real/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-Real/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-Real/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-Real/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-Real/#fun-le",
            "text": "fun box\n le(y: box- A val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-Real/#fun-lt",
            "text": "fun box\n lt(y: box- A val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-Real/#fun-max",
            "text": "fun box\n max(y: A val): A val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-Real/#fun-max_value",
            "text": "fun tag\n max_value(): A val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-Real/#fun-min",
            "text": "fun box\n min(y: A val): A val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-Real/#fun-min_value",
            "text": "fun tag\n min_value(): A val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-Real/#fun-mod",
            "text": "fun box\n mod(y: A val): A val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-Real/#fun-mul",
            "text": "fun box\n mul(y: A val): A val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-Real/#fun-ne",
            "text": "fun box\n ne(y: box- A val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-Real/#fun-neg",
            "text": "fun box\n neg(): A val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-Real/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [ FormatDefault  val,  PrefixDefault  val] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-Real/#fun-sub",
            "text": "fun box\n sub(y: A val): A val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-Real/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-Real/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-Real/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-Real/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-Real/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-Real/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-Real/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-Seq/",
            "text": "interface Seq[A: A]\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nA sequence of elements.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional len: \nUSize\n val)\n\n\nPublic.\n\n\nCreate a sequence, reserving space for len elements.\n\n\nFunctions\n\n\nfun append()\n\n\nfun ref\n append(seq: \nReadSeq\n[A] box, optional offset: \nUSize\n val, optional len: \nUSize\n val): \nSeq\n[A] ref^\n\n\nPublic.\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun apply()\n\n\nfun box\n apply(i: \nUSize\n val): this-\nA ?\n\n\nPublic, may raise an error.\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds.\n\n\nfun clear()\n\n\nfun ref\n clear(): \nSeq\n[A] ref^\n\n\nPublic.\n\n\nRemoves all elements from the sequence.\n\n\nfun pop()\n\n\nfun ref\n pop(): A^ ?\n\n\nPublic, may raise an error.\n\n\nRemoves an element from the end of the sequence.\n\n\nfun push()\n\n\nfun ref\n push(value: A): \nSeq\n[A] ref^\n\n\nPublic.\n\n\nAdds an element to the end of the sequence.\n\n\nfun reserve()\n\n\nfun ref\n reserve(len: \nUSize\n val): \nSeq\n[A] ref^\n\n\nPublic.\n\n\nReserve space for len elements.\n\n\nfun shift()\n\n\nfun ref\n shift(): A^ ?\n\n\nPublic, may raise an error.\n\n\nRemoves an element from the beginning of the sequence.\n\n\nfun size()\n\n\nfun box\n size(): \nUSize\n val\n\n\nPublic.\n\n\nReturns the number of elements in the sequence.\n\n\nfun truncate()\n\n\nfun ref\n truncate(len: \nUSize\n val): \nSeq\n[A] ref^\n\n\nPublic.\n\n\nTruncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.\n\n\nfun unshift()\n\n\nfun ref\n unshift(value: A): \nSeq\n[A] ref^\n\n\nPublic.\n\n\nAdds an element to the beginning of the sequence.\n\n\nfun update()\n\n\nfun ref\n update(i: \nUSize\n val, value: A): A^ ?\n\n\nPublic, may raise an error.\n\n\nReplaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.\n\n\nfun values()\n\n\nfun box\n values(): \nIterator\n[this-\nA] ref^\n\n\nPublic.\n\n\nReturns an iterator over the elements of the sequence.",
            "title": "interface Seq"
        },
        {
            "location": "/builtin-Seq/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Seq/#new-create",
            "text": "new create(optional len:  USize  val)  Public.  Create a sequence, reserving space for len elements.",
            "title": "new create()"
        },
        {
            "location": "/builtin-Seq/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Seq/#fun-append",
            "text": "fun ref\n append(seq:  ReadSeq [A] box, optional offset:  USize  val, optional len:  USize  val):  Seq [A] ref^  Public.  Append the elements from a sequence, starting from the given offset.",
            "title": "fun append()"
        },
        {
            "location": "/builtin-Seq/#fun-apply",
            "text": "fun box\n apply(i:  USize  val): this- A ?  Public, may raise an error.  Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin-Seq/#fun-clear",
            "text": "fun ref\n clear():  Seq [A] ref^  Public.  Removes all elements from the sequence.",
            "title": "fun clear()"
        },
        {
            "location": "/builtin-Seq/#fun-pop",
            "text": "fun ref\n pop(): A^ ?  Public, may raise an error.  Removes an element from the end of the sequence.",
            "title": "fun pop()"
        },
        {
            "location": "/builtin-Seq/#fun-push",
            "text": "fun ref\n push(value: A):  Seq [A] ref^  Public.  Adds an element to the end of the sequence.",
            "title": "fun push()"
        },
        {
            "location": "/builtin-Seq/#fun-reserve",
            "text": "fun ref\n reserve(len:  USize  val):  Seq [A] ref^  Public.  Reserve space for len elements.",
            "title": "fun reserve()"
        },
        {
            "location": "/builtin-Seq/#fun-shift",
            "text": "fun ref\n shift(): A^ ?  Public, may raise an error.  Removes an element from the beginning of the sequence.",
            "title": "fun shift()"
        },
        {
            "location": "/builtin-Seq/#fun-size",
            "text": "fun box\n size():  USize  val  Public.  Returns the number of elements in the sequence.",
            "title": "fun size()"
        },
        {
            "location": "/builtin-Seq/#fun-truncate",
            "text": "fun ref\n truncate(len:  USize  val):  Seq [A] ref^  Public.  Truncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.",
            "title": "fun truncate()"
        },
        {
            "location": "/builtin-Seq/#fun-unshift",
            "text": "fun ref\n unshift(value: A):  Seq [A] ref^  Public.  Adds an element to the beginning of the sequence.",
            "title": "fun unshift()"
        },
        {
            "location": "/builtin-Seq/#fun-update",
            "text": "fun ref\n update(i:  USize  val, value: A): A^ ?  Public, may raise an error.  Replaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.",
            "title": "fun update()"
        },
        {
            "location": "/builtin-Seq/#fun-values",
            "text": "fun box\n values():  Iterator [this- A] ref^  Public.  Returns an iterator over the elements of the sequence.",
            "title": "fun values()"
        },
        {
            "location": "/builtin-Signed/",
            "text": "type Signed is ((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val)\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type Signed"
        },
        {
            "location": "/builtin-_SignedInteger/",
            "text": "trait _SignedInteger[A: \n_SignedInteger\n[A val, C val] val, C: \n_UnsignedInteger\n[C val] val] is \nInteger\n[A val] val\n\n\nIn package \"builtin\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(value: A val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): C val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: A val): A val\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): A val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): A val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): A val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: A val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): A val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: A val): A val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: A val): (A val , A val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): A val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: A val): A val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): A val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: A val): A val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): A val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: A val): A val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: A val): A val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): A val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: A val): A val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): A val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: A val): A val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: A val): A val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): A val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: A val): A val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: A val): A val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: A val): A val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: A val): A val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: A val): A val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "trait _SignedInteger"
        },
        {
            "location": "/builtin-_SignedInteger/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-_SignedInteger/#new-create",
            "text": "new create(value: A val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-_SignedInteger/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-abs",
            "text": "fun box\n abs(): C val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-add",
            "text": "fun box\n add(y: A val): A val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-bitwidth",
            "text": "fun box\n bitwidth(): A val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-bswap",
            "text": "fun box\n bswap(): A val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-clz",
            "text": "fun box\n clz(): A val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-compare",
            "text": "fun box\n compare(that: A val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-ctz",
            "text": "fun box\n ctz(): A val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-div",
            "text": "fun box\n div(y: A val): A val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-divmod",
            "text": "fun box\n divmod(y: A val): (A val , A val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-eq",
            "text": "fun box\n eq(y: A val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-from",
            "text": "fun tag\n from[B: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [B val] val)](a: B val): A val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-ge",
            "text": "fun box\n ge(y: A val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-gt",
            "text": "fun box\n gt(y: A val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-le",
            "text": "fun box\n le(y: A val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-lt",
            "text": "fun box\n lt(y: A val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-max",
            "text": "fun box\n max(y: A val): A val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-max_value",
            "text": "fun tag\n max_value(): A val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-min",
            "text": "fun box\n min(y: A val): A val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-min_value",
            "text": "fun tag\n min_value(): A val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-mod",
            "text": "fun box\n mod(y: A val): A val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-mul",
            "text": "fun box\n mul(y: A val): A val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-ne",
            "text": "fun box\n ne(y: A val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-neg",
            "text": "fun box\n neg(): A val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-op_and",
            "text": "fun box\n op_and(y: A val): A val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-op_not",
            "text": "fun box\n op_not(): A val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-op_or",
            "text": "fun box\n op_or(y: A val): A val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-op_xor",
            "text": "fun box\n op_xor(y: A val): A val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-popcount",
            "text": "fun box\n popcount(): A val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-rotl",
            "text": "fun box\n rotl(y: A val): A val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-rotr",
            "text": "fun box\n rotr(y: A val): A val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-shl",
            "text": "fun box\n shl(y: A val): A val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-shr",
            "text": "fun box\n shr(y: A val): A val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-sub",
            "text": "fun box\n sub(y: A val): A val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-_SignedInteger/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-StdStream/",
            "text": "actor StdStream\n\n\nIn package \"builtin\".\n\n\nPublic, default capability tag.\n\n\nAsynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.\n\n\nConstructors\n\n\nnew _err()\n\n\nnew _err()\n\n\nPrivate.\n\n\nCreate an async stream for stderr.\n\n\nnew _out()\n\n\nnew _out()\n\n\nPrivate.\n\n\nCreate an async stream for stdout.\n\n\nBehaviours\n\n\nbe print()\n\n\nbe print(data: \nByteSeq\n val)\n\n\nPublic.\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe printv()\n\n\nbe printv(data: \nByteSeqIter\n val)\n\n\nPublic.\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe write()\n\n\nbe write(data: \nByteSeq\n val)\n\n\nPublic.\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe writev()\n\n\nbe writev(data: \nByteSeqIter\n val)\n\n\nPublic.\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nFunctions\n\n\nfun _write()\n\n\nfun ref\n _write(data: \nByteSeq\n val): \nNone\n val\n\n\nPrivate.\n\n\nWrite the bytes without explicitly flushing.",
            "title": "actor StdStream"
        },
        {
            "location": "/builtin-StdStream/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-StdStream/#new-_err",
            "text": "new _err()  Private.  Create an async stream for stderr.",
            "title": "new _err()"
        },
        {
            "location": "/builtin-StdStream/#new-_out",
            "text": "new _out()  Private.  Create an async stream for stdout.",
            "title": "new _out()"
        },
        {
            "location": "/builtin-StdStream/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/builtin-StdStream/#be-print",
            "text": "be print(data:  ByteSeq  val)  Public.  Print some bytes and insert a newline afterwards.",
            "title": "be print()"
        },
        {
            "location": "/builtin-StdStream/#be-printv",
            "text": "be printv(data:  ByteSeqIter  val)  Public.  Print an iterable collection of ByteSeqs.",
            "title": "be printv()"
        },
        {
            "location": "/builtin-StdStream/#be-write",
            "text": "be write(data:  ByteSeq  val)  Public.  Print some bytes without inserting a newline afterwards.",
            "title": "be write()"
        },
        {
            "location": "/builtin-StdStream/#be-writev",
            "text": "be writev(data:  ByteSeqIter  val)  Public.  Write an iterable collection of ByteSeqs.",
            "title": "be writev()"
        },
        {
            "location": "/builtin-StdStream/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-StdStream/#fun-_write",
            "text": "fun ref\n _write(data:  ByteSeq  val):  None  val  Private.  Write the bytes without explicitly flushing.",
            "title": "fun _write()"
        },
        {
            "location": "/builtin-Stdin/",
            "text": "actor Stdin\n\n\nIn package \"builtin\".\n\n\nPublic, default capability tag.\n\n\nAsynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.\n\n\nConstructors\n\n\nnew _create()\n\n\nnew _create(use_event: \nBool\n val)\n\n\nPrivate.\n\n\nBehaviours\n\n\nbe apply()\n\n\nbe apply(notify: (\nStdinNotify\n iso | \nNone\n val))\n\n\nPublic.\n\n\nSet the notifier.\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.\n\n\nClear the notifier in order to shut down input.\n\n\nbe _event_notify()\n\n\nbe _event_notify(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nPrivate.\n\n\nWhen the event fires, read from stdin.\n\n\nbe _loop_read()\n\n\nbe _loop_read()\n\n\nPrivate.\n\n\nIf we are able to read from stdin, schedule another read.\n\n\nbe _read_again()\n\n\nbe _read_again()\n\n\nPrivate.\n\n\nResume reading.\n\n\nFunctions\n\n\nfun _close_event()\n\n\nfun ref\n _close_event(): \nNone\n val\n\n\nPrivate.\n\n\nClose the event.\n\n\nfun _read()\n\n\nfun ref\n _read(): \nBool\n val\n\n\nPrivate.\n\n\nRead a chunk of data from stdin. If we read 4 kb of data, send ourself a\nresume message and stop reading, to avoid starving other actors.\n\n\nfun _set_notify()\n\n\nfun ref\n _set_notify(notify: (\nStdinNotify\n iso | \nNone\n val)): \nNone\n val\n\n\nPrivate.\n\n\nSet the notifier.",
            "title": "actor Stdin"
        },
        {
            "location": "/builtin-Stdin/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-Stdin/#new-_create",
            "text": "new _create(use_event:  Bool  val)  Private.",
            "title": "new _create()"
        },
        {
            "location": "/builtin-Stdin/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/builtin-Stdin/#be-apply",
            "text": "be apply(notify: ( StdinNotify  iso |  None  val))  Public.  Set the notifier.",
            "title": "be apply()"
        },
        {
            "location": "/builtin-Stdin/#be-dispose",
            "text": "be dispose()  Public.  Clear the notifier in order to shut down input.",
            "title": "be dispose()"
        },
        {
            "location": "/builtin-Stdin/#be-_event_notify",
            "text": "be _event_notify(event:  Pointer [ AsioEvent  val] tag, flags:  U32  val, arg:  U32  val)  Private.  When the event fires, read from stdin.",
            "title": "be _event_notify()"
        },
        {
            "location": "/builtin-Stdin/#be-_loop_read",
            "text": "be _loop_read()  Private.  If we are able to read from stdin, schedule another read.",
            "title": "be _loop_read()"
        },
        {
            "location": "/builtin-Stdin/#be-_read_again",
            "text": "be _read_again()  Private.  Resume reading.",
            "title": "be _read_again()"
        },
        {
            "location": "/builtin-Stdin/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Stdin/#fun-_close_event",
            "text": "fun ref\n _close_event():  None  val  Private.  Close the event.",
            "title": "fun _close_event()"
        },
        {
            "location": "/builtin-Stdin/#fun-_read",
            "text": "fun ref\n _read():  Bool  val  Private.  Read a chunk of data from stdin. If we read 4 kb of data, send ourself a\nresume message and stop reading, to avoid starving other actors.",
            "title": "fun _read()"
        },
        {
            "location": "/builtin-Stdin/#fun-_set_notify",
            "text": "fun ref\n _set_notify(notify: ( StdinNotify  iso |  None  val)):  None  val  Private.  Set the notifier.",
            "title": "fun _set_notify()"
        },
        {
            "location": "/builtin-StdinNotify/",
            "text": "interface StdinNotify\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nNotification for data arriving via stdin.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(data: \nArray\n[\nU8\n val] iso): \nNone\n val\n\n\nPublic.\n\n\nCalled when data is available on stdin.\n\n\nfun dispose()\n\n\nfun ref\n dispose(): \nNone\n val\n\n\nPublic.\n\n\nCalled when no more data will arrive on stdin.",
            "title": "interface StdinNotify"
        },
        {
            "location": "/builtin-StdinNotify/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-StdinNotify/#fun-apply",
            "text": "fun ref\n apply(data:  Array [ U8  val] iso):  None  val  Public.  Called when data is available on stdin.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin-StdinNotify/#fun-dispose",
            "text": "fun ref\n dispose():  None  val  Public.  Called when no more data will arrive on stdin.",
            "title": "fun dispose()"
        },
        {
            "location": "/builtin-String/",
            "text": "class String is \nSeq\n[\nU8\n val] ref, \nComparable\n[\nString\n box] ref, \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nStrings don't specify an encoding.\n\n\nConstructors\n\n\nnew copy_cstring()\n\n\nnew copy_cstring(str: \nPointer\n[\nU8\n val] box, optional len: \nUSize\n val)\n\n\nPublic.\n\n\nIf the cstring is not null terminated and a length isn't specified, this\ncan crash. This will only occur if the C-FFI has been used to craft such\na pointer.\n\n\nnew create()\n\n\nnew create(optional len: \nUSize\n val)\n\n\nPublic.\n\n\nAn empty string. Enough space for len bytes is reserved.\n\n\nnew from_cstring()\n\n\nnew from_cstring(str: \nPointer\n[\nU8\n val] ref, optional len: \nUSize\n val)\n\n\nPublic.\n\n\nThe cstring is not copied. This must be done only with C-FFI functions that\nreturn null-terminated pony_alloc'd character arrays.\n\n\nnew from_utf32()\n\n\nnew from_utf32(value: \nU32\n val)\n\n\nPublic.\n\n\nCreate a UTF-8 string from a single UTF-32 code point.\n\n\nFunctions\n\n\nfun add()\n\n\nfun box\n add(that: \nString\n box): \nString\n val\n\n\nPublic.\n\n\nReturn a string that is a concatenation of this and that.\n\n\nfun append()\n\n\nfun ref\n append(seq: (\nReadSeq\n[\nU8\n val] box | \nByteSeq\n box), optional offset: \nUSize\n val, optional len: \nUSize\n val): \nString\n ref^\n\n\nPublic.\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun _append()\n\n\nfun iso\n _append(s: \nString\n box): \nString\n iso^\n\n\nPrivate.\n\n\nfun apply()\n\n\nfun box\n apply(i: \nUSize\n val): \nU8\n val ?\n\n\nPublic, may raise an error.\n\n\nReturns the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun at()\n\n\nfun box\n at(s: \nString\n box, optional offset: \nISize\n val): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the substring s is present at the given offset.\n\n\nfun at_offset()\n\n\nfun box\n at_offset(offset: \nISize\n val): \nU8\n val ?\n\n\nPublic, may raise an error.\n\n\nReturns the byte at the given offset. Raise an error if the offset is out\nof bounds.\n\n\nfun bool()\n\n\nfun box\n bool(): \nBool\n val ?\n\n\nPublic, may raise an error.\n\n\nfun clear()\n\n\nfun ref\n clear(): \nString\n ref^\n\n\nPublic.\n\n\nTruncate the string to zero length.\n\n\nfun clone()\n\n\nfun box\n clone(): \nString\n iso^\n\n\nPublic.\n\n\nReturns a copy of the string.\n\n\nfun codepoints()\n\n\nfun box\n codepoints(optional from: \nISize\n val, optional to: \nISize\n val): \nUSize\n val\n\n\nPublic.\n\n\nReturns the number of unicode code points in the string between the two\noffsets. Index range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nString\n box): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nLexically compare two strings.\n\n\nfun compare_sub()\n\n\nfun box\n compare_sub(that: \nString\n box, n: \nUSize\n val, optional offset: \nISize\n val, optional that_offset: \nISize\n val, optional ignore_case: \nBool\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nStarting at this + offset, compare n bytes with that + offset.\n\n\nfun count()\n\n\nfun box\n count(s: \nString\n box, optional offset: \nISize\n val): \nUSize\n val\n\n\nPublic.\n\n\nCounts the non-overlapping occurrences of s in the string.\n\n\nfun cstring()\n\n\nfun box\n cstring(): \nPointer\n[\nU8\n val] tag\n\n\nPublic.\n\n\nReturns a C compatible pointer to a null terminated string.\n\n\nfun _cstring()\n\n\nfun box\n _cstring(): \nPointer\n[\nU8\n val] box\n\n\nPrivate.\n\n\nReturns a C compatible pointer to a null terminated string.\n\n\nfun cut()\n\n\nfun box\n cut(from: \nISize\n val, optional to: \nISize\n val): \nString\n iso^\n\n\nPublic.\n\n\nReturns a version of the string with the given range deleted.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun cut_in_place()\n\n\nfun ref\n cut_in_place(from: \nISize\n val, optional to: \nISize\n val): \nString\n ref^\n\n\nPublic.\n\n\nCuts the given range out of the string.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun delete()\n\n\nfun ref\n delete(offset: \nISize\n val, optional len: \nUSize\n val): \nString\n ref^\n\n\nPublic.\n\n\nDelete len bytes at the supplied offset, compacting the string in place.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nString\n box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the two strings have the same contents.\n\n\nfun f32()\n\n\nfun box\n f32(optional offset: \nISize\n val): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(optional offset: \nISize\n val): \nF64\n val\n\n\nPublic.\n\n\nfun find()\n\n\nfun box\n find(s: \nString\n box, optional offset: \nISize\n val, optional nth: \nUSize\n val): \nISize\n val ?\n\n\nPublic, may raise an error.\n\n\nReturn the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurence of s or s is empty.\n\n\nfun ge()\n\n\nfun box\n ge(that: \nString\n box): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(that: \nString\n box): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(optional base: \nU8\n val): \nI128\n val ?\n\n\nPublic, may raise an error.\n\n\nfun i16()\n\n\nfun box\n i16(optional base: \nU8\n val): \nI16\n val ?\n\n\nPublic, may raise an error.\n\n\nfun i32()\n\n\nfun box\n i32(optional base: \nU8\n val): \nI32\n val ?\n\n\nPublic, may raise an error.\n\n\nfun i64()\n\n\nfun box\n i64(optional base: \nU8\n val): \nI64\n val ?\n\n\nPublic, may raise an error.\n\n\nfun i8()\n\n\nfun box\n i8(optional base: \nU8\n val): \nI8\n val ?\n\n\nPublic, may raise an error.\n\n\nfun ilong()\n\n\nfun box\n ilong(optional base: \nU8\n val): \nILong\n val ?\n\n\nPublic, may raise an error.\n\n\nfun insert()\n\n\nfun box\n insert(offset: \nISize\n val, that: \nString\n val): \nString\n iso^\n\n\nPublic.\n\n\nReturns a version of the string with the given string inserted at the given\noffset.\n\n\nfun insert_byte()\n\n\nfun ref\n insert_byte(offset: \nISize\n val, value: \nU8\n val): \nString\n ref^\n\n\nPublic.\n\n\nInserts a byte at the given offset. Appends if the offset is out of bounds.\n\n\nfun insert_in_place()\n\n\nfun ref\n insert_in_place(offset: \nISize\n val, that: \nString\n box): \nString\n ref^\n\n\nPublic.\n\n\nInserts the given string at the given offset. Appends the string if the\noffset is out of bounds.\n\n\nfun isize()\n\n\nfun box\n isize(optional base: \nU8\n val): \nISize\n val ?\n\n\nPublic, may raise an error.\n\n\nfun join()\n\n\nfun box\n join(data: \nReadSeq\n[\nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box] box): \nString\n iso^\n\n\nPublic.\n\n\nReturn a string that is a concatenation of the strings in data, using this\nas a separator.\n\n\nfun le()\n\n\nfun box\n le(that: \nString\n box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.\n\n\nfun lower()\n\n\nfun box\n lower(): \nString\n iso^\n\n\nPublic.\n\n\nReturns a lower case version of the string.\n\n\nfun lower_in_place()\n\n\nfun ref\n lower_in_place(): \nString\n ref^\n\n\nPublic.\n\n\nTransforms the string to lower case. Currently only knows ASCII case.\n\n\nfun lstrip()\n\n\nfun ref\n lstrip(optional s: \nString\n box): \nString\n ref^\n\n\nPublic.\n\n\nRemove all leading characters within the string that are in s. By default,\nleading whitespace is removed.\n\n\nfun lt()\n\n\nfun box\n lt(that: \nString\n box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if this is lexically less than that. Needs to be made UTF-8\nsafe.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nString\n box): \nBool\n val\n\n\nPublic.\n\n\nfun offset_to_index()\n\n\nfun box\n offset_to_index(i: \nISize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun pop()\n\n\nfun ref\n pop(): \nU8\n val ?\n\n\nPublic, may raise an error.\n\n\nRemove a byte from the end of the string.\n\n\nfun push()\n\n\nfun ref\n push(value: \nU8\n val): \nString\n ref^\n\n\nPublic.\n\n\nAdd a byte to the end of the string.\n\n\nfun read_int()\n\n\nfun box\n read_int[A: ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) \n \nInteger\n[A val] val)](optional offset: \nISize\n val, optional base: \nU8\n val): (A val , \nUSize\n val) ?\n\n\nPublic, may raise an error.\n\n\nRead an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.\n\n\nfun _read_int_base()\n\n\nfun box\n _read_int_base[A: ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) \n \nInteger\n[A val] val)](base: \nU8\n val, index: \nUSize\n val): (A val , \nUSize\n val)\n\n\nPrivate.\n\n\nDetermine the base of an integer starting at the specified index.\nIf a non-0 base is given use that. If given base is 0 read the base\nspecifying prefix, if any, to detect base 2 or 16.\nIf no base is specified and no prefix is found default to decimal.\nNote that a leading 0 does NOT imply octal.\nReport the base found and the number of characters in the prefix.\n\n\nfun recalc()\n\n\nfun ref\n recalc(): \nString\n ref^\n\n\nPublic.\n\n\nRecalculates the string length. This is only needed if the string is\nchanged via an FFI call. If the string is not null terminated at the\nallocated length, a null is added.\n\n\nfun remove()\n\n\nfun ref\n remove(s: \nString\n box): \nUSize\n val\n\n\nPublic.\n\n\nRemove all instances of s from the string. Returns the count of removed\ninstances.\n\n\nfun replace()\n\n\nfun ref\n replace(from: \nString\n box, to: \nString\n box, optional n: \nUSize\n val): \nString\n ref^\n\n\nPublic.\n\n\nReplace up to n occurrences of \nfrom\n in \nthis\n with \nto\n. If n is 0, all\noccurrences will be replaced.\n\n\nfun reserve()\n\n\nfun ref\n reserve(len: \nUSize\n val): \nString\n ref^\n\n\nPublic.\n\n\nReserve space for len bytes. An additional byte will be reserved for the\nnull terminator.\n\n\nfun reverse()\n\n\nfun box\n reverse(): \nString\n iso^\n\n\nPublic.\n\n\nReturns a reversed version of the string.\n\n\nfun reverse_in_place()\n\n\nfun ref\n reverse_in_place(): \nString\n ref^\n\n\nPublic.\n\n\nReverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.\n\n\nfun rfind()\n\n\nfun box\n rfind(s: \nString\n box, optional offset: \nISize\n val, optional nth: \nUSize\n val): \nISize\n val ?\n\n\nPublic, may raise an error.\n\n\nReturn the index of n-th instance of s in the string starting from the end.\nRaise an error if there is no n-th occurence of s or s is empty.\n\n\nfun rstrip()\n\n\nfun ref\n rstrip(optional s: \nString\n box): \nString\n ref^\n\n\nPublic.\n\n\nRemove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.\n\n\nfun runes()\n\n\nfun box\n runes(): \nStringRunes\n ref^\n\n\nPublic.\n\n\nReturn an iterator over the codepoints in the string.\n\n\nfun _set()\n\n\nfun ref\n _set(i: \nUSize\n val, value: \nU8\n val): \nU8\n val\n\n\nPrivate.\n\n\nUnsafe update, used internally.\n\n\nfun shift()\n\n\nfun ref\n shift(): \nU8\n val ?\n\n\nPublic, may raise an error.\n\n\nRemoves a byte from the beginning of the string.\n\n\nfun size()\n\n\nfun box\n size(): \nUSize\n val\n\n\nPublic.\n\n\nReturns the length of the string data in bytes.\n\n\nfun space()\n\n\nfun box\n space(): \nUSize\n val\n\n\nPublic.\n\n\nReturns the space available for data, not including the null terminator.\n\n\nfun split()\n\n\nfun box\n split(optional delim: \nString\n val, optional n: \nUSize\n val): \nArray\n[\nString\n val] iso^\n\n\nPublic.\n\n\nSplit the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If \nn \n 0\n, then the split count is\nlimited to n.\n\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, \n\"1,,2\".split(\",\") =\n [\"1\", \"\", \"2\"]\n.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nString\n iso^\n\n\nPublic.\n\n\nfun strip()\n\n\nfun ref\n strip(optional s: \nString\n box): \nString\n ref^\n\n\nPublic.\n\n\nRemove all leading and trailing characters from the string that are in s.\n\n\nfun substring()\n\n\nfun box\n substring(from: \nISize\n val, optional to: \nISize\n val): \nString\n iso^\n\n\nPublic.\n\n\nReturns a substring. Index range [\nfrom\n .. \nto\n) is half-open.\nReturns an empty string if nothing is in the range.\n\n\nfun _to_int()\n\n\nfun box\n _to_int[A: ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) \n \nInteger\n[A val] val)](base: \nU8\n val): A val ?\n\n\nPrivate, may raise an error.\n\n\nConvert the \nwhole\n string to the specified type.\nIf there are any other characters in the string, or the integer found is\nout of range for the target type then an error is thrown.\n\n\nfun truncate()\n\n\nfun ref\n truncate(len: \nUSize\n val): \nString\n ref^\n\n\nPublic.\n\n\nTruncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.\n\n\nfun u128()\n\n\nfun box\n u128(optional base: \nU8\n val): \nU128\n val ?\n\n\nPublic, may raise an error.\n\n\nfun u16()\n\n\nfun box\n u16(optional base: \nU8\n val): \nU16\n val ?\n\n\nPublic, may raise an error.\n\n\nfun u32()\n\n\nfun box\n u32(optional base: \nU8\n val): \nU32\n val ?\n\n\nPublic, may raise an error.\n\n\nfun u64()\n\n\nfun box\n u64(optional base: \nU8\n val): \nU64\n val ?\n\n\nPublic, may raise an error.\n\n\nfun u8()\n\n\nfun box\n u8(optional base: \nU8\n val): \nU8\n val ?\n\n\nPublic, may raise an error.\n\n\nfun ulong()\n\n\nfun box\n ulong(optional base: \nU8\n val): \nULong\n val ?\n\n\nPublic, may raise an error.\n\n\nfun unshift()\n\n\nfun ref\n unshift(value: \nU8\n val): \nString\n ref^\n\n\nPublic.\n\n\nAdds a byte to the beginning of the string.\n\n\nfun update()\n\n\nfun ref\n update(i: \nUSize\n val, value: \nU8\n val): \nU8\n val ?\n\n\nPublic, may raise an error.\n\n\nChange the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun update_offset()\n\n\nfun ref\n update_offset(offset: \nISize\n val, value: \nU8\n val): \nU8\n val ?\n\n\nPublic, may raise an error.\n\n\nChanges a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.\n\n\nfun upper()\n\n\nfun box\n upper(): \nString\n iso^\n\n\nPublic.\n\n\nReturns an upper case version of the string. Currently only knows ASCII\ncase.\n\n\nfun upper_in_place()\n\n\nfun ref\n upper_in_place(): \nString\n ref^\n\n\nPublic.\n\n\nTransforms the string to upper case.\n\n\nfun usize()\n\n\nfun box\n usize(optional base: \nU8\n val): \nUSize\n val ?\n\n\nPublic, may raise an error.\n\n\nfun utf32()\n\n\nfun box\n utf32(offset: \nISize\n val): (\nU32\n val , \nU8\n val) ?\n\n\nPublic, may raise an error.\n\n\nReturn a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.\n\n\nfun values()\n\n\nfun box\n values(): \nStringBytes\n ref^\n\n\nPublic.\n\n\nReturn an iterator over the bytes in the string.",
            "title": "class String"
        },
        {
            "location": "/builtin-String/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-String/#new-copy_cstring",
            "text": "new copy_cstring(str:  Pointer [ U8  val] box, optional len:  USize  val)  Public.  If the cstring is not null terminated and a length isn't specified, this\ncan crash. This will only occur if the C-FFI has been used to craft such\na pointer.",
            "title": "new copy_cstring()"
        },
        {
            "location": "/builtin-String/#new-create",
            "text": "new create(optional len:  USize  val)  Public.  An empty string. Enough space for len bytes is reserved.",
            "title": "new create()"
        },
        {
            "location": "/builtin-String/#new-from_cstring",
            "text": "new from_cstring(str:  Pointer [ U8  val] ref, optional len:  USize  val)  Public.  The cstring is not copied. This must be done only with C-FFI functions that\nreturn null-terminated pony_alloc'd character arrays.",
            "title": "new from_cstring()"
        },
        {
            "location": "/builtin-String/#new-from_utf32",
            "text": "new from_utf32(value:  U32  val)  Public.  Create a UTF-8 string from a single UTF-32 code point.",
            "title": "new from_utf32()"
        },
        {
            "location": "/builtin-String/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-String/#fun-add",
            "text": "fun box\n add(that:  String  box):  String  val  Public.  Return a string that is a concatenation of this and that.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-String/#fun-append",
            "text": "fun ref\n append(seq: ( ReadSeq [ U8  val] box |  ByteSeq  box), optional offset:  USize  val, optional len:  USize  val):  String  ref^  Public.  Append the elements from a sequence, starting from the given offset.",
            "title": "fun append()"
        },
        {
            "location": "/builtin-String/#fun-_append",
            "text": "fun iso\n _append(s:  String  box):  String  iso^  Private.",
            "title": "fun _append()"
        },
        {
            "location": "/builtin-String/#fun-apply",
            "text": "fun box\n apply(i:  USize  val):  U8  val ?  Public, may raise an error.  Returns the i-th byte. Raise an error if the index is out of bounds.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin-String/#fun-at",
            "text": "fun box\n at(s:  String  box, optional offset:  ISize  val):  Bool  val  Public.  Returns true if the substring s is present at the given offset.",
            "title": "fun at()"
        },
        {
            "location": "/builtin-String/#fun-at_offset",
            "text": "fun box\n at_offset(offset:  ISize  val):  U8  val ?  Public, may raise an error.  Returns the byte at the given offset. Raise an error if the offset is out\nof bounds.",
            "title": "fun at_offset()"
        },
        {
            "location": "/builtin-String/#fun-bool",
            "text": "fun box\n bool():  Bool  val ?  Public, may raise an error.",
            "title": "fun bool()"
        },
        {
            "location": "/builtin-String/#fun-clear",
            "text": "fun ref\n clear():  String  ref^  Public.  Truncate the string to zero length.",
            "title": "fun clear()"
        },
        {
            "location": "/builtin-String/#fun-clone",
            "text": "fun box\n clone():  String  iso^  Public.  Returns a copy of the string.",
            "title": "fun clone()"
        },
        {
            "location": "/builtin-String/#fun-codepoints",
            "text": "fun box\n codepoints(optional from:  ISize  val, optional to:  ISize  val):  USize  val  Public.  Returns the number of unicode code points in the string between the two\noffsets. Index range [ from  ..  to ) is half-open.",
            "title": "fun codepoints()"
        },
        {
            "location": "/builtin-String/#fun-compare",
            "text": "fun box\n compare(that:  String  box): (( Less  val |  Equal  val) |  Greater  val)  Public.  Lexically compare two strings.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-String/#fun-compare_sub",
            "text": "fun box\n compare_sub(that:  String  box, n:  USize  val, optional offset:  ISize  val, optional that_offset:  ISize  val, optional ignore_case:  Bool  val): (( Less  val |  Equal  val) |  Greater  val)  Public.  Starting at this + offset, compare n bytes with that + offset.",
            "title": "fun compare_sub()"
        },
        {
            "location": "/builtin-String/#fun-count",
            "text": "fun box\n count(s:  String  box, optional offset:  ISize  val):  USize  val  Public.  Counts the non-overlapping occurrences of s in the string.",
            "title": "fun count()"
        },
        {
            "location": "/builtin-String/#fun-cstring",
            "text": "fun box\n cstring():  Pointer [ U8  val] tag  Public.  Returns a C compatible pointer to a null terminated string.",
            "title": "fun cstring()"
        },
        {
            "location": "/builtin-String/#fun-_cstring",
            "text": "fun box\n _cstring():  Pointer [ U8  val] box  Private.  Returns a C compatible pointer to a null terminated string.",
            "title": "fun _cstring()"
        },
        {
            "location": "/builtin-String/#fun-cut",
            "text": "fun box\n cut(from:  ISize  val, optional to:  ISize  val):  String  iso^  Public.  Returns a version of the string with the given range deleted.\nIndex range [ from  ..  to ) is half-open.",
            "title": "fun cut()"
        },
        {
            "location": "/builtin-String/#fun-cut_in_place",
            "text": "fun ref\n cut_in_place(from:  ISize  val, optional to:  ISize  val):  String  ref^  Public.  Cuts the given range out of the string.\nIndex range [ from  ..  to ) is half-open.",
            "title": "fun cut_in_place()"
        },
        {
            "location": "/builtin-String/#fun-delete",
            "text": "fun ref\n delete(offset:  ISize  val, optional len:  USize  val):  String  ref^  Public.  Delete len bytes at the supplied offset, compacting the string in place.",
            "title": "fun delete()"
        },
        {
            "location": "/builtin-String/#fun-eq",
            "text": "fun box\n eq(that:  String  box):  Bool  val  Public.  Returns true if the two strings have the same contents.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-String/#fun-f32",
            "text": "fun box\n f32(optional offset:  ISize  val):  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-String/#fun-f64",
            "text": "fun box\n f64(optional offset:  ISize  val):  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-String/#fun-find",
            "text": "fun box\n find(s:  String  box, optional offset:  ISize  val, optional nth:  USize  val):  ISize  val ?  Public, may raise an error.  Return the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurence of s or s is empty.",
            "title": "fun find()"
        },
        {
            "location": "/builtin-String/#fun-ge",
            "text": "fun box\n ge(that:  String  box):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-String/#fun-gt",
            "text": "fun box\n gt(that:  String  box):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-String/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-String/#fun-i128",
            "text": "fun box\n i128(optional base:  U8  val):  I128  val ?  Public, may raise an error.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-String/#fun-i16",
            "text": "fun box\n i16(optional base:  U8  val):  I16  val ?  Public, may raise an error.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-String/#fun-i32",
            "text": "fun box\n i32(optional base:  U8  val):  I32  val ?  Public, may raise an error.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-String/#fun-i64",
            "text": "fun box\n i64(optional base:  U8  val):  I64  val ?  Public, may raise an error.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-String/#fun-i8",
            "text": "fun box\n i8(optional base:  U8  val):  I8  val ?  Public, may raise an error.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-String/#fun-ilong",
            "text": "fun box\n ilong(optional base:  U8  val):  ILong  val ?  Public, may raise an error.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-String/#fun-insert",
            "text": "fun box\n insert(offset:  ISize  val, that:  String  val):  String  iso^  Public.  Returns a version of the string with the given string inserted at the given\noffset.",
            "title": "fun insert()"
        },
        {
            "location": "/builtin-String/#fun-insert_byte",
            "text": "fun ref\n insert_byte(offset:  ISize  val, value:  U8  val):  String  ref^  Public.  Inserts a byte at the given offset. Appends if the offset is out of bounds.",
            "title": "fun insert_byte()"
        },
        {
            "location": "/builtin-String/#fun-insert_in_place",
            "text": "fun ref\n insert_in_place(offset:  ISize  val, that:  String  box):  String  ref^  Public.  Inserts the given string at the given offset. Appends the string if the\noffset is out of bounds.",
            "title": "fun insert_in_place()"
        },
        {
            "location": "/builtin-String/#fun-isize",
            "text": "fun box\n isize(optional base:  U8  val):  ISize  val ?  Public, may raise an error.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-String/#fun-join",
            "text": "fun box\n join(data:  ReadSeq [ Stringable [ FormatDefault  val,  PrefixDefault  val] box] box):  String  iso^  Public.  Return a string that is a concatenation of the strings in data, using this\nas a separator.",
            "title": "fun join()"
        },
        {
            "location": "/builtin-String/#fun-le",
            "text": "fun box\n le(that:  String  box):  Bool  val  Public.  Returns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-String/#fun-lower",
            "text": "fun box\n lower():  String  iso^  Public.  Returns a lower case version of the string.",
            "title": "fun lower()"
        },
        {
            "location": "/builtin-String/#fun-lower_in_place",
            "text": "fun ref\n lower_in_place():  String  ref^  Public.  Transforms the string to lower case. Currently only knows ASCII case.",
            "title": "fun lower_in_place()"
        },
        {
            "location": "/builtin-String/#fun-lstrip",
            "text": "fun ref\n lstrip(optional s:  String  box):  String  ref^  Public.  Remove all leading characters within the string that are in s. By default,\nleading whitespace is removed.",
            "title": "fun lstrip()"
        },
        {
            "location": "/builtin-String/#fun-lt",
            "text": "fun box\n lt(that:  String  box):  Bool  val  Public.  Returns true if this is lexically less than that. Needs to be made UTF-8\nsafe.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-String/#fun-ne",
            "text": "fun box\n ne(that:  String  box):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-String/#fun-offset_to_index",
            "text": "fun box\n offset_to_index(i:  ISize  val):  USize  val  Public.",
            "title": "fun offset_to_index()"
        },
        {
            "location": "/builtin-String/#fun-pop",
            "text": "fun ref\n pop():  U8  val ?  Public, may raise an error.  Remove a byte from the end of the string.",
            "title": "fun pop()"
        },
        {
            "location": "/builtin-String/#fun-push",
            "text": "fun ref\n push(value:  U8  val):  String  ref^  Public.  Add a byte to the end of the string.",
            "title": "fun push()"
        },
        {
            "location": "/builtin-String/#fun-read_int",
            "text": "fun box\n read_int[A: (((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val))    Integer [A val] val)](optional offset:  ISize  val, optional base:  U8  val): (A val ,  USize  val) ?  Public, may raise an error.  Read an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.",
            "title": "fun read_int()"
        },
        {
            "location": "/builtin-String/#fun-_read_int_base",
            "text": "fun box\n _read_int_base[A: (((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val))    Integer [A val] val)](base:  U8  val, index:  USize  val): (A val ,  USize  val)  Private.  Determine the base of an integer starting at the specified index.\nIf a non-0 base is given use that. If given base is 0 read the base\nspecifying prefix, if any, to detect base 2 or 16.\nIf no base is specified and no prefix is found default to decimal.\nNote that a leading 0 does NOT imply octal.\nReport the base found and the number of characters in the prefix.",
            "title": "fun _read_int_base()"
        },
        {
            "location": "/builtin-String/#fun-recalc",
            "text": "fun ref\n recalc():  String  ref^  Public.  Recalculates the string length. This is only needed if the string is\nchanged via an FFI call. If the string is not null terminated at the\nallocated length, a null is added.",
            "title": "fun recalc()"
        },
        {
            "location": "/builtin-String/#fun-remove",
            "text": "fun ref\n remove(s:  String  box):  USize  val  Public.  Remove all instances of s from the string. Returns the count of removed\ninstances.",
            "title": "fun remove()"
        },
        {
            "location": "/builtin-String/#fun-replace",
            "text": "fun ref\n replace(from:  String  box, to:  String  box, optional n:  USize  val):  String  ref^  Public.  Replace up to n occurrences of  from  in  this  with  to . If n is 0, all\noccurrences will be replaced.",
            "title": "fun replace()"
        },
        {
            "location": "/builtin-String/#fun-reserve",
            "text": "fun ref\n reserve(len:  USize  val):  String  ref^  Public.  Reserve space for len bytes. An additional byte will be reserved for the\nnull terminator.",
            "title": "fun reserve()"
        },
        {
            "location": "/builtin-String/#fun-reverse",
            "text": "fun box\n reverse():  String  iso^  Public.  Returns a reversed version of the string.",
            "title": "fun reverse()"
        },
        {
            "location": "/builtin-String/#fun-reverse_in_place",
            "text": "fun ref\n reverse_in_place():  String  ref^  Public.  Reverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.",
            "title": "fun reverse_in_place()"
        },
        {
            "location": "/builtin-String/#fun-rfind",
            "text": "fun box\n rfind(s:  String  box, optional offset:  ISize  val, optional nth:  USize  val):  ISize  val ?  Public, may raise an error.  Return the index of n-th instance of s in the string starting from the end.\nRaise an error if there is no n-th occurence of s or s is empty.",
            "title": "fun rfind()"
        },
        {
            "location": "/builtin-String/#fun-rstrip",
            "text": "fun ref\n rstrip(optional s:  String  box):  String  ref^  Public.  Remove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.",
            "title": "fun rstrip()"
        },
        {
            "location": "/builtin-String/#fun-runes",
            "text": "fun box\n runes():  StringRunes  ref^  Public.  Return an iterator over the codepoints in the string.",
            "title": "fun runes()"
        },
        {
            "location": "/builtin-String/#fun-_set",
            "text": "fun ref\n _set(i:  USize  val, value:  U8  val):  U8  val  Private.  Unsafe update, used internally.",
            "title": "fun _set()"
        },
        {
            "location": "/builtin-String/#fun-shift",
            "text": "fun ref\n shift():  U8  val ?  Public, may raise an error.  Removes a byte from the beginning of the string.",
            "title": "fun shift()"
        },
        {
            "location": "/builtin-String/#fun-size",
            "text": "fun box\n size():  USize  val  Public.  Returns the length of the string data in bytes.",
            "title": "fun size()"
        },
        {
            "location": "/builtin-String/#fun-space",
            "text": "fun box\n space():  USize  val  Public.  Returns the space available for data, not including the null terminator.",
            "title": "fun space()"
        },
        {
            "location": "/builtin-String/#fun-split",
            "text": "fun box\n split(optional delim:  String  val, optional n:  USize  val):  Array [ String  val] iso^  Public.  Split the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If  n   0 , then the split count is\nlimited to n.  Adjacent delimiters result in a zero length entry in the array. For\nexample,  \"1,,2\".split(\",\") =  [\"1\", \"\", \"2\"] .",
            "title": "fun split()"
        },
        {
            "location": "/builtin-String/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [ FormatDefault  val,  PrefixDefault  val] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-String/#fun-strip",
            "text": "fun ref\n strip(optional s:  String  box):  String  ref^  Public.  Remove all leading and trailing characters from the string that are in s.",
            "title": "fun strip()"
        },
        {
            "location": "/builtin-String/#fun-substring",
            "text": "fun box\n substring(from:  ISize  val, optional to:  ISize  val):  String  iso^  Public.  Returns a substring. Index range [ from  ..  to ) is half-open.\nReturns an empty string if nothing is in the range.",
            "title": "fun substring()"
        },
        {
            "location": "/builtin-String/#fun-_to_int",
            "text": "fun box\n _to_int[A: (((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val))    Integer [A val] val)](base:  U8  val): A val ?  Private, may raise an error.  Convert the  whole  string to the specified type.\nIf there are any other characters in the string, or the integer found is\nout of range for the target type then an error is thrown.",
            "title": "fun _to_int()"
        },
        {
            "location": "/builtin-String/#fun-truncate",
            "text": "fun ref\n truncate(len:  USize  val):  String  ref^  Public.  Truncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.",
            "title": "fun truncate()"
        },
        {
            "location": "/builtin-String/#fun-u128",
            "text": "fun box\n u128(optional base:  U8  val):  U128  val ?  Public, may raise an error.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-String/#fun-u16",
            "text": "fun box\n u16(optional base:  U8  val):  U16  val ?  Public, may raise an error.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-String/#fun-u32",
            "text": "fun box\n u32(optional base:  U8  val):  U32  val ?  Public, may raise an error.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-String/#fun-u64",
            "text": "fun box\n u64(optional base:  U8  val):  U64  val ?  Public, may raise an error.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-String/#fun-u8",
            "text": "fun box\n u8(optional base:  U8  val):  U8  val ?  Public, may raise an error.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-String/#fun-ulong",
            "text": "fun box\n ulong(optional base:  U8  val):  ULong  val ?  Public, may raise an error.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-String/#fun-unshift",
            "text": "fun ref\n unshift(value:  U8  val):  String  ref^  Public.  Adds a byte to the beginning of the string.",
            "title": "fun unshift()"
        },
        {
            "location": "/builtin-String/#fun-update",
            "text": "fun ref\n update(i:  USize  val, value:  U8  val):  U8  val ?  Public, may raise an error.  Change the i-th byte. Raise an error if the index is out of bounds.",
            "title": "fun update()"
        },
        {
            "location": "/builtin-String/#fun-update_offset",
            "text": "fun ref\n update_offset(offset:  ISize  val, value:  U8  val):  U8  val ?  Public, may raise an error.  Changes a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.",
            "title": "fun update_offset()"
        },
        {
            "location": "/builtin-String/#fun-upper",
            "text": "fun box\n upper():  String  iso^  Public.  Returns an upper case version of the string. Currently only knows ASCII\ncase.",
            "title": "fun upper()"
        },
        {
            "location": "/builtin-String/#fun-upper_in_place",
            "text": "fun ref\n upper_in_place():  String  ref^  Public.  Transforms the string to upper case.",
            "title": "fun upper_in_place()"
        },
        {
            "location": "/builtin-String/#fun-usize",
            "text": "fun box\n usize(optional base:  U8  val):  USize  val ?  Public, may raise an error.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-String/#fun-utf32",
            "text": "fun box\n utf32(offset:  ISize  val): ( U32  val ,  U8  val) ?  Public, may raise an error.  Return a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.",
            "title": "fun utf32()"
        },
        {
            "location": "/builtin-String/#fun-values",
            "text": "fun box\n values():  StringBytes  ref^  Public.  Return an iterator over the bytes in the string.",
            "title": "fun values()"
        },
        {
            "location": "/builtin-StringBytes/",
            "text": "class StringBytes is \nIterator\n[\nU8\n val] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(string: \nString\n box)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun next()\n\n\nfun ref\n next(): \nU8\n val ?\n\n\nPublic, may raise an error.",
            "title": "class StringBytes"
        },
        {
            "location": "/builtin-StringBytes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-StringBytes/#new-create",
            "text": "new create(string:  String  box)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-StringBytes/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-StringBytes/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/builtin-StringBytes/#fun-next",
            "text": "fun ref\n next():  U8  val ?  Public, may raise an error.",
            "title": "fun next()"
        },
        {
            "location": "/builtin-StringRunes/",
            "text": "class StringRunes is \nIterator\n[\nU32\n val] ref\n\n\nIn package \"builtin\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(string: \nString\n box)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun next()\n\n\nfun ref\n next(): \nU32\n val ?\n\n\nPublic, may raise an error.",
            "title": "class StringRunes"
        },
        {
            "location": "/builtin-StringRunes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-StringRunes/#new-create",
            "text": "new create(string:  String  box)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-StringRunes/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-StringRunes/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/builtin-StringRunes/#fun-next",
            "text": "fun ref\n next():  U32  val ?  Public, may raise an error.",
            "title": "fun next()"
        },
        {
            "location": "/builtin-Stringable/",
            "text": "interface Stringable[optional F: \nFormatSpec\n val, optional P: \nPrefixSpec\n val]\n\n\nIn package \"builtin\".\n\n\nPublic, default capability box.\n\n\nThings that can be turned into a String.\n\n\nFunctions\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[F val, P val] box): \nString\n iso^\n\n\nPublic.\n\n\nGenerate a string representation of this object.\n\n\nFormatting information may be specified by providing a \nFormatSettings\n\nobject. If no object is explicitly provided a default is used.\n\n\nWhen only fixed values are needed a primitive can be used, which means no\nstorage allocation is needed.",
            "title": "interface Stringable"
        },
        {
            "location": "/builtin-Stringable/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-Stringable/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [F val, P val] box):  String  iso^  Public.  Generate a string representation of this object.  Formatting information may be specified by providing a  FormatSettings \nobject. If no object is explicitly provided a default is used.  When only fixed values are needed a primitive can be used, which means no\nstorage allocation is needed.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-_ToString/",
            "text": "primitive _ToString\n\n\nIn package \"builtin\".\n\n\nPrivate, default capability val.\n\n\nWorker type providing to string conversions for numbers.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_ToString\n val): \nBool\n val\n\n\nPublic.\n\n\nfun _extend_digits()\n\n\nfun box\n _extend_digits(s: \nString\n ref, digits: \nUSize\n val): \nNone\n val\n\n\nPrivate.\n\n\nfun _f64()\n\n\nfun box\n _f64(x: \nF64\n val, optional fmt: \nFormatSettings\n[((((((\nFormatDefault\n val | \nFormatExp\n val) | \nFormatExpLarge\n val) | \nFormatFix\n val) | \nFormatFixLarge\n val) | \nFormatGeneral\n val) | \nFormatGeneralLarge\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPrivate.\n\n\nfun _fmt_int()\n\n\nfun box\n _fmt_int(fmt: (((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val)): (\nU32\n val , \nString\n val , \nString\n val)\n\n\nPrivate.\n\n\nfun _large()\n\n\nfun box\n _large(): \nString\n val\n\n\nPrivate.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_ToString\n val): \nBool\n val\n\n\nPublic.\n\n\nfun _pad()\n\n\nfun box\n _pad(s: \nString\n ref, width: \nUSize\n val, align: ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val), fill: \nU32\n val): \nNone\n val\n\n\nPrivate.\n\n\nfun _prefix()\n\n\nfun box\n _prefix(neg: \nBool\n val, prefix: ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)): \nString\n val\n\n\nPrivate.\n\n\nfun _small()\n\n\nfun box\n _small(): \nString\n val\n\n\nPrivate.\n\n\nfun _u128()\n\n\nfun box\n _u128(x: \nU128\n val, neg: \nBool\n val, optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPrivate.\n\n\nfun _u64()\n\n\nfun box\n _u64(x: \nU64\n val, neg: \nBool\n val, optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPrivate.",
            "title": "primitive _ToString"
        },
        {
            "location": "/builtin-_ToString/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-_ToString/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-_ToString/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-_ToString/#fun-eq",
            "text": "fun box\n eq(that:  _ToString  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-_ToString/#fun-_extend_digits",
            "text": "fun box\n _extend_digits(s:  String  ref, digits:  USize  val):  None  val  Private.",
            "title": "fun _extend_digits()"
        },
        {
            "location": "/builtin-_ToString/#fun-_f64",
            "text": "fun box\n _f64(x:  F64  val, optional fmt:  FormatSettings [(((((( FormatDefault  val |  FormatExp  val) |  FormatExpLarge  val) |  FormatFix  val) |  FormatFixLarge  val) |  FormatGeneral  val) |  FormatGeneralLarge  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Private.",
            "title": "fun _f64()"
        },
        {
            "location": "/builtin-_ToString/#fun-_fmt_int",
            "text": "fun box\n _fmt_int(fmt: ((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val)): ( U32  val ,  String  val ,  String  val)  Private.",
            "title": "fun _fmt_int()"
        },
        {
            "location": "/builtin-_ToString/#fun-_large",
            "text": "fun box\n _large():  String  val  Private.",
            "title": "fun _large()"
        },
        {
            "location": "/builtin-_ToString/#fun-ne",
            "text": "fun box\n ne(that:  _ToString  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-_ToString/#fun-_pad",
            "text": "fun box\n _pad(s:  String  ref, width:  USize  val, align: (( AlignLeft  val |  AlignRight  val) |  AlignCenter  val), fill:  U32  val):  None  val  Private.",
            "title": "fun _pad()"
        },
        {
            "location": "/builtin-_ToString/#fun-_prefix",
            "text": "fun box\n _prefix(neg:  Bool  val, prefix: (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)):  String  val  Private.",
            "title": "fun _prefix()"
        },
        {
            "location": "/builtin-_ToString/#fun-_small",
            "text": "fun box\n _small():  String  val  Private.",
            "title": "fun _small()"
        },
        {
            "location": "/builtin-_ToString/#fun-_u128",
            "text": "fun box\n _u128(x:  U128  val, neg:  Bool  val, optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Private.",
            "title": "fun _u128()"
        },
        {
            "location": "/builtin-_ToString/#fun-_u64",
            "text": "fun box\n _u64(x:  U64  val, neg:  Bool  val, optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Private.",
            "title": "fun _u64()"
        },
        {
            "location": "/builtin-U128/",
            "text": "primitive U128 is \n_UnsignedInteger\n[\nU128\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nU128\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nU128\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nU128\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nU128\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nU128\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nU128\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nU128\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nU128\n val): (\nU128\n val , \nU128\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nU128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nU128\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nU128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nU128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nU128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nU128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nU128\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nU128\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nU128\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nU128\n val\n\n\nPublic.\n\n\nfun next_pow2()\n\n\nfun box\n next_pow2(): \nU128\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nU128\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nU128\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nU128\n val): \nU128\n val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive U128"
        },
        {
            "location": "/builtin-U128/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U128/#new-create",
            "text": "new create(optional value:  U128  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-U128/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-U128/#fun-abs",
            "text": "fun box\n abs():  U128  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-U128/#fun-add",
            "text": "fun box\n add(y:  U128  val):  U128  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-U128/#fun-bitwidth",
            "text": "fun box\n bitwidth():  U128  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-U128/#fun-bswap",
            "text": "fun box\n bswap():  U128  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-U128/#fun-clz",
            "text": "fun box\n clz():  U128  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-U128/#fun-compare",
            "text": "fun box\n compare(that:  U128  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-U128/#fun-ctz",
            "text": "fun box\n ctz():  U128  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-U128/#fun-div",
            "text": "fun box\n div(y:  U128  val):  U128  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-U128/#fun-divmod",
            "text": "fun box\n divmod(y:  U128  val): ( U128  val ,  U128  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-U128/#fun-eq",
            "text": "fun box\n eq(y:  U128  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-U128/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-U128/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-U128/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  U128  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-U128/#fun-ge",
            "text": "fun box\n ge(y:  U128  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-U128/#fun-gt",
            "text": "fun box\n gt(y:  U128  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-U128/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-U128/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-U128/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-U128/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-U128/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-U128/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-U128/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-U128/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-U128/#fun-le",
            "text": "fun box\n le(y:  U128  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-U128/#fun-lt",
            "text": "fun box\n lt(y:  U128  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-U128/#fun-max",
            "text": "fun box\n max(y:  U128  val):  U128  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-U128/#fun-max_value",
            "text": "fun tag\n max_value():  U128  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-U128/#fun-min",
            "text": "fun box\n min(y:  U128  val):  U128  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-U128/#fun-min_value",
            "text": "fun tag\n min_value():  U128  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-U128/#fun-mod",
            "text": "fun box\n mod(y:  U128  val):  U128  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-U128/#fun-mul",
            "text": "fun box\n mul(y:  U128  val):  U128  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-U128/#fun-ne",
            "text": "fun box\n ne(y:  U128  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-U128/#fun-neg",
            "text": "fun box\n neg():  U128  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-U128/#fun-next_pow2",
            "text": "fun box\n next_pow2():  U128  val  Public.",
            "title": "fun next_pow2()"
        },
        {
            "location": "/builtin-U128/#fun-op_and",
            "text": "fun box\n op_and(y:  U128  val):  U128  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-U128/#fun-op_not",
            "text": "fun box\n op_not():  U128  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-U128/#fun-op_or",
            "text": "fun box\n op_or(y:  U128  val):  U128  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-U128/#fun-op_xor",
            "text": "fun box\n op_xor(y:  U128  val):  U128  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-U128/#fun-popcount",
            "text": "fun box\n popcount():  U128  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-U128/#fun-rotl",
            "text": "fun box\n rotl(y:  U128  val):  U128  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-U128/#fun-rotr",
            "text": "fun box\n rotr(y:  U128  val):  U128  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-U128/#fun-shl",
            "text": "fun box\n shl(y:  U128  val):  U128  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-U128/#fun-shr",
            "text": "fun box\n shr(y:  U128  val):  U128  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-U128/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-U128/#fun-sub",
            "text": "fun box\n sub(y:  U128  val):  U128  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-U128/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-U128/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-U128/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-U128/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-U128/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-U128/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-U128/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-U16/",
            "text": "primitive U16 is \n_UnsignedInteger\n[\nU16\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nU16\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nU16\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nU16\n val): (\nU16\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nU16\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nU16\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nU16\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nU16\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nU16\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nU16\n val): (\nU16\n val , \nU16\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nU16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nU16\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nU16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nU16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nU16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nU16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nU16\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nU16\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nU16\n val): (\nU16\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nU16\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nU16\n val\n\n\nPublic.\n\n\nfun next_pow2()\n\n\nfun box\n next_pow2(): \nU16\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nU16\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nU16\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nU16\n val): \nU16\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nU16\n val): (\nU16\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive U16"
        },
        {
            "location": "/builtin-U16/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U16/#new-create",
            "text": "new create(optional value:  U16  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-U16/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-U16/#fun-abs",
            "text": "fun box\n abs():  U16  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-U16/#fun-add",
            "text": "fun box\n add(y:  U16  val):  U16  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-U16/#fun-addc",
            "text": "fun box\n addc(y:  U16  val): ( U16  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-U16/#fun-bitwidth",
            "text": "fun box\n bitwidth():  U16  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-U16/#fun-bswap",
            "text": "fun box\n bswap():  U16  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-U16/#fun-clz",
            "text": "fun box\n clz():  U16  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-U16/#fun-compare",
            "text": "fun box\n compare(that:  U16  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-U16/#fun-ctz",
            "text": "fun box\n ctz():  U16  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-U16/#fun-div",
            "text": "fun box\n div(y:  U16  val):  U16  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-U16/#fun-divmod",
            "text": "fun box\n divmod(y:  U16  val): ( U16  val ,  U16  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-U16/#fun-eq",
            "text": "fun box\n eq(y:  U16  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-U16/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-U16/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-U16/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  U16  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-U16/#fun-ge",
            "text": "fun box\n ge(y:  U16  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-U16/#fun-gt",
            "text": "fun box\n gt(y:  U16  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-U16/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-U16/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-U16/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-U16/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-U16/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-U16/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-U16/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-U16/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-U16/#fun-le",
            "text": "fun box\n le(y:  U16  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-U16/#fun-lt",
            "text": "fun box\n lt(y:  U16  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-U16/#fun-max",
            "text": "fun box\n max(y:  U16  val):  U16  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-U16/#fun-max_value",
            "text": "fun tag\n max_value():  U16  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-U16/#fun-min",
            "text": "fun box\n min(y:  U16  val):  U16  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-U16/#fun-min_value",
            "text": "fun tag\n min_value():  U16  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-U16/#fun-mod",
            "text": "fun box\n mod(y:  U16  val):  U16  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-U16/#fun-mul",
            "text": "fun box\n mul(y:  U16  val):  U16  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-U16/#fun-mulc",
            "text": "fun box\n mulc(y:  U16  val): ( U16  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-U16/#fun-ne",
            "text": "fun box\n ne(y:  U16  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-U16/#fun-neg",
            "text": "fun box\n neg():  U16  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-U16/#fun-next_pow2",
            "text": "fun box\n next_pow2():  U16  val  Public.",
            "title": "fun next_pow2()"
        },
        {
            "location": "/builtin-U16/#fun-op_and",
            "text": "fun box\n op_and(y:  U16  val):  U16  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-U16/#fun-op_not",
            "text": "fun box\n op_not():  U16  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-U16/#fun-op_or",
            "text": "fun box\n op_or(y:  U16  val):  U16  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-U16/#fun-op_xor",
            "text": "fun box\n op_xor(y:  U16  val):  U16  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-U16/#fun-popcount",
            "text": "fun box\n popcount():  U16  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-U16/#fun-rotl",
            "text": "fun box\n rotl(y:  U16  val):  U16  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-U16/#fun-rotr",
            "text": "fun box\n rotr(y:  U16  val):  U16  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-U16/#fun-shl",
            "text": "fun box\n shl(y:  U16  val):  U16  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-U16/#fun-shr",
            "text": "fun box\n shr(y:  U16  val):  U16  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-U16/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-U16/#fun-sub",
            "text": "fun box\n sub(y:  U16  val):  U16  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-U16/#fun-subc",
            "text": "fun box\n subc(y:  U16  val): ( U16  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-U16/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-U16/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-U16/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-U16/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-U16/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-U16/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-U16/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-U32/",
            "text": "primitive U32 is \n_UnsignedInteger\n[\nU32\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nU32\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nU32\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nU32\n val): (\nU32\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nU32\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nU32\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nU32\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nU32\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nU32\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nU32\n val): (\nU32\n val , \nU32\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nU32\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nU32\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nU32\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nU32\n val): (\nU32\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nU32\n val\n\n\nPublic.\n\n\nfun next_pow2()\n\n\nfun box\n next_pow2(): \nU32\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nU32\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nU32\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nU32\n val): \nU32\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nU32\n val): (\nU32\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive U32"
        },
        {
            "location": "/builtin-U32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U32/#new-create",
            "text": "new create(optional value:  U32  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-U32/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-U32/#fun-abs",
            "text": "fun box\n abs():  U32  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-U32/#fun-add",
            "text": "fun box\n add(y:  U32  val):  U32  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-U32/#fun-addc",
            "text": "fun box\n addc(y:  U32  val): ( U32  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-U32/#fun-bitwidth",
            "text": "fun box\n bitwidth():  U32  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-U32/#fun-bswap",
            "text": "fun box\n bswap():  U32  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-U32/#fun-clz",
            "text": "fun box\n clz():  U32  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-U32/#fun-compare",
            "text": "fun box\n compare(that:  U32  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-U32/#fun-ctz",
            "text": "fun box\n ctz():  U32  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-U32/#fun-div",
            "text": "fun box\n div(y:  U32  val):  U32  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-U32/#fun-divmod",
            "text": "fun box\n divmod(y:  U32  val): ( U32  val ,  U32  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-U32/#fun-eq",
            "text": "fun box\n eq(y:  U32  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-U32/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-U32/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-U32/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  U32  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-U32/#fun-ge",
            "text": "fun box\n ge(y:  U32  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-U32/#fun-gt",
            "text": "fun box\n gt(y:  U32  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-U32/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-U32/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-U32/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-U32/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-U32/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-U32/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-U32/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-U32/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-U32/#fun-le",
            "text": "fun box\n le(y:  U32  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-U32/#fun-lt",
            "text": "fun box\n lt(y:  U32  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-U32/#fun-max",
            "text": "fun box\n max(y:  U32  val):  U32  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-U32/#fun-max_value",
            "text": "fun tag\n max_value():  U32  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-U32/#fun-min",
            "text": "fun box\n min(y:  U32  val):  U32  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-U32/#fun-min_value",
            "text": "fun tag\n min_value():  U32  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-U32/#fun-mod",
            "text": "fun box\n mod(y:  U32  val):  U32  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-U32/#fun-mul",
            "text": "fun box\n mul(y:  U32  val):  U32  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-U32/#fun-mulc",
            "text": "fun box\n mulc(y:  U32  val): ( U32  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-U32/#fun-ne",
            "text": "fun box\n ne(y:  U32  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-U32/#fun-neg",
            "text": "fun box\n neg():  U32  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-U32/#fun-next_pow2",
            "text": "fun box\n next_pow2():  U32  val  Public.",
            "title": "fun next_pow2()"
        },
        {
            "location": "/builtin-U32/#fun-op_and",
            "text": "fun box\n op_and(y:  U32  val):  U32  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-U32/#fun-op_not",
            "text": "fun box\n op_not():  U32  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-U32/#fun-op_or",
            "text": "fun box\n op_or(y:  U32  val):  U32  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-U32/#fun-op_xor",
            "text": "fun box\n op_xor(y:  U32  val):  U32  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-U32/#fun-popcount",
            "text": "fun box\n popcount():  U32  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-U32/#fun-rotl",
            "text": "fun box\n rotl(y:  U32  val):  U32  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-U32/#fun-rotr",
            "text": "fun box\n rotr(y:  U32  val):  U32  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-U32/#fun-shl",
            "text": "fun box\n shl(y:  U32  val):  U32  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-U32/#fun-shr",
            "text": "fun box\n shr(y:  U32  val):  U32  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-U32/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-U32/#fun-sub",
            "text": "fun box\n sub(y:  U32  val):  U32  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-U32/#fun-subc",
            "text": "fun box\n subc(y:  U32  val): ( U32  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-U32/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-U32/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-U32/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-U32/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-U32/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-U32/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-U32/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-U64/",
            "text": "primitive U64 is \n_UnsignedInteger\n[\nU64\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nU64\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nU64\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nU64\n val): (\nU64\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nU64\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nU64\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nU64\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nU64\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nU64\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nU64\n val): (\nU64\n val , \nU64\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nU64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nU64\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nU64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nU64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nU64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nU64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nU64\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nU64\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nU64\n val): (\nU64\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nU64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nU64\n val\n\n\nPublic.\n\n\nfun next_pow2()\n\n\nfun box\n next_pow2(): \nU64\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nU64\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nU64\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nU64\n val): (\nU64\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive U64"
        },
        {
            "location": "/builtin-U64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U64/#new-create",
            "text": "new create(optional value:  U64  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-U64/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-U64/#fun-abs",
            "text": "fun box\n abs():  U64  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-U64/#fun-add",
            "text": "fun box\n add(y:  U64  val):  U64  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-U64/#fun-addc",
            "text": "fun box\n addc(y:  U64  val): ( U64  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-U64/#fun-bitwidth",
            "text": "fun box\n bitwidth():  U64  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-U64/#fun-bswap",
            "text": "fun box\n bswap():  U64  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-U64/#fun-clz",
            "text": "fun box\n clz():  U64  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-U64/#fun-compare",
            "text": "fun box\n compare(that:  U64  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-U64/#fun-ctz",
            "text": "fun box\n ctz():  U64  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-U64/#fun-div",
            "text": "fun box\n div(y:  U64  val):  U64  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-U64/#fun-divmod",
            "text": "fun box\n divmod(y:  U64  val): ( U64  val ,  U64  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-U64/#fun-eq",
            "text": "fun box\n eq(y:  U64  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-U64/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-U64/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-U64/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  U64  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-U64/#fun-ge",
            "text": "fun box\n ge(y:  U64  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-U64/#fun-gt",
            "text": "fun box\n gt(y:  U64  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-U64/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-U64/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-U64/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-U64/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-U64/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-U64/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-U64/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-U64/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-U64/#fun-le",
            "text": "fun box\n le(y:  U64  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-U64/#fun-lt",
            "text": "fun box\n lt(y:  U64  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-U64/#fun-max",
            "text": "fun box\n max(y:  U64  val):  U64  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-U64/#fun-max_value",
            "text": "fun tag\n max_value():  U64  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-U64/#fun-min",
            "text": "fun box\n min(y:  U64  val):  U64  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-U64/#fun-min_value",
            "text": "fun tag\n min_value():  U64  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-U64/#fun-mod",
            "text": "fun box\n mod(y:  U64  val):  U64  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-U64/#fun-mul",
            "text": "fun box\n mul(y:  U64  val):  U64  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-U64/#fun-mulc",
            "text": "fun box\n mulc(y:  U64  val): ( U64  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-U64/#fun-ne",
            "text": "fun box\n ne(y:  U64  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-U64/#fun-neg",
            "text": "fun box\n neg():  U64  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-U64/#fun-next_pow2",
            "text": "fun box\n next_pow2():  U64  val  Public.",
            "title": "fun next_pow2()"
        },
        {
            "location": "/builtin-U64/#fun-op_and",
            "text": "fun box\n op_and(y:  U64  val):  U64  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-U64/#fun-op_not",
            "text": "fun box\n op_not():  U64  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-U64/#fun-op_or",
            "text": "fun box\n op_or(y:  U64  val):  U64  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-U64/#fun-op_xor",
            "text": "fun box\n op_xor(y:  U64  val):  U64  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-U64/#fun-popcount",
            "text": "fun box\n popcount():  U64  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-U64/#fun-rotl",
            "text": "fun box\n rotl(y:  U64  val):  U64  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-U64/#fun-rotr",
            "text": "fun box\n rotr(y:  U64  val):  U64  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-U64/#fun-shl",
            "text": "fun box\n shl(y:  U64  val):  U64  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-U64/#fun-shr",
            "text": "fun box\n shr(y:  U64  val):  U64  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-U64/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-U64/#fun-sub",
            "text": "fun box\n sub(y:  U64  val):  U64  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-U64/#fun-subc",
            "text": "fun box\n subc(y:  U64  val): ( U64  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-U64/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-U64/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-U64/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-U64/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-U64/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-U64/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-U64/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-U8/",
            "text": "primitive U8 is \n_UnsignedInteger\n[\nU8\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nU8\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nU8\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nU8\n val): (\nU8\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nU8\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nU8\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nU8\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nU8\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nU8\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nU8\n val): (\nU8\n val , \nU8\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nU8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): \nU8\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nU8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nU8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nU8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nU8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nU8\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nU8\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nU8\n val): (\nU8\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nU8\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nU8\n val\n\n\nPublic.\n\n\nfun next_pow2()\n\n\nfun box\n next_pow2(): \nU8\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nU8\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nU8\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nU8\n val): \nU8\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nU8\n val): (\nU8\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive U8"
        },
        {
            "location": "/builtin-U8/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-U8/#new-create",
            "text": "new create(optional value:  U8  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-U8/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-U8/#fun-abs",
            "text": "fun box\n abs():  U8  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-U8/#fun-add",
            "text": "fun box\n add(y:  U8  val):  U8  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-U8/#fun-addc",
            "text": "fun box\n addc(y:  U8  val): ( U8  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-U8/#fun-bitwidth",
            "text": "fun box\n bitwidth():  U8  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-U8/#fun-bswap",
            "text": "fun box\n bswap():  U8  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-U8/#fun-clz",
            "text": "fun box\n clz():  U8  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-U8/#fun-compare",
            "text": "fun box\n compare(that:  U8  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-U8/#fun-ctz",
            "text": "fun box\n ctz():  U8  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-U8/#fun-div",
            "text": "fun box\n div(y:  U8  val):  U8  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-U8/#fun-divmod",
            "text": "fun box\n divmod(y:  U8  val): ( U8  val ,  U8  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-U8/#fun-eq",
            "text": "fun box\n eq(y:  U8  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-U8/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-U8/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-U8/#fun-from",
            "text": "fun tag\n from[B: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [B val] val)](a: B val):  U8  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-U8/#fun-ge",
            "text": "fun box\n ge(y:  U8  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-U8/#fun-gt",
            "text": "fun box\n gt(y:  U8  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-U8/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-U8/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-U8/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-U8/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-U8/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-U8/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-U8/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-U8/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-U8/#fun-le",
            "text": "fun box\n le(y:  U8  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-U8/#fun-lt",
            "text": "fun box\n lt(y:  U8  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-U8/#fun-max",
            "text": "fun box\n max(y:  U8  val):  U8  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-U8/#fun-max_value",
            "text": "fun tag\n max_value():  U8  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-U8/#fun-min",
            "text": "fun box\n min(y:  U8  val):  U8  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-U8/#fun-min_value",
            "text": "fun tag\n min_value():  U8  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-U8/#fun-mod",
            "text": "fun box\n mod(y:  U8  val):  U8  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-U8/#fun-mul",
            "text": "fun box\n mul(y:  U8  val):  U8  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-U8/#fun-mulc",
            "text": "fun box\n mulc(y:  U8  val): ( U8  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-U8/#fun-ne",
            "text": "fun box\n ne(y:  U8  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-U8/#fun-neg",
            "text": "fun box\n neg():  U8  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-U8/#fun-next_pow2",
            "text": "fun box\n next_pow2():  U8  val  Public.",
            "title": "fun next_pow2()"
        },
        {
            "location": "/builtin-U8/#fun-op_and",
            "text": "fun box\n op_and(y:  U8  val):  U8  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-U8/#fun-op_not",
            "text": "fun box\n op_not():  U8  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-U8/#fun-op_or",
            "text": "fun box\n op_or(y:  U8  val):  U8  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-U8/#fun-op_xor",
            "text": "fun box\n op_xor(y:  U8  val):  U8  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-U8/#fun-popcount",
            "text": "fun box\n popcount():  U8  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-U8/#fun-rotl",
            "text": "fun box\n rotl(y:  U8  val):  U8  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-U8/#fun-rotr",
            "text": "fun box\n rotr(y:  U8  val):  U8  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-U8/#fun-shl",
            "text": "fun box\n shl(y:  U8  val):  U8  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-U8/#fun-shr",
            "text": "fun box\n shr(y:  U8  val):  U8  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-U8/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-U8/#fun-sub",
            "text": "fun box\n sub(y:  U8  val):  U8  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-U8/#fun-subc",
            "text": "fun box\n subc(y:  U8  val): ( U8  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-U8/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-U8/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-U8/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-U8/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-U8/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-U8/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-U8/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-ULong/",
            "text": "primitive ULong is \n_UnsignedInteger\n[\nULong\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nULong\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nULong\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nULong\n val): (\nULong\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nULong\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nULong\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nULong\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nULong\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nULong\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nULong\n val): (\nULong\n val , \nULong\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nULong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nULong\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nULong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nULong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nULong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nULong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nULong\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nULong\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nULong\n val): (\nULong\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nULong\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nULong\n val\n\n\nPublic.\n\n\nfun next_pow2()\n\n\nfun box\n next_pow2(): \nULong\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nULong\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nULong\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nULong\n val): \nULong\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nULong\n val): (\nULong\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive ULong"
        },
        {
            "location": "/builtin-ULong/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-ULong/#new-create",
            "text": "new create(optional value:  ULong  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-ULong/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-ULong/#fun-abs",
            "text": "fun box\n abs():  ULong  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-ULong/#fun-add",
            "text": "fun box\n add(y:  ULong  val):  ULong  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-ULong/#fun-addc",
            "text": "fun box\n addc(y:  ULong  val): ( ULong  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-ULong/#fun-bitwidth",
            "text": "fun box\n bitwidth():  ULong  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-ULong/#fun-bswap",
            "text": "fun box\n bswap():  ULong  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-ULong/#fun-clz",
            "text": "fun box\n clz():  ULong  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-ULong/#fun-compare",
            "text": "fun box\n compare(that:  ULong  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-ULong/#fun-ctz",
            "text": "fun box\n ctz():  ULong  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-ULong/#fun-div",
            "text": "fun box\n div(y:  ULong  val):  ULong  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-ULong/#fun-divmod",
            "text": "fun box\n divmod(y:  ULong  val): ( ULong  val ,  ULong  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-ULong/#fun-eq",
            "text": "fun box\n eq(y:  ULong  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-ULong/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-ULong/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-ULong/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  ULong  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-ULong/#fun-ge",
            "text": "fun box\n ge(y:  ULong  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-ULong/#fun-gt",
            "text": "fun box\n gt(y:  ULong  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-ULong/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-ULong/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-ULong/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-ULong/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-ULong/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-ULong/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-ULong/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-ULong/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-ULong/#fun-le",
            "text": "fun box\n le(y:  ULong  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-ULong/#fun-lt",
            "text": "fun box\n lt(y:  ULong  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-ULong/#fun-max",
            "text": "fun box\n max(y:  ULong  val):  ULong  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-ULong/#fun-max_value",
            "text": "fun tag\n max_value():  ULong  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-ULong/#fun-min",
            "text": "fun box\n min(y:  ULong  val):  ULong  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-ULong/#fun-min_value",
            "text": "fun tag\n min_value():  ULong  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-ULong/#fun-mod",
            "text": "fun box\n mod(y:  ULong  val):  ULong  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-ULong/#fun-mul",
            "text": "fun box\n mul(y:  ULong  val):  ULong  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-ULong/#fun-mulc",
            "text": "fun box\n mulc(y:  ULong  val): ( ULong  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-ULong/#fun-ne",
            "text": "fun box\n ne(y:  ULong  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-ULong/#fun-neg",
            "text": "fun box\n neg():  ULong  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-ULong/#fun-next_pow2",
            "text": "fun box\n next_pow2():  ULong  val  Public.",
            "title": "fun next_pow2()"
        },
        {
            "location": "/builtin-ULong/#fun-op_and",
            "text": "fun box\n op_and(y:  ULong  val):  ULong  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-ULong/#fun-op_not",
            "text": "fun box\n op_not():  ULong  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-ULong/#fun-op_or",
            "text": "fun box\n op_or(y:  ULong  val):  ULong  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-ULong/#fun-op_xor",
            "text": "fun box\n op_xor(y:  ULong  val):  ULong  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-ULong/#fun-popcount",
            "text": "fun box\n popcount():  ULong  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-ULong/#fun-rotl",
            "text": "fun box\n rotl(y:  ULong  val):  ULong  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-ULong/#fun-rotr",
            "text": "fun box\n rotr(y:  ULong  val):  ULong  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-ULong/#fun-shl",
            "text": "fun box\n shl(y:  ULong  val):  ULong  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-ULong/#fun-shr",
            "text": "fun box\n shr(y:  ULong  val):  ULong  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-ULong/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-ULong/#fun-sub",
            "text": "fun box\n sub(y:  ULong  val):  ULong  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-ULong/#fun-subc",
            "text": "fun box\n subc(y:  ULong  val): ( ULong  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-ULong/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-ULong/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-ULong/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-ULong/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-ULong/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-ULong/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-ULong/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-USize/",
            "text": "primitive USize is \n_UnsignedInteger\n[\nUSize\n val] val\n\n\nIn package \"builtin\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional value: \nUSize\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): \nUSize\n val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun addc()\n\n\nfun box\n addc(y: \nUSize\n val): (\nUSize\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): \nUSize\n val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): \nUSize\n val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): \nUSize\n val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nUSize\n val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): \nUSize\n val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: \nUSize\n val): (\nUSize\n val , \nUSize\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: \nUSize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[A: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[A val] val)](a: A val): \nUSize\n val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: \nUSize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: \nUSize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: \nUSize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: \nUSize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): \nUSize\n val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): \nUSize\n val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun mulc()\n\n\nfun box\n mulc(y: \nUSize\n val): (\nUSize\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: \nUSize\n val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): \nUSize\n val\n\n\nPublic.\n\n\nfun next_pow2()\n\n\nfun box\n next_pow2(): \nUSize\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): \nUSize\n val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): \nUSize\n val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: \nUSize\n val): \nUSize\n val\n\n\nPublic.\n\n\nfun subc()\n\n\nfun box\n subc(y: \nUSize\n val): (\nUSize\n val , \nBool\n val)\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "primitive USize"
        },
        {
            "location": "/builtin-USize/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-USize/#new-create",
            "text": "new create(optional value:  USize  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-USize/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-USize/#fun-abs",
            "text": "fun box\n abs():  USize  val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-USize/#fun-add",
            "text": "fun box\n add(y:  USize  val):  USize  val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-USize/#fun-addc",
            "text": "fun box\n addc(y:  USize  val): ( USize  val ,  Bool  val)  Public.",
            "title": "fun addc()"
        },
        {
            "location": "/builtin-USize/#fun-bitwidth",
            "text": "fun box\n bitwidth():  USize  val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-USize/#fun-bswap",
            "text": "fun box\n bswap():  USize  val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-USize/#fun-clz",
            "text": "fun box\n clz():  USize  val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-USize/#fun-compare",
            "text": "fun box\n compare(that:  USize  val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-USize/#fun-ctz",
            "text": "fun box\n ctz():  USize  val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-USize/#fun-div",
            "text": "fun box\n div(y:  USize  val):  USize  val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-USize/#fun-divmod",
            "text": "fun box\n divmod(y:  USize  val): ( USize  val ,  USize  val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-USize/#fun-eq",
            "text": "fun box\n eq(y:  USize  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-USize/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-USize/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-USize/#fun-from",
            "text": "fun tag\n from[A: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [A val] val)](a: A val):  USize  val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-USize/#fun-ge",
            "text": "fun box\n ge(y:  USize  val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-USize/#fun-gt",
            "text": "fun box\n gt(y:  USize  val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-USize/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-USize/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-USize/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-USize/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-USize/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-USize/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-USize/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-USize/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-USize/#fun-le",
            "text": "fun box\n le(y:  USize  val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-USize/#fun-lt",
            "text": "fun box\n lt(y:  USize  val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-USize/#fun-max",
            "text": "fun box\n max(y:  USize  val):  USize  val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-USize/#fun-max_value",
            "text": "fun tag\n max_value():  USize  val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-USize/#fun-min",
            "text": "fun box\n min(y:  USize  val):  USize  val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-USize/#fun-min_value",
            "text": "fun tag\n min_value():  USize  val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-USize/#fun-mod",
            "text": "fun box\n mod(y:  USize  val):  USize  val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-USize/#fun-mul",
            "text": "fun box\n mul(y:  USize  val):  USize  val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-USize/#fun-mulc",
            "text": "fun box\n mulc(y:  USize  val): ( USize  val ,  Bool  val)  Public.",
            "title": "fun mulc()"
        },
        {
            "location": "/builtin-USize/#fun-ne",
            "text": "fun box\n ne(y:  USize  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-USize/#fun-neg",
            "text": "fun box\n neg():  USize  val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-USize/#fun-next_pow2",
            "text": "fun box\n next_pow2():  USize  val  Public.",
            "title": "fun next_pow2()"
        },
        {
            "location": "/builtin-USize/#fun-op_and",
            "text": "fun box\n op_and(y:  USize  val):  USize  val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-USize/#fun-op_not",
            "text": "fun box\n op_not():  USize  val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-USize/#fun-op_or",
            "text": "fun box\n op_or(y:  USize  val):  USize  val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-USize/#fun-op_xor",
            "text": "fun box\n op_xor(y:  USize  val):  USize  val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-USize/#fun-popcount",
            "text": "fun box\n popcount():  USize  val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-USize/#fun-rotl",
            "text": "fun box\n rotl(y:  USize  val):  USize  val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-USize/#fun-rotr",
            "text": "fun box\n rotr(y:  USize  val):  USize  val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-USize/#fun-shl",
            "text": "fun box\n shl(y:  USize  val):  USize  val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-USize/#fun-shr",
            "text": "fun box\n shr(y:  USize  val):  USize  val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-USize/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-USize/#fun-sub",
            "text": "fun box\n sub(y:  USize  val):  USize  val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-USize/#fun-subc",
            "text": "fun box\n subc(y:  USize  val): ( USize  val ,  Bool  val)  Public.",
            "title": "fun subc()"
        },
        {
            "location": "/builtin-USize/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-USize/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-USize/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-USize/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-USize/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-USize/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-USize/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin-Unsigned/",
            "text": "type Unsigned is ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)\n\n\nIn package \"builtin\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type Unsigned"
        },
        {
            "location": "/builtin-_UnsignedInteger/",
            "text": "trait _UnsignedInteger[A: \n_UnsignedInteger\n[A val] val] is \nInteger\n[A val] val\n\n\nIn package \"builtin\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(value: A val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(): A val\n\n\nPublic.\n\n\nfun add()\n\n\nfun box\n add(y: A val): A val\n\n\nPublic.\n\n\nfun bitwidth()\n\n\nfun box\n bitwidth(): A val\n\n\nPublic.\n\n\nfun bswap()\n\n\nfun box\n bswap(): A val\n\n\nPublic.\n\n\nfun clz()\n\n\nfun box\n clz(): A val\n\n\nPublic.\n\n\nfun compare()\n\n\nfun box\n compare(that: A val): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun ctz()\n\n\nfun box\n ctz(): A val\n\n\nPublic.\n\n\nfun div()\n\n\nfun box\n div(y: A val): A val\n\n\nPublic.\n\n\nfun divmod()\n\n\nfun box\n divmod(y: A val): (A val , A val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun f32()\n\n\nfun box\n f32(): \nF32\n val\n\n\nPublic.\n\n\nfun f64()\n\n\nfun box\n f64(): \nF64\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun tag\n from[B: (((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)) \n \nReal\n[B val] val)](a: B val): A val\n\n\nPublic.\n\n\nfun ge()\n\n\nfun box\n ge(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun gt()\n\n\nfun box\n gt(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun i128()\n\n\nfun box\n i128(): \nI128\n val\n\n\nPublic.\n\n\nfun i16()\n\n\nfun box\n i16(): \nI16\n val\n\n\nPublic.\n\n\nfun i32()\n\n\nfun box\n i32(): \nI32\n val\n\n\nPublic.\n\n\nfun i64()\n\n\nfun box\n i64(): \nI64\n val\n\n\nPublic.\n\n\nfun i8()\n\n\nfun box\n i8(): \nI8\n val\n\n\nPublic.\n\n\nfun ilong()\n\n\nfun box\n ilong(): \nILong\n val\n\n\nPublic.\n\n\nfun isize()\n\n\nfun box\n isize(): \nISize\n val\n\n\nPublic.\n\n\nfun le()\n\n\nfun box\n le(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun lt()\n\n\nfun box\n lt(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun max()\n\n\nfun box\n max(y: A val): A val\n\n\nPublic.\n\n\nfun max_value()\n\n\nfun tag\n max_value(): A val\n\n\nPublic.\n\n\nfun min()\n\n\nfun box\n min(y: A val): A val\n\n\nPublic.\n\n\nfun min_value()\n\n\nfun tag\n min_value(): A val\n\n\nPublic.\n\n\nfun mod()\n\n\nfun box\n mod(y: A val): A val\n\n\nPublic.\n\n\nfun mul()\n\n\nfun box\n mul(y: A val): A val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(y: A val): \nBool\n val\n\n\nPublic.\n\n\nfun neg()\n\n\nfun box\n neg(): A val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(y: A val): A val\n\n\nPublic.\n\n\nfun op_not()\n\n\nfun box\n op_not(): A val\n\n\nPublic.\n\n\nfun op_or()\n\n\nfun box\n op_or(y: A val): A val\n\n\nPublic.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(y: A val): A val\n\n\nPublic.\n\n\nfun popcount()\n\n\nfun box\n popcount(): A val\n\n\nPublic.\n\n\nfun rotl()\n\n\nfun box\n rotl(y: A val): A val\n\n\nPublic.\n\n\nfun rotr()\n\n\nfun box\n rotr(y: A val): A val\n\n\nPublic.\n\n\nfun shl()\n\n\nfun box\n shl(y: A val): A val\n\n\nPublic.\n\n\nfun shr()\n\n\nfun box\n shr(y: A val): A val\n\n\nPublic.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatSettings\n[(((((((((\nFormatDefault\n val | \nFormatUTF32\n val) | \nFormatBinary\n val) | \nFormatBinaryBare\n val) | \nFormatOctal\n val) | \nFormatOctalBare\n val) | \nFormatHex\n val) | \nFormatHexBare\n val) | \nFormatHexSmall\n val) | \nFormatHexSmallBare\n val), ((\nPrefixDefault\n val | \nPrefixSpace\n val) | \nPrefixSign\n val)] box): \nString\n iso^\n\n\nPublic.\n\n\nfun sub()\n\n\nfun box\n sub(y: A val): A val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun box\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun box\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun box\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun box\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun box\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun ulong()\n\n\nfun box\n ulong(): \nULong\n val\n\n\nPublic.\n\n\nfun usize()\n\n\nfun box\n usize(): \nUSize\n val\n\n\nPublic.",
            "title": "trait _UnsignedInteger"
        },
        {
            "location": "/builtin-_UnsignedInteger/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin-_UnsignedInteger/#new-create",
            "text": "new create(value: A val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-abs",
            "text": "fun box\n abs(): A val  Public.",
            "title": "fun abs()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-add",
            "text": "fun box\n add(y: A val): A val  Public.",
            "title": "fun add()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-bitwidth",
            "text": "fun box\n bitwidth(): A val  Public.",
            "title": "fun bitwidth()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-bswap",
            "text": "fun box\n bswap(): A val  Public.",
            "title": "fun bswap()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-clz",
            "text": "fun box\n clz(): A val  Public.",
            "title": "fun clz()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-compare",
            "text": "fun box\n compare(that: A val): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-ctz",
            "text": "fun box\n ctz(): A val  Public.",
            "title": "fun ctz()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-div",
            "text": "fun box\n div(y: A val): A val  Public.",
            "title": "fun div()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-divmod",
            "text": "fun box\n divmod(y: A val): (A val , A val)  Public.",
            "title": "fun divmod()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-eq",
            "text": "fun box\n eq(y: A val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-f32",
            "text": "fun box\n f32():  F32  val  Public.",
            "title": "fun f32()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-f64",
            "text": "fun box\n f64():  F64  val  Public.",
            "title": "fun f64()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-from",
            "text": "fun tag\n from[B: ((((((((( I8  val |  I16  val) |  I32  val) |  I64  val) |  I128  val) |  ILong  val) |  ISize  val) | (((((( U8  val |  U16  val) |  U32  val) |  U64  val) |  U128  val) |  ULong  val) |  USize  val)) | ( F32  val |  F64  val))    Real [B val] val)](a: B val): A val  Public.",
            "title": "fun from()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-ge",
            "text": "fun box\n ge(y: A val):  Bool  val  Public.",
            "title": "fun ge()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-gt",
            "text": "fun box\n gt(y: A val):  Bool  val  Public.",
            "title": "fun gt()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-i128",
            "text": "fun box\n i128():  I128  val  Public.",
            "title": "fun i128()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-i16",
            "text": "fun box\n i16():  I16  val  Public.",
            "title": "fun i16()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-i32",
            "text": "fun box\n i32():  I32  val  Public.",
            "title": "fun i32()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-i64",
            "text": "fun box\n i64():  I64  val  Public.",
            "title": "fun i64()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-i8",
            "text": "fun box\n i8():  I8  val  Public.",
            "title": "fun i8()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-ilong",
            "text": "fun box\n ilong():  ILong  val  Public.",
            "title": "fun ilong()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-isize",
            "text": "fun box\n isize():  ISize  val  Public.",
            "title": "fun isize()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-le",
            "text": "fun box\n le(y: A val):  Bool  val  Public.",
            "title": "fun le()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-lt",
            "text": "fun box\n lt(y: A val):  Bool  val  Public.",
            "title": "fun lt()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-max",
            "text": "fun box\n max(y: A val): A val  Public.",
            "title": "fun max()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-max_value",
            "text": "fun tag\n max_value(): A val  Public.",
            "title": "fun max_value()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-min",
            "text": "fun box\n min(y: A val): A val  Public.",
            "title": "fun min()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-min_value",
            "text": "fun tag\n min_value(): A val  Public.",
            "title": "fun min_value()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-mod",
            "text": "fun box\n mod(y: A val): A val  Public.",
            "title": "fun mod()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-mul",
            "text": "fun box\n mul(y: A val): A val  Public.",
            "title": "fun mul()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-ne",
            "text": "fun box\n ne(y: A val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-neg",
            "text": "fun box\n neg(): A val  Public.",
            "title": "fun neg()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-op_and",
            "text": "fun box\n op_and(y: A val): A val  Public.",
            "title": "fun op_and()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-op_not",
            "text": "fun box\n op_not(): A val  Public.",
            "title": "fun op_not()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-op_or",
            "text": "fun box\n op_or(y: A val): A val  Public.",
            "title": "fun op_or()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-op_xor",
            "text": "fun box\n op_xor(y: A val): A val  Public.",
            "title": "fun op_xor()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-popcount",
            "text": "fun box\n popcount(): A val  Public.",
            "title": "fun popcount()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-rotl",
            "text": "fun box\n rotl(y: A val): A val  Public.",
            "title": "fun rotl()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-rotr",
            "text": "fun box\n rotr(y: A val): A val  Public.",
            "title": "fun rotr()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-shl",
            "text": "fun box\n shl(y: A val): A val  Public.",
            "title": "fun shl()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-shr",
            "text": "fun box\n shr(y: A val): A val  Public.",
            "title": "fun shr()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatSettings [((((((((( FormatDefault  val |  FormatUTF32  val) |  FormatBinary  val) |  FormatBinaryBare  val) |  FormatOctal  val) |  FormatOctalBare  val) |  FormatHex  val) |  FormatHexBare  val) |  FormatHexSmall  val) |  FormatHexSmallBare  val), (( PrefixDefault  val |  PrefixSpace  val) |  PrefixSign  val)] box):  String  iso^  Public.",
            "title": "fun string()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-sub",
            "text": "fun box\n sub(y: A val): A val  Public.",
            "title": "fun sub()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-u128",
            "text": "fun box\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-u16",
            "text": "fun box\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-u32",
            "text": "fun box\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-u64",
            "text": "fun box\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-u8",
            "text": "fun box\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-ulong",
            "text": "fun box\n ulong():  ULong  val  Public.",
            "title": "fun ulong()"
        },
        {
            "location": "/builtin-_UnsignedInteger/#fun-usize",
            "text": "fun box\n usize():  USize  val  Public.",
            "title": "fun usize()"
        },
        {
            "location": "/builtin_test--index/",
            "text": "Builtin Tests\n\n\nThis package contains the unit tests for the \nbuiltin\n package. These are here\nso \nbuiltin\n doesn't have to depend on the \nPonyTest\n package.",
            "title": "Package"
        },
        {
            "location": "/builtin_test--index/#builtin-tests",
            "text": "This package contains the unit tests for the  builtin  package. These are here\nso  builtin  doesn't have to depend on the  PonyTest  package.",
            "title": "Builtin Tests"
        },
        {
            "location": "/builtin_test-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"builtin_test\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/builtin_test-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/builtin_test-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/builtin_test-_TestAbs/",
            "text": "class _TestAbs is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest abs function\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestAbs"
        },
        {
            "location": "/builtin_test-_TestAbs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestAbs/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestAbs/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestAbs/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestAbs/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestAbs/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestAbs/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestAbs/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestArraySlice/",
            "text": "class _TestArraySlice is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest slicing arrays.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestArraySlice"
        },
        {
            "location": "/builtin_test-_TestArraySlice/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestArraySlice/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestArraySlice/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestArraySlice/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestArraySlice/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestArraySlice/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestArraySlice/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestArraySlice/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestDivMod/",
            "text": "class _TestDivMod is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest divmod on various bit widths.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestDivMod"
        },
        {
            "location": "/builtin_test-_TestDivMod/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestDivMod/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestDivMod/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestDivMod/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestDivMod/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestDivMod/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestDivMod/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestDivMod/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestFloatToString/",
            "text": "class _TestFloatToString is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest converting floats to strings.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestFloatToString"
        },
        {
            "location": "/builtin_test-_TestFloatToString/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestFloatToString/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestFloatToString/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestFloatToString/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestFloatToString/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestFloatToString/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestFloatToString/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestFloatToString/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestIntToString/",
            "text": "class _TestIntToString is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest converting integers to strings.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestIntToString"
        },
        {
            "location": "/builtin_test-_TestIntToString/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestIntToString/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestIntToString/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestIntToString/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestIntToString/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestIntToString/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestIntToString/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestIntToString/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestMath128/",
            "text": "class _TestMath128 is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest 128 bit integer math.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestMath128"
        },
        {
            "location": "/builtin_test-_TestMath128/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestMath128/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestMath128/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestMath128/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestMath128/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestMath128/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestMath128/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestMath128/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestMaybe/",
            "text": "class _TestMaybe is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest the Maybe type.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestMaybe"
        },
        {
            "location": "/builtin_test-_TestMaybe/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestMaybe/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestMaybe/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestMaybe/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestMaybe/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestMaybe/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestMaybe/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestMaybe/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF32/",
            "text": "class _TestSpecialValuesF32 is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest whether a F32 is infinite or NaN.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestSpecialValuesF32"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF32/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF64/",
            "text": "class _TestSpecialValuesF64 is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest whether a F64 is infinite or NaN.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestSpecialValuesF64"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestSpecialValuesF64/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringCompare/",
            "text": "class _TestStringCompare is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest comparing strings.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringCompare"
        },
        {
            "location": "/builtin_test-_TestStringCompare/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringCompare/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringCompare/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringCompare/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringCompare/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringCompare/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringCompare/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringCompare/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringCut/",
            "text": "class _TestStringCut is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest cutting part of a string\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringCut"
        },
        {
            "location": "/builtin_test-_TestStringCut/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringCut/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringCut/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringCut/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringCut/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringCut/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringCut/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringCut/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringJoin/",
            "text": "class _TestStringJoin is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest String.join\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringJoin"
        },
        {
            "location": "/builtin_test-_TestStringJoin/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringJoin/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringJoin/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringJoin/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringJoin/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringJoin/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringJoin/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringJoin/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringLstrip/",
            "text": "class _TestStringLstrip is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest stripping leading characters from a string.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringLstrip"
        },
        {
            "location": "/builtin_test-_TestStringLstrip/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringLstrip/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringLstrip/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringLstrip/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringLstrip/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringLstrip/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringLstrip/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringLstrip/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringRemove/",
            "text": "class _TestStringRemove is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest removing characters from a string (independent of leading or trailing).\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringRemove"
        },
        {
            "location": "/builtin_test-_TestStringRemove/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringRemove/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringRemove/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringRemove/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringRemove/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringRemove/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringRemove/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringRemove/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringReplace/",
            "text": "class _TestStringReplace is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest String.replace\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringReplace"
        },
        {
            "location": "/builtin_test-_TestStringReplace/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringReplace/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringReplace/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringReplace/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringReplace/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringReplace/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringReplace/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringReplace/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringRstrip/",
            "text": "class _TestStringRstrip is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest stripping trailing characters from a string.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringRstrip"
        },
        {
            "location": "/builtin_test-_TestStringRstrip/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringRstrip/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringRstrip/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringRstrip/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringRstrip/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringRstrip/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringRstrip/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringRstrip/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringRunes/",
            "text": "class _TestStringRunes is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest iterating over the unicode codepoints in a string.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringRunes"
        },
        {
            "location": "/builtin_test-_TestStringRunes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringRunes/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringRunes/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringRunes/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringRunes/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringRunes/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringRunes/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringRunes/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringSplit/",
            "text": "class _TestStringSplit is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest String.split\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringSplit"
        },
        {
            "location": "/builtin_test-_TestStringSplit/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringSplit/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringSplit/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringSplit/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringSplit/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringSplit/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringSplit/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringSplit/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringStrip/",
            "text": "class _TestStringStrip is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest stripping leading and trailing characters from a string.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringStrip"
        },
        {
            "location": "/builtin_test-_TestStringStrip/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringStrip/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringStrip/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringStrip/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringStrip/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringStrip/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringStrip/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringStrip/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringSubstring/",
            "text": "class _TestStringSubstring is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest copying range of characters.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringSubstring"
        },
        {
            "location": "/builtin_test-_TestStringSubstring/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringSubstring/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringSubstring/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringSubstring/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringSubstring/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringSubstring/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringSubstring/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringSubstring/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringToBool/",
            "text": "class _TestStringToBool is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest converting strings to Bools.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringToBool"
        },
        {
            "location": "/builtin_test-_TestStringToBool/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringToBool/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringToBool/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringToBool/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringToBool/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringToBool/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringToBool/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringToBool/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringToFloat/",
            "text": "class _TestStringToFloat is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest converting strings to floats.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringToFloat"
        },
        {
            "location": "/builtin_test-_TestStringToFloat/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringToFloat/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringToFloat/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringToFloat/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringToFloat/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringToFloat/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringToFloat/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringToFloat/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringToI8/",
            "text": "class _TestStringToI8 is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest converting strings to I8s.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringToI8"
        },
        {
            "location": "/builtin_test-_TestStringToI8/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringToI8/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringToI8/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringToI8/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringToI8/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringToI8/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringToI8/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringToI8/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringToIntLarge/",
            "text": "class _TestStringToIntLarge is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest converting strings to I\n and U\n types bigger than 8 bit.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringToIntLarge"
        },
        {
            "location": "/builtin_test-_TestStringToIntLarge/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringToIntLarge/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringToIntLarge/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringToIntLarge/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringToIntLarge/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringToIntLarge/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringToIntLarge/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringToIntLarge/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStringToU8/",
            "text": "class _TestStringToU8 is \nUnitTest\n ref\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability iso.\n\n\nTest converting strings to U8s.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringToU8"
        },
        {
            "location": "/builtin_test-_TestStringToU8/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStringToU8/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/builtin_test-_TestStringToU8/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/builtin_test-_TestStringToU8/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/builtin_test-_TestStringToU8/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/builtin_test-_TestStringToU8/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/builtin_test-_TestStringToU8/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/builtin_test-_TestStringToU8/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/builtin_test-_TestStruct/",
            "text": "struct _TestStruct\n\n\nIn package \"builtin_test\".\n\n\nPrivate, default capability ref.\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nvar i: \nU32\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.",
            "title": "struct _TestStruct"
        },
        {
            "location": "/builtin_test-_TestStruct/#public-fields",
            "text": "var i:  U32  val",
            "title": "Public fields"
        },
        {
            "location": "/builtin_test-_TestStruct/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/builtin_test-_TestStruct/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/bureaucracy--index/",
            "text": "No package doc string provided for bureaucracy.",
            "title": "Package"
        },
        {
            "location": "/bureaucracy-Custodian/",
            "text": "actor Custodian\n\n\nIn package \"bureaucracy\".\n\n\nPublic, default capability tag.\n\n\nA Custodian keeps a set of actors to dispose. When the Custodian is disposed,\nit disposes of the actors in its set and then clears the set.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nBehaviours\n\n\nbe apply()\n\n\nbe apply(worker: \nDisposableActor\n tag)\n\n\nPublic.\n\n\nAdd an actor to be disposed of.\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.\n\n\nDispose of the actors in the set and then clear the set.\n\n\nbe remove()\n\n\nbe remove(worker: \nDisposableActor\n tag)\n\n\nPublic.\n\n\nRemoves an actor from the set of things to be disposed.",
            "title": "actor Custodian"
        },
        {
            "location": "/bureaucracy-Custodian/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/bureaucracy-Custodian/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/bureaucracy-Custodian/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/bureaucracy-Custodian/#be-apply",
            "text": "be apply(worker:  DisposableActor  tag)  Public.  Add an actor to be disposed of.",
            "title": "be apply()"
        },
        {
            "location": "/bureaucracy-Custodian/#be-dispose",
            "text": "be dispose()  Public.  Dispose of the actors in the set and then clear the set.",
            "title": "be dispose()"
        },
        {
            "location": "/bureaucracy-Custodian/#be-remove",
            "text": "be remove(worker:  DisposableActor  tag)  Public.  Removes an actor from the set of things to be disposed.",
            "title": "be remove()"
        },
        {
            "location": "/bureaucracy-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"bureaucracy\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/bureaucracy-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/bureaucracy-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/bureaucracy-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/bureaucracy-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/bureaucracy-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/bureaucracy-Registrar/",
            "text": "actor Registrar\n\n\nIn package \"bureaucracy\".\n\n\nPublic, default capability tag.\n\n\nA Registrar keeps a map of lookup string to anything. Generally, this is used\nto keep a directory of long-lived service-providing actors that can be\nlooked up name.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nBehaviours\n\n\nbe _fetch()\n\n\nbe _fetch[A: \nAny\n tag](key: \nString\n val, promise: \nPromise\n[A tag] tag)\n\n\nPrivate.\n\n\nFulfills or rejects the promise.\n\n\nbe remove()\n\n\nbe remove(key: \nString\n val, value: \nAny\n tag)\n\n\nPublic.\n\n\nRemove a mapping. This only takes effect if provided key currently maps to\nthe provided value. If the key maps to some other value (perhaps after\nupdating), the mapping won't be removed.\n\n\nbe update()\n\n\nbe update(key: \nString\n val, value: \nAny\n tag)\n\n\nPublic.\n\n\nAdd, or change, a lookup mapping.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun tag\n apply[optional A: \nAny\n tag](key: \nString\n val): \nPromise\n[A tag] tag\n\n\nPublic.\n\n\nLookup by name. Returns a promise that will be fulfilled with the mapped\nvalue if it exists and is a subtype of A. Otherwise, the promise will be\nrejected.",
            "title": "actor Registrar"
        },
        {
            "location": "/bureaucracy-Registrar/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/bureaucracy-Registrar/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/bureaucracy-Registrar/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/bureaucracy-Registrar/#be-_fetch",
            "text": "be _fetch[A:  Any  tag](key:  String  val, promise:  Promise [A tag] tag)  Private.  Fulfills or rejects the promise.",
            "title": "be _fetch()"
        },
        {
            "location": "/bureaucracy-Registrar/#be-remove",
            "text": "be remove(key:  String  val, value:  Any  tag)  Public.  Remove a mapping. This only takes effect if provided key currently maps to\nthe provided value. If the key maps to some other value (perhaps after\nupdating), the mapping won't be removed.",
            "title": "be remove()"
        },
        {
            "location": "/bureaucracy-Registrar/#be-update",
            "text": "be update(key:  String  val, value:  Any  tag)  Public.  Add, or change, a lookup mapping.",
            "title": "be update()"
        },
        {
            "location": "/bureaucracy-Registrar/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/bureaucracy-Registrar/#fun-apply",
            "text": "fun tag\n apply[optional A:  Any  tag](key:  String  val):  Promise [A tag] tag  Public.  Lookup by name. Returns a promise that will be fulfilled with the mapped\nvalue if it exists and is a subtype of A. Otherwise, the promise will be\nrejected.",
            "title": "fun apply()"
        },
        {
            "location": "/bureaucracy-_TestCustodian/",
            "text": "class _TestCustodian is \nUnitTest\n ref\n\n\nIn package \"bureaucracy\".\n\n\nPrivate, default capability iso.\n\n\nDispose of an actor using a Custodian.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestCustodian"
        },
        {
            "location": "/bureaucracy-_TestCustodian/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/bureaucracy-_TestCustodian/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/bureaucracy-_TestCustodian/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/bureaucracy-_TestCustodian/#fun-apply",
            "text": "fun ref\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/bureaucracy-_TestCustodian/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/bureaucracy-_TestCustodian/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/bureaucracy-_TestCustodian/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/bureaucracy-_TestCustodian/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/bureaucracy-_TestDisposable/",
            "text": "actor _TestDisposable\n\n\nIn package \"bureaucracy\".\n\n\nPrivate, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(h: \nTestHelper\n val)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.",
            "title": "actor _TestDisposable"
        },
        {
            "location": "/bureaucracy-_TestDisposable/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/bureaucracy-_TestDisposable/#new-create",
            "text": "new create(h:  TestHelper  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/bureaucracy-_TestDisposable/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/bureaucracy-_TestDisposable/#be-dispose",
            "text": "be dispose()  Public.",
            "title": "be dispose()"
        },
        {
            "location": "/bureaucracy-_TestRegistrar/",
            "text": "class _TestRegistrar is \nUnitTest\n ref\n\n\nIn package \"bureaucracy\".\n\n\nPrivate, default capability iso.\n\n\nRegister an actor and retrieve it.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestRegistrar"
        },
        {
            "location": "/bureaucracy-_TestRegistrar/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/bureaucracy-_TestRegistrar/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/bureaucracy-_TestRegistrar/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/bureaucracy-_TestRegistrar/#fun-apply",
            "text": "fun ref\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/bureaucracy-_TestRegistrar/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/bureaucracy-_TestRegistrar/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/bureaucracy-_TestRegistrar/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/bureaucracy-_TestRegistrar/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/capsicum--index/",
            "text": "No package doc string provided for capsicum.",
            "title": "Package"
        },
        {
            "location": "/capsicum-Cap/",
            "text": "primitive Cap\n\n\nIn package \"capsicum\".\n\n\nPublic, default capability val.\n\n\nThe Capsicum rights.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun accept()\n\n\nfun box\n accept(): \nU64\n val\n\n\nPublic.\n\n\nfun acl_check()\n\n\nfun box\n acl_check(): \nU64\n val\n\n\nPublic.\n\n\nfun acl_delete()\n\n\nfun box\n acl_delete(): \nU64\n val\n\n\nPublic.\n\n\nfun acl_get()\n\n\nfun box\n acl_get(): \nU64\n val\n\n\nPublic.\n\n\nfun acl_set()\n\n\nfun box\n acl_set(): \nU64\n val\n\n\nPublic.\n\n\nfun bind()\n\n\nfun box\n bind(): \nU64\n val\n\n\nPublic.\n\n\nfun bindat()\n\n\nfun box\n bindat(): \nU64\n val\n\n\nPublic.\n\n\nfun chflagsat()\n\n\nfun box\n chflagsat(): \nU64\n val\n\n\nPublic.\n\n\nfun connect()\n\n\nfun box\n connect(): \nU64\n val\n\n\nPublic.\n\n\nfun connectat()\n\n\nfun box\n connectat(): \nU64\n val\n\n\nPublic.\n\n\nfun creat()\n\n\nfun box\n creat(): \nU64\n val\n\n\nPublic.\n\n\nfun enter()\n\n\nfun box\n enter(): \nBool\n val\n\n\nPublic.\n\n\nThis places the current process into capability mode, a mode of execution\nin which processes may only issue system calls operating on file\ndescriptors or reading limited global system state. Access to global name\nspaces, such as file system or IPC name spaces, is prevented.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nCap\n val): \nBool\n val\n\n\nPublic.\n\n\nfun event()\n\n\nfun box\n event(): \nU64\n val\n\n\nPublic.\n\n\nfun exattr_delete()\n\n\nfun box\n exattr_delete(): \nU64\n val\n\n\nPublic.\n\n\nfun exattr_get()\n\n\nfun box\n exattr_get(): \nU64\n val\n\n\nPublic.\n\n\nfun exattr_list()\n\n\nfun box\n exattr_list(): \nU64\n val\n\n\nPublic.\n\n\nfun exattr_set()\n\n\nfun box\n exattr_set(): \nU64\n val\n\n\nPublic.\n\n\nfun fchdir()\n\n\nfun box\n fchdir(): \nU64\n val\n\n\nPublic.\n\n\nfun fchflags()\n\n\nfun box\n fchflags(): \nU64\n val\n\n\nPublic.\n\n\nfun fchmod()\n\n\nfun box\n fchmod(): \nU64\n val\n\n\nPublic.\n\n\nfun fchmodat()\n\n\nfun box\n fchmodat(): \nU64\n val\n\n\nPublic.\n\n\nfun fchown()\n\n\nfun box\n fchown(): \nU64\n val\n\n\nPublic.\n\n\nfun fchownat()\n\n\nfun box\n fchownat(): \nU64\n val\n\n\nPublic.\n\n\nfun fcntl()\n\n\nfun box\n fcntl(): \nU64\n val\n\n\nPublic.\n\n\nfun fexecve()\n\n\nfun box\n fexecve(): \nU64\n val\n\n\nPublic.\n\n\nfun flock()\n\n\nfun box\n flock(): \nU64\n val\n\n\nPublic.\n\n\nfun fpathconf()\n\n\nfun box\n fpathconf(): \nU64\n val\n\n\nPublic.\n\n\nfun fsck()\n\n\nfun box\n fsck(): \nU64\n val\n\n\nPublic.\n\n\nfun fstat()\n\n\nfun box\n fstat(): \nU64\n val\n\n\nPublic.\n\n\nfun fstatat()\n\n\nfun box\n fstatat(): \nU64\n val\n\n\nPublic.\n\n\nfun fstatfs()\n\n\nfun box\n fstatfs(): \nU64\n val\n\n\nPublic.\n\n\nfun fsync()\n\n\nfun box\n fsync(): \nU64\n val\n\n\nPublic.\n\n\nfun ftruncate()\n\n\nfun box\n ftruncate(): \nU64\n val\n\n\nPublic.\n\n\nfun futimes()\n\n\nfun box\n futimes(): \nU64\n val\n\n\nPublic.\n\n\nfun futimesat()\n\n\nfun box\n futimesat(): \nU64\n val\n\n\nPublic.\n\n\nfun getpeername()\n\n\nfun box\n getpeername(): \nU64\n val\n\n\nPublic.\n\n\nfun getsockname()\n\n\nfun box\n getsockname(): \nU64\n val\n\n\nPublic.\n\n\nfun getsockopt()\n\n\nfun box\n getsockopt(): \nU64\n val\n\n\nPublic.\n\n\nfun _id()\n\n\nfun box\n _id(idx: \nU64\n val, bit: \nU64\n val): \nU64\n val\n\n\nPrivate.\n\n\nBuild a Capsicum ID from an index and a bit position.\n\n\nfun ioctl()\n\n\nfun box\n ioctl(): \nU64\n val\n\n\nPublic.\n\n\nfun kqueue()\n\n\nfun box\n kqueue(): \nU64\n val\n\n\nPublic.\n\n\nfun kqueue_change()\n\n\nfun box\n kqueue_change(): \nU64\n val\n\n\nPublic.\n\n\nfun kqueue_event()\n\n\nfun box\n kqueue_event(): \nU64\n val\n\n\nPublic.\n\n\nfun linkat()\n\n\nfun box\n linkat(): \nU64\n val\n\n\nPublic.\n\n\nfun listen()\n\n\nfun box\n listen(): \nU64\n val\n\n\nPublic.\n\n\nfun lookup()\n\n\nfun box\n lookup(): \nU64\n val\n\n\nPublic.\n\n\nfun mac_get()\n\n\nfun box\n mac_get(): \nU64\n val\n\n\nPublic.\n\n\nfun mac_set()\n\n\nfun box\n mac_set(): \nU64\n val\n\n\nPublic.\n\n\nfun mkdirat()\n\n\nfun box\n mkdirat(): \nU64\n val\n\n\nPublic.\n\n\nfun mkfifoat()\n\n\nfun box\n mkfifoat(): \nU64\n val\n\n\nPublic.\n\n\nfun mknodat()\n\n\nfun box\n mknodat(): \nU64\n val\n\n\nPublic.\n\n\nfun mmap()\n\n\nfun box\n mmap(): \nU64\n val\n\n\nPublic.\n\n\nfun mmap_r()\n\n\nfun box\n mmap_r(): \nU64\n val\n\n\nPublic.\n\n\nfun mmap_rw()\n\n\nfun box\n mmap_rw(): \nU64\n val\n\n\nPublic.\n\n\nfun mmap_rwx()\n\n\nfun box\n mmap_rwx(): \nU64\n val\n\n\nPublic.\n\n\nfun mmap_rx()\n\n\nfun box\n mmap_rx(): \nU64\n val\n\n\nPublic.\n\n\nfun mmap_w()\n\n\nfun box\n mmap_w(): \nU64\n val\n\n\nPublic.\n\n\nfun mmap_wx()\n\n\nfun box\n mmap_wx(): \nU64\n val\n\n\nPublic.\n\n\nfun mmap_x()\n\n\nfun box\n mmap_x(): \nU64\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nCap\n val): \nBool\n val\n\n\nPublic.\n\n\nfun pdgetpid()\n\n\nfun box\n pdgetpid(): \nU64\n val\n\n\nPublic.\n\n\nfun pdkill()\n\n\nfun box\n pdkill(): \nU64\n val\n\n\nPublic.\n\n\nfun pdwait()\n\n\nfun box\n pdwait(): \nU64\n val\n\n\nPublic.\n\n\nfun peeloff()\n\n\nfun box\n peeloff(): \nU64\n val\n\n\nPublic.\n\n\nfun pread()\n\n\nfun box\n pread(): \nU64\n val\n\n\nPublic.\n\n\nfun pwrite()\n\n\nfun box\n pwrite(): \nU64\n val\n\n\nPublic.\n\n\nfun read()\n\n\nfun box\n read(): \nU64\n val\n\n\nPublic.\n\n\nfun recv()\n\n\nfun box\n recv(): \nU64\n val\n\n\nPublic.\n\n\nfun renameat()\n\n\nfun box\n renameat(): \nU64\n val\n\n\nPublic.\n\n\nfun seek()\n\n\nfun box\n seek(): \nU64\n val\n\n\nPublic.\n\n\nfun seek_tell()\n\n\nfun box\n seek_tell(): \nU64\n val\n\n\nPublic.\n\n\nfun sem_getvalue()\n\n\nfun box\n sem_getvalue(): \nU64\n val\n\n\nPublic.\n\n\nfun sem_post()\n\n\nfun box\n sem_post(): \nU64\n val\n\n\nPublic.\n\n\nfun sem_wait()\n\n\nfun box\n sem_wait(): \nU64\n val\n\n\nPublic.\n\n\nfun send()\n\n\nfun box\n send(): \nU64\n val\n\n\nPublic.\n\n\nfun setsockopt()\n\n\nfun box\n setsockopt(): \nU64\n val\n\n\nPublic.\n\n\nfun shutdown()\n\n\nfun box\n shutdown(): \nU64\n val\n\n\nPublic.\n\n\nfun sock_client()\n\n\nfun box\n sock_client(): \nU64\n val\n\n\nPublic.\n\n\nfun sock_server()\n\n\nfun box\n sock_server(): \nU64\n val\n\n\nPublic.\n\n\nfun symlinkat()\n\n\nfun box\n symlinkat(): \nU64\n val\n\n\nPublic.\n\n\nfun ttyhook()\n\n\nfun box\n ttyhook(): \nU64\n val\n\n\nPublic.\n\n\nfun unlinkat()\n\n\nfun box\n unlinkat(): \nU64\n val\n\n\nPublic.\n\n\nfun write()\n\n\nfun box\n write(): \nU64\n val\n\n\nPublic.",
            "title": "primitive Cap"
        },
        {
            "location": "/capsicum-Cap/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/capsicum-Cap/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/capsicum-Cap/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/capsicum-Cap/#fun-accept",
            "text": "fun box\n accept():  U64  val  Public.",
            "title": "fun accept()"
        },
        {
            "location": "/capsicum-Cap/#fun-acl_check",
            "text": "fun box\n acl_check():  U64  val  Public.",
            "title": "fun acl_check()"
        },
        {
            "location": "/capsicum-Cap/#fun-acl_delete",
            "text": "fun box\n acl_delete():  U64  val  Public.",
            "title": "fun acl_delete()"
        },
        {
            "location": "/capsicum-Cap/#fun-acl_get",
            "text": "fun box\n acl_get():  U64  val  Public.",
            "title": "fun acl_get()"
        },
        {
            "location": "/capsicum-Cap/#fun-acl_set",
            "text": "fun box\n acl_set():  U64  val  Public.",
            "title": "fun acl_set()"
        },
        {
            "location": "/capsicum-Cap/#fun-bind",
            "text": "fun box\n bind():  U64  val  Public.",
            "title": "fun bind()"
        },
        {
            "location": "/capsicum-Cap/#fun-bindat",
            "text": "fun box\n bindat():  U64  val  Public.",
            "title": "fun bindat()"
        },
        {
            "location": "/capsicum-Cap/#fun-chflagsat",
            "text": "fun box\n chflagsat():  U64  val  Public.",
            "title": "fun chflagsat()"
        },
        {
            "location": "/capsicum-Cap/#fun-connect",
            "text": "fun box\n connect():  U64  val  Public.",
            "title": "fun connect()"
        },
        {
            "location": "/capsicum-Cap/#fun-connectat",
            "text": "fun box\n connectat():  U64  val  Public.",
            "title": "fun connectat()"
        },
        {
            "location": "/capsicum-Cap/#fun-creat",
            "text": "fun box\n creat():  U64  val  Public.",
            "title": "fun creat()"
        },
        {
            "location": "/capsicum-Cap/#fun-enter",
            "text": "fun box\n enter():  Bool  val  Public.  This places the current process into capability mode, a mode of execution\nin which processes may only issue system calls operating on file\ndescriptors or reading limited global system state. Access to global name\nspaces, such as file system or IPC name spaces, is prevented.",
            "title": "fun enter()"
        },
        {
            "location": "/capsicum-Cap/#fun-eq",
            "text": "fun box\n eq(that:  Cap  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/capsicum-Cap/#fun-event",
            "text": "fun box\n event():  U64  val  Public.",
            "title": "fun event()"
        },
        {
            "location": "/capsicum-Cap/#fun-exattr_delete",
            "text": "fun box\n exattr_delete():  U64  val  Public.",
            "title": "fun exattr_delete()"
        },
        {
            "location": "/capsicum-Cap/#fun-exattr_get",
            "text": "fun box\n exattr_get():  U64  val  Public.",
            "title": "fun exattr_get()"
        },
        {
            "location": "/capsicum-Cap/#fun-exattr_list",
            "text": "fun box\n exattr_list():  U64  val  Public.",
            "title": "fun exattr_list()"
        },
        {
            "location": "/capsicum-Cap/#fun-exattr_set",
            "text": "fun box\n exattr_set():  U64  val  Public.",
            "title": "fun exattr_set()"
        },
        {
            "location": "/capsicum-Cap/#fun-fchdir",
            "text": "fun box\n fchdir():  U64  val  Public.",
            "title": "fun fchdir()"
        },
        {
            "location": "/capsicum-Cap/#fun-fchflags",
            "text": "fun box\n fchflags():  U64  val  Public.",
            "title": "fun fchflags()"
        },
        {
            "location": "/capsicum-Cap/#fun-fchmod",
            "text": "fun box\n fchmod():  U64  val  Public.",
            "title": "fun fchmod()"
        },
        {
            "location": "/capsicum-Cap/#fun-fchmodat",
            "text": "fun box\n fchmodat():  U64  val  Public.",
            "title": "fun fchmodat()"
        },
        {
            "location": "/capsicum-Cap/#fun-fchown",
            "text": "fun box\n fchown():  U64  val  Public.",
            "title": "fun fchown()"
        },
        {
            "location": "/capsicum-Cap/#fun-fchownat",
            "text": "fun box\n fchownat():  U64  val  Public.",
            "title": "fun fchownat()"
        },
        {
            "location": "/capsicum-Cap/#fun-fcntl",
            "text": "fun box\n fcntl():  U64  val  Public.",
            "title": "fun fcntl()"
        },
        {
            "location": "/capsicum-Cap/#fun-fexecve",
            "text": "fun box\n fexecve():  U64  val  Public.",
            "title": "fun fexecve()"
        },
        {
            "location": "/capsicum-Cap/#fun-flock",
            "text": "fun box\n flock():  U64  val  Public.",
            "title": "fun flock()"
        },
        {
            "location": "/capsicum-Cap/#fun-fpathconf",
            "text": "fun box\n fpathconf():  U64  val  Public.",
            "title": "fun fpathconf()"
        },
        {
            "location": "/capsicum-Cap/#fun-fsck",
            "text": "fun box\n fsck():  U64  val  Public.",
            "title": "fun fsck()"
        },
        {
            "location": "/capsicum-Cap/#fun-fstat",
            "text": "fun box\n fstat():  U64  val  Public.",
            "title": "fun fstat()"
        },
        {
            "location": "/capsicum-Cap/#fun-fstatat",
            "text": "fun box\n fstatat():  U64  val  Public.",
            "title": "fun fstatat()"
        },
        {
            "location": "/capsicum-Cap/#fun-fstatfs",
            "text": "fun box\n fstatfs():  U64  val  Public.",
            "title": "fun fstatfs()"
        },
        {
            "location": "/capsicum-Cap/#fun-fsync",
            "text": "fun box\n fsync():  U64  val  Public.",
            "title": "fun fsync()"
        },
        {
            "location": "/capsicum-Cap/#fun-ftruncate",
            "text": "fun box\n ftruncate():  U64  val  Public.",
            "title": "fun ftruncate()"
        },
        {
            "location": "/capsicum-Cap/#fun-futimes",
            "text": "fun box\n futimes():  U64  val  Public.",
            "title": "fun futimes()"
        },
        {
            "location": "/capsicum-Cap/#fun-futimesat",
            "text": "fun box\n futimesat():  U64  val  Public.",
            "title": "fun futimesat()"
        },
        {
            "location": "/capsicum-Cap/#fun-getpeername",
            "text": "fun box\n getpeername():  U64  val  Public.",
            "title": "fun getpeername()"
        },
        {
            "location": "/capsicum-Cap/#fun-getsockname",
            "text": "fun box\n getsockname():  U64  val  Public.",
            "title": "fun getsockname()"
        },
        {
            "location": "/capsicum-Cap/#fun-getsockopt",
            "text": "fun box\n getsockopt():  U64  val  Public.",
            "title": "fun getsockopt()"
        },
        {
            "location": "/capsicum-Cap/#fun-_id",
            "text": "fun box\n _id(idx:  U64  val, bit:  U64  val):  U64  val  Private.  Build a Capsicum ID from an index and a bit position.",
            "title": "fun _id()"
        },
        {
            "location": "/capsicum-Cap/#fun-ioctl",
            "text": "fun box\n ioctl():  U64  val  Public.",
            "title": "fun ioctl()"
        },
        {
            "location": "/capsicum-Cap/#fun-kqueue",
            "text": "fun box\n kqueue():  U64  val  Public.",
            "title": "fun kqueue()"
        },
        {
            "location": "/capsicum-Cap/#fun-kqueue_change",
            "text": "fun box\n kqueue_change():  U64  val  Public.",
            "title": "fun kqueue_change()"
        },
        {
            "location": "/capsicum-Cap/#fun-kqueue_event",
            "text": "fun box\n kqueue_event():  U64  val  Public.",
            "title": "fun kqueue_event()"
        },
        {
            "location": "/capsicum-Cap/#fun-linkat",
            "text": "fun box\n linkat():  U64  val  Public.",
            "title": "fun linkat()"
        },
        {
            "location": "/capsicum-Cap/#fun-listen",
            "text": "fun box\n listen():  U64  val  Public.",
            "title": "fun listen()"
        },
        {
            "location": "/capsicum-Cap/#fun-lookup",
            "text": "fun box\n lookup():  U64  val  Public.",
            "title": "fun lookup()"
        },
        {
            "location": "/capsicum-Cap/#fun-mac_get",
            "text": "fun box\n mac_get():  U64  val  Public.",
            "title": "fun mac_get()"
        },
        {
            "location": "/capsicum-Cap/#fun-mac_set",
            "text": "fun box\n mac_set():  U64  val  Public.",
            "title": "fun mac_set()"
        },
        {
            "location": "/capsicum-Cap/#fun-mkdirat",
            "text": "fun box\n mkdirat():  U64  val  Public.",
            "title": "fun mkdirat()"
        },
        {
            "location": "/capsicum-Cap/#fun-mkfifoat",
            "text": "fun box\n mkfifoat():  U64  val  Public.",
            "title": "fun mkfifoat()"
        },
        {
            "location": "/capsicum-Cap/#fun-mknodat",
            "text": "fun box\n mknodat():  U64  val  Public.",
            "title": "fun mknodat()"
        },
        {
            "location": "/capsicum-Cap/#fun-mmap",
            "text": "fun box\n mmap():  U64  val  Public.",
            "title": "fun mmap()"
        },
        {
            "location": "/capsicum-Cap/#fun-mmap_r",
            "text": "fun box\n mmap_r():  U64  val  Public.",
            "title": "fun mmap_r()"
        },
        {
            "location": "/capsicum-Cap/#fun-mmap_rw",
            "text": "fun box\n mmap_rw():  U64  val  Public.",
            "title": "fun mmap_rw()"
        },
        {
            "location": "/capsicum-Cap/#fun-mmap_rwx",
            "text": "fun box\n mmap_rwx():  U64  val  Public.",
            "title": "fun mmap_rwx()"
        },
        {
            "location": "/capsicum-Cap/#fun-mmap_rx",
            "text": "fun box\n mmap_rx():  U64  val  Public.",
            "title": "fun mmap_rx()"
        },
        {
            "location": "/capsicum-Cap/#fun-mmap_w",
            "text": "fun box\n mmap_w():  U64  val  Public.",
            "title": "fun mmap_w()"
        },
        {
            "location": "/capsicum-Cap/#fun-mmap_wx",
            "text": "fun box\n mmap_wx():  U64  val  Public.",
            "title": "fun mmap_wx()"
        },
        {
            "location": "/capsicum-Cap/#fun-mmap_x",
            "text": "fun box\n mmap_x():  U64  val  Public.",
            "title": "fun mmap_x()"
        },
        {
            "location": "/capsicum-Cap/#fun-ne",
            "text": "fun box\n ne(that:  Cap  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/capsicum-Cap/#fun-pdgetpid",
            "text": "fun box\n pdgetpid():  U64  val  Public.",
            "title": "fun pdgetpid()"
        },
        {
            "location": "/capsicum-Cap/#fun-pdkill",
            "text": "fun box\n pdkill():  U64  val  Public.",
            "title": "fun pdkill()"
        },
        {
            "location": "/capsicum-Cap/#fun-pdwait",
            "text": "fun box\n pdwait():  U64  val  Public.",
            "title": "fun pdwait()"
        },
        {
            "location": "/capsicum-Cap/#fun-peeloff",
            "text": "fun box\n peeloff():  U64  val  Public.",
            "title": "fun peeloff()"
        },
        {
            "location": "/capsicum-Cap/#fun-pread",
            "text": "fun box\n pread():  U64  val  Public.",
            "title": "fun pread()"
        },
        {
            "location": "/capsicum-Cap/#fun-pwrite",
            "text": "fun box\n pwrite():  U64  val  Public.",
            "title": "fun pwrite()"
        },
        {
            "location": "/capsicum-Cap/#fun-read",
            "text": "fun box\n read():  U64  val  Public.",
            "title": "fun read()"
        },
        {
            "location": "/capsicum-Cap/#fun-recv",
            "text": "fun box\n recv():  U64  val  Public.",
            "title": "fun recv()"
        },
        {
            "location": "/capsicum-Cap/#fun-renameat",
            "text": "fun box\n renameat():  U64  val  Public.",
            "title": "fun renameat()"
        },
        {
            "location": "/capsicum-Cap/#fun-seek",
            "text": "fun box\n seek():  U64  val  Public.",
            "title": "fun seek()"
        },
        {
            "location": "/capsicum-Cap/#fun-seek_tell",
            "text": "fun box\n seek_tell():  U64  val  Public.",
            "title": "fun seek_tell()"
        },
        {
            "location": "/capsicum-Cap/#fun-sem_getvalue",
            "text": "fun box\n sem_getvalue():  U64  val  Public.",
            "title": "fun sem_getvalue()"
        },
        {
            "location": "/capsicum-Cap/#fun-sem_post",
            "text": "fun box\n sem_post():  U64  val  Public.",
            "title": "fun sem_post()"
        },
        {
            "location": "/capsicum-Cap/#fun-sem_wait",
            "text": "fun box\n sem_wait():  U64  val  Public.",
            "title": "fun sem_wait()"
        },
        {
            "location": "/capsicum-Cap/#fun-send",
            "text": "fun box\n send():  U64  val  Public.",
            "title": "fun send()"
        },
        {
            "location": "/capsicum-Cap/#fun-setsockopt",
            "text": "fun box\n setsockopt():  U64  val  Public.",
            "title": "fun setsockopt()"
        },
        {
            "location": "/capsicum-Cap/#fun-shutdown",
            "text": "fun box\n shutdown():  U64  val  Public.",
            "title": "fun shutdown()"
        },
        {
            "location": "/capsicum-Cap/#fun-sock_client",
            "text": "fun box\n sock_client():  U64  val  Public.",
            "title": "fun sock_client()"
        },
        {
            "location": "/capsicum-Cap/#fun-sock_server",
            "text": "fun box\n sock_server():  U64  val  Public.",
            "title": "fun sock_server()"
        },
        {
            "location": "/capsicum-Cap/#fun-symlinkat",
            "text": "fun box\n symlinkat():  U64  val  Public.",
            "title": "fun symlinkat()"
        },
        {
            "location": "/capsicum-Cap/#fun-ttyhook",
            "text": "fun box\n ttyhook():  U64  val  Public.",
            "title": "fun ttyhook()"
        },
        {
            "location": "/capsicum-Cap/#fun-unlinkat",
            "text": "fun box\n unlinkat():  U64  val  Public.",
            "title": "fun unlinkat()"
        },
        {
            "location": "/capsicum-Cap/#fun-write",
            "text": "fun box\n write():  U64  val  Public.",
            "title": "fun write()"
        },
        {
            "location": "/capsicum-CapRights/",
            "text": "type CapRights is \nCapRights0\n ref\n\n\nIn package \"capsicum\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type CapRights"
        },
        {
            "location": "/capsicum-CapRights0/",
            "text": "class CapRights0\n\n\nIn package \"capsicum\".\n\n\nPublic, default capability ref.\n\n\nVersion 0 of the capsicum cap_rights_t structure.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nnew descriptor()\n\n\nnew descriptor(fd: \nI32\n val)\n\n\nPublic.\n\n\nnew from()\n\n\nnew from(caps: \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] box)\n\n\nPublic.\n\n\nFunctions\n\n\nfun clear()\n\n\nfun ref\n clear(): \nNone\n val\n\n\nPublic.\n\n\nClear all rights.\n\n\nfun contains()\n\n\nfun box\n contains(that: \nCapRights0\n ref): \nBool\n val\n\n\nPublic.\n\n\nCheck that this is a superset of the rights in that.\n\n\nfun limit()\n\n\nfun box\n limit(fd: \nI32\n val): \nBool\n val\n\n\nPublic.\n\n\nLimits the fd to the encoded rights.\n\n\nfun merge()\n\n\nfun ref\n merge(that: \nCapRights0\n ref): \nNone\n val\n\n\nPublic.\n\n\nMerge the rights in that into this.\n\n\nfun remove()\n\n\nfun ref\n remove(that: \nCapRights0\n ref): \nNone\n val\n\n\nPublic.\n\n\nRemove the rights in that from this.\n\n\nfun set()\n\n\nfun ref\n set(cap: \nU64\n val): \nCapRights0\n ref^\n\n\nPublic.\n\n\nfun unset()\n\n\nfun ref\n unset(cap: \nU64\n val): \nCapRights0\n ref^\n\n\nPublic.\n\n\nfun _version()\n\n\nfun box\n _version(): \nI32\n val\n\n\nPrivate.",
            "title": "class CapRights0"
        },
        {
            "location": "/capsicum-CapRights0/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/capsicum-CapRights0/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/capsicum-CapRights0/#new-descriptor",
            "text": "new descriptor(fd:  I32  val)  Public.",
            "title": "new descriptor()"
        },
        {
            "location": "/capsicum-CapRights0/#new-from",
            "text": "new from(caps:  Flags [(((((((((((((( FileCreate  val |  FileChmod  val) |  FileChown  val) |  FileLink  val) |  FileLookup  val) |  FileMkdir  val) |  FileRead  val) |  FileRemove  val) |  FileRename  val) |  FileSeek  val) |  FileStat  val) |  FileSync  val) |  FileTime  val) |  FileTruncate  val) |  FileWrite  val),  U32  val] box)  Public.",
            "title": "new from()"
        },
        {
            "location": "/capsicum-CapRights0/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/capsicum-CapRights0/#fun-clear",
            "text": "fun ref\n clear():  None  val  Public.  Clear all rights.",
            "title": "fun clear()"
        },
        {
            "location": "/capsicum-CapRights0/#fun-contains",
            "text": "fun box\n contains(that:  CapRights0  ref):  Bool  val  Public.  Check that this is a superset of the rights in that.",
            "title": "fun contains()"
        },
        {
            "location": "/capsicum-CapRights0/#fun-limit",
            "text": "fun box\n limit(fd:  I32  val):  Bool  val  Public.  Limits the fd to the encoded rights.",
            "title": "fun limit()"
        },
        {
            "location": "/capsicum-CapRights0/#fun-merge",
            "text": "fun ref\n merge(that:  CapRights0  ref):  None  val  Public.  Merge the rights in that into this.",
            "title": "fun merge()"
        },
        {
            "location": "/capsicum-CapRights0/#fun-remove",
            "text": "fun ref\n remove(that:  CapRights0  ref):  None  val  Public.  Remove the rights in that from this.",
            "title": "fun remove()"
        },
        {
            "location": "/capsicum-CapRights0/#fun-set",
            "text": "fun ref\n set(cap:  U64  val):  CapRights0  ref^  Public.",
            "title": "fun set()"
        },
        {
            "location": "/capsicum-CapRights0/#fun-unset",
            "text": "fun ref\n unset(cap:  U64  val):  CapRights0  ref^  Public.",
            "title": "fun unset()"
        },
        {
            "location": "/capsicum-CapRights0/#fun-_version",
            "text": "fun box\n _version():  I32  val  Private.",
            "title": "fun _version()"
        },
        {
            "location": "/collections--index/",
            "text": "No package doc string provided for collections.",
            "title": "Package"
        },
        {
            "location": "/collections-Flag/",
            "text": "interface Flag[A: (((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val) \n \nInteger\n[A val] val)]\n\n\nIn package \"collections\".\n\n\nPublic, default capability val.\n\n\nA flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.\n\n\nFunctions\n\n\nfun value()\n\n\nfun box\n value(): A val\n\n\nPublic.",
            "title": "interface Flag"
        },
        {
            "location": "/collections-Flag/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-Flag/#fun-value",
            "text": "fun box\n value(): A val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/collections-Flags/",
            "text": "class Flags[A: \nFlag\n[B val] val, optional B: (((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val) \n \nInteger\n[B val] val)] is \nComparable\n[\nFlags\n[A val, B val] box] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nFlags is a set of flags. The flags that are recognised should be passed as\na union type for type parameter A. For example:\n\n\nprimitive SSE\n  fun value(): U64 =\n 1\n\n\nprimitive AVX\n  fun value(): U64 =\n 2\n\n\nprimitive RDTSCP\n  fun value(): U64 =\n 4\n\n\ntype Features is Flags[(SSE | AVX | RDTSCP)]\n\n\nType parameter B is the unlying field used to store the flags.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun add()\n\n\nfun box\n add(flag: A val): \nFlags\n[A val, B val] iso^\n\n\nPublic.\n\n\nThis with the flag set.\n\n\nfun all()\n\n\nfun ref\n all(): \nFlags\n[A val, B val] ref^\n\n\nPublic.\n\n\nSets all bits, including undefined flags.\n\n\nfun apply()\n\n\nfun box\n apply(flag: A val): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the flag is set.\n\n\nfun clear()\n\n\nfun ref\n clear(): \nFlags\n[A val, B val] ref^\n\n\nPublic.\n\n\nUnsets all flags.\n\n\nfun clone()\n\n\nfun box\n clone(): \nFlags\n[A val, B val] iso^\n\n\nPublic.\n\n\nCreate a clone.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nFlags\n[A val, B val] box): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun difference()\n\n\nfun ref\n difference(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] ref^\n\n\nPublic.\n\n\nThe symmetric difference of this and that.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if this has the same flags set as that.\n\n\nfun flip()\n\n\nfun ref\n flip(flag: A val): \nFlags\n[A val, B val] ref^\n\n\nPublic.\n\n\nSets the flag if it is unset, unsets the flag if it is set.\n\n\nfun ge()\n\n\nfun box\n ge(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.\n\n\nfun gt()\n\n\nfun box\n gt(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.\n\n\nfun intersect()\n\n\nfun ref\n intersect(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] ref^\n\n\nPublic.\n\n\nThe intersection of this and that.\n\n\nfun le()\n\n\nfun box\n le(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.\n\n\nfun lt()\n\n\nfun box\n lt(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFlags\n[A val, B val] box): \nBool\n val\n\n\nPublic.\n\n\nfun op_and()\n\n\nfun box\n op_and(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] iso^\n\n\nPublic.\n\n\nThe intersection of this and that.\n\n\nfun op_or()\n\n\nfun box\n op_or(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] iso^\n\n\nPublic.\n\n\nThe union of this and that.\n\n\nfun op_xor()\n\n\nfun box\n op_xor(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] iso^\n\n\nPublic.\n\n\nThe symmetric difference of this and that.\n\n\nfun remove()\n\n\nfun ref\n remove(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] ref^\n\n\nPublic.\n\n\nUnset flags that are set in that.\n\n\nfun set()\n\n\nfun ref\n set(flag: A val): \nFlags\n[A val, B val] ref^\n\n\nPublic.\n\n\nSets the flag.\n\n\nfun sub()\n\n\nfun box\n sub(flag: A val): \nFlags\n[A val, B val] iso^\n\n\nPublic.\n\n\nThis with the flag unset.\n\n\nfun union()\n\n\nfun ref\n union(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] ref^\n\n\nPublic.\n\n\nThe union of this and that.\n\n\nfun unset()\n\n\nfun ref\n unset(flag: A val): \nFlags\n[A val, B val] ref^\n\n\nPublic.\n\n\nUnsets the flag.\n\n\nfun value()\n\n\nfun box\n value(): B val\n\n\nPublic.\n\n\nReturns the bit encoding of the set flags.\n\n\nfun without()\n\n\nfun box\n without(that: \nFlags\n[A val, B val] box): \nFlags\n[A val, B val] iso^\n\n\nPublic.\n\n\nThe flags in this that are not in that.",
            "title": "class Flags"
        },
        {
            "location": "/collections-Flags/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Flags/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-Flags/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-Flags/#fun-add",
            "text": "fun box\n add(flag: A val):  Flags [A val, B val] iso^  Public.  This with the flag set.",
            "title": "fun add()"
        },
        {
            "location": "/collections-Flags/#fun-all",
            "text": "fun ref\n all():  Flags [A val, B val] ref^  Public.  Sets all bits, including undefined flags.",
            "title": "fun all()"
        },
        {
            "location": "/collections-Flags/#fun-apply",
            "text": "fun box\n apply(flag: A val):  Bool  val  Public.  Returns true if the flag is set.",
            "title": "fun apply()"
        },
        {
            "location": "/collections-Flags/#fun-clear",
            "text": "fun ref\n clear():  Flags [A val, B val] ref^  Public.  Unsets all flags.",
            "title": "fun clear()"
        },
        {
            "location": "/collections-Flags/#fun-clone",
            "text": "fun box\n clone():  Flags [A val, B val] iso^  Public.  Create a clone.",
            "title": "fun clone()"
        },
        {
            "location": "/collections-Flags/#fun-compare",
            "text": "fun box\n compare(that:  Flags [A val, B val] box): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/collections-Flags/#fun-difference",
            "text": "fun ref\n difference(that:  Flags [A val, B val] box):  Flags [A val, B val] ref^  Public.  The symmetric difference of this and that.",
            "title": "fun difference()"
        },
        {
            "location": "/collections-Flags/#fun-eq",
            "text": "fun box\n eq(that:  Flags [A val, B val] box):  Bool  val  Public.  Returns true if this has the same flags set as that.",
            "title": "fun eq()"
        },
        {
            "location": "/collections-Flags/#fun-flip",
            "text": "fun ref\n flip(flag: A val):  Flags [A val, B val] ref^  Public.  Sets the flag if it is unset, unsets the flag if it is set.",
            "title": "fun flip()"
        },
        {
            "location": "/collections-Flags/#fun-ge",
            "text": "fun box\n ge(that:  Flags [A val, B val] box):  Bool  val  Public.  Returns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.",
            "title": "fun ge()"
        },
        {
            "location": "/collections-Flags/#fun-gt",
            "text": "fun box\n gt(that:  Flags [A val, B val] box):  Bool  val  Public.  Returns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.",
            "title": "fun gt()"
        },
        {
            "location": "/collections-Flags/#fun-intersect",
            "text": "fun ref\n intersect(that:  Flags [A val, B val] box):  Flags [A val, B val] ref^  Public.  The intersection of this and that.",
            "title": "fun intersect()"
        },
        {
            "location": "/collections-Flags/#fun-le",
            "text": "fun box\n le(that:  Flags [A val, B val] box):  Bool  val  Public.  Returns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.",
            "title": "fun le()"
        },
        {
            "location": "/collections-Flags/#fun-lt",
            "text": "fun box\n lt(that:  Flags [A val, B val] box):  Bool  val  Public.  Returns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.",
            "title": "fun lt()"
        },
        {
            "location": "/collections-Flags/#fun-ne",
            "text": "fun box\n ne(that:  Flags [A val, B val] box):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/collections-Flags/#fun-op_and",
            "text": "fun box\n op_and(that:  Flags [A val, B val] box):  Flags [A val, B val] iso^  Public.  The intersection of this and that.",
            "title": "fun op_and()"
        },
        {
            "location": "/collections-Flags/#fun-op_or",
            "text": "fun box\n op_or(that:  Flags [A val, B val] box):  Flags [A val, B val] iso^  Public.  The union of this and that.",
            "title": "fun op_or()"
        },
        {
            "location": "/collections-Flags/#fun-op_xor",
            "text": "fun box\n op_xor(that:  Flags [A val, B val] box):  Flags [A val, B val] iso^  Public.  The symmetric difference of this and that.",
            "title": "fun op_xor()"
        },
        {
            "location": "/collections-Flags/#fun-remove",
            "text": "fun ref\n remove(that:  Flags [A val, B val] box):  Flags [A val, B val] ref^  Public.  Unset flags that are set in that.",
            "title": "fun remove()"
        },
        {
            "location": "/collections-Flags/#fun-set",
            "text": "fun ref\n set(flag: A val):  Flags [A val, B val] ref^  Public.  Sets the flag.",
            "title": "fun set()"
        },
        {
            "location": "/collections-Flags/#fun-sub",
            "text": "fun box\n sub(flag: A val):  Flags [A val, B val] iso^  Public.  This with the flag unset.",
            "title": "fun sub()"
        },
        {
            "location": "/collections-Flags/#fun-union",
            "text": "fun ref\n union(that:  Flags [A val, B val] box):  Flags [A val, B val] ref^  Public.  The union of this and that.",
            "title": "fun union()"
        },
        {
            "location": "/collections-Flags/#fun-unset",
            "text": "fun ref\n unset(flag: A val):  Flags [A val, B val] ref^  Public.  Unsets the flag.",
            "title": "fun unset()"
        },
        {
            "location": "/collections-Flags/#fun-value",
            "text": "fun box\n value(): B val  Public.  Returns the bit encoding of the set flags.",
            "title": "fun value()"
        },
        {
            "location": "/collections-Flags/#fun-without",
            "text": "fun box\n without(that:  Flags [A val, B val] box):  Flags [A val, B val] iso^  Public.  The flags in this that are not in that.",
            "title": "fun without()"
        },
        {
            "location": "/collections-HashByteSeq/",
            "text": "primitive HashByteSeq\n\n\nIn package \"collections\".\n\n\nPublic, default capability val.\n\n\nHash and equality functions for arbitrary ByteSeq.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(x: \nByteSeq\n val, y: \nByteSeq\n val): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(x: \nByteSeq\n val): \nU64\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nHashByteSeq\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive HashByteSeq"
        },
        {
            "location": "/collections-HashByteSeq/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashByteSeq/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-HashByteSeq/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-HashByteSeq/#fun-eq",
            "text": "fun box\n eq(x:  ByteSeq  val, y:  ByteSeq  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/collections-HashByteSeq/#fun-hash",
            "text": "fun box\n hash(x:  ByteSeq  val):  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/collections-HashByteSeq/#fun-ne",
            "text": "fun box\n ne(that:  HashByteSeq  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/collections-HashEq/",
            "text": "primitive HashEq[A: (\nHashable\n #read \n \nEquatable\n[A #read] #read)] is \nHashFunction\n[A #read] val\n\n\nIn package \"collections\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(x: box-\nA #read, y: box-\nA #read): \nBool\n val\n\n\nPublic.\n\n\nUse the structural equality function from the type parameter.\n\n\nfun hash()\n\n\nfun box\n hash(x: box-\nA #read): \nU64\n val\n\n\nPublic.\n\n\nUse the hash function from the type parameter.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nHashEq\n[A #read] val): \nBool\n val\n\n\nPublic.",
            "title": "primitive HashEq"
        },
        {
            "location": "/collections-HashEq/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashEq/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-HashEq/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-HashEq/#fun-eq",
            "text": "fun box\n eq(x: box- A #read, y: box- A #read):  Bool  val  Public.  Use the structural equality function from the type parameter.",
            "title": "fun eq()"
        },
        {
            "location": "/collections-HashEq/#fun-hash",
            "text": "fun box\n hash(x: box- A #read):  U64  val  Public.  Use the hash function from the type parameter.",
            "title": "fun hash()"
        },
        {
            "location": "/collections-HashEq/#fun-ne",
            "text": "fun box\n ne(that:  HashEq [A #read] val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/collections-HashFunction/",
            "text": "interface HashFunction[A: A]\n\n\nIn package \"collections\".\n\n\nPublic, default capability val.\n\n\nA pluggable hash function.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nData structures create instances internally. Use a primitive if possible.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(x: box-\nA!, y: box-\nA!): \nBool\n val\n\n\nPublic.\n\n\nDetermine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.\n\n\nfun hash()\n\n\nfun box\n hash(x: box-\nA!): \nU64\n val\n\n\nPublic.\n\n\nCalculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.",
            "title": "interface HashFunction"
        },
        {
            "location": "/collections-HashFunction/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashFunction/#new-create",
            "text": "new create()  Public.  Data structures create instances internally. Use a primitive if possible.",
            "title": "new create()"
        },
        {
            "location": "/collections-HashFunction/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-HashFunction/#fun-eq",
            "text": "fun box\n eq(x: box- A!, y: box- A!):  Bool  val  Public.  Determine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.",
            "title": "fun eq()"
        },
        {
            "location": "/collections-HashFunction/#fun-hash",
            "text": "fun box\n hash(x: box- A!):  U64  val  Public.  Calculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.",
            "title": "fun hash()"
        },
        {
            "location": "/collections-HashIs/",
            "text": "primitive HashIs[A: A] is \nHashFunction\n[A] val\n\n\nIn package \"collections\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(x: box-\nA!, y: box-\nA!): \nBool\n val\n\n\nPublic.\n\n\nDetermine equality by identity rather than structurally.\n\n\nfun hash()\n\n\nfun box\n hash(x: box-\nA!): \nU64\n val\n\n\nPublic.\n\n\nHash the identity rather than the contents.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nHashIs\n[A] val): \nBool\n val\n\n\nPublic.",
            "title": "primitive HashIs"
        },
        {
            "location": "/collections-HashIs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashIs/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-HashIs/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-HashIs/#fun-eq",
            "text": "fun box\n eq(x: box- A!, y: box- A!):  Bool  val  Public.  Determine equality by identity rather than structurally.",
            "title": "fun eq()"
        },
        {
            "location": "/collections-HashIs/#fun-hash",
            "text": "fun box\n hash(x: box- A!):  U64  val  Public.  Hash the identity rather than the contents.",
            "title": "fun hash()"
        },
        {
            "location": "/collections-HashIs/#fun-ne",
            "text": "fun box\n ne(that:  HashIs [A] val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/collections-HashMap/",
            "text": "class HashMap[K: K, V: V, H: \nHashFunction\n[K] val]\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nA quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional prealloc: \nUSize\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun add()\n\n\nfun box\n add[optional H2: \nHashFunction\n[this-\nK!] val](key: this-\nK!, value: this-\nV!): \nHashMap\n[this-\nK!, this-\nV!, H2 val] ref^\n\n\nPublic.\n\n\nThis with the new (key, value) mapping.\n\n\nfun apply()\n\n\nfun box\n apply(key: box-\nK!): this-\nV ?\n\n\nPublic, may raise an error.\n\n\nGets a value from the map. Raises an error if no such item exists.\n\n\nfun clear()\n\n\nfun ref\n clear(): \nHashMap\n[K, V, H val] ref^\n\n\nPublic.\n\n\nRemove all entries.\n\n\nfun clone()\n\n\nfun box\n clone[optional H2: \nHashFunction\n[this-\nK!] val](): \nHashMap\n[this-\nK!, this-\nV!, H2 val] ref^\n\n\nPublic.\n\n\nCreate a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.\n\n\nfun compact()\n\n\nfun ref\n compact(): \nHashMap\n[K, V, H val] ref^\n\n\nPublic.\n\n\nMinimise the memory used for the map.\n\n\nfun concat()\n\n\nfun ref\n concat(iter: \nIterator\n[(K^ , V^)] ref): \nNone\n val\n\n\nPublic.\n\n\nAdd K, V pairs from the iterator to the map.\n\n\nfun index()\n\n\nfun box\n index(i: \nUSize\n val): (this-\nK , this-\nV) ?\n\n\nPublic, may raise an error.\n\n\nReturns the key and value at a given index.\nRaise an error if the index is not populated.\n\n\nfun insert()\n\n\nfun ref\n insert(key: K, value: V): V ?\n\n\nPublic, may raise an error.\n\n\nSet a value in the map. Returns the new value, allowing reuse.\n\n\nfun keys()\n\n\nfun box\n keys(): \nMapKeys\n[K, V, H val, this-\nHashMap\n[K, V, H val] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator over the keys.\n\n\nfun next_index()\n\n\nfun box\n next_index(optional prev: \nUSize\n val): \nUSize\n val ?\n\n\nPublic, may raise an error.\n\n\nGiven an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.\n\n\nfun pairs()\n\n\nfun box\n pairs(): \nMapPairs\n[K, V, H val, this-\nHashMap\n[K, V, H val] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator over the keys and values.\n\n\nfun remove()\n\n\nfun ref\n remove(key: box-\nK!): (K^ , V^) ?\n\n\nPublic, may raise an error.\n\n\nDelete a value from the map and return it. Raises an error if there was no\nvalue for the given key.\n\n\nfun _resize()\n\n\nfun ref\n _resize(len: \nUSize\n val): \nNone\n val\n\n\nPrivate.\n\n\nChange the available space.\n\n\nfun _search()\n\n\nfun box\n _search(key: box-\nK!): (\nUSize\n val , \nBool\n val)\n\n\nPrivate.\n\n\nReturn a slot number and whether or not it's currently occupied.\n\n\nfun size()\n\n\nfun box\n size(): \nUSize\n val\n\n\nPublic.\n\n\nThe number of items in the map.\n\n\nfun space()\n\n\nfun box\n space(): \nUSize\n val\n\n\nPublic.\n\n\nThe available space in the map. Resize will happen when\nsize / space \n= 0.75.\n\n\nfun sub()\n\n\nfun box\n sub[optional H2: \nHashFunction\n[this-\nK!] val](key: this-\nK!, value: this-\nV!): \nHashMap\n[this-\nK!, this-\nV!, H2 val] ref^\n\n\nPublic.\n\n\nThis without the given key.\n\n\nfun update()\n\n\nfun ref\n update(key: K, value: V): (V^ | \nNone\n val)\n\n\nPublic.\n\n\nSets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.\n\n\nfun values()\n\n\nfun box\n values(): \nMapValues\n[K, V, H val, this-\nHashMap\n[K, V, H val] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator over the values.",
            "title": "class HashMap"
        },
        {
            "location": "/collections-HashMap/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashMap/#new-create",
            "text": "new create(optional prealloc:  USize  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-HashMap/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-HashMap/#fun-add",
            "text": "fun box\n add[optional H2:  HashFunction [this- K!] val](key: this- K!, value: this- V!):  HashMap [this- K!, this- V!, H2 val] ref^  Public.  This with the new (key, value) mapping.",
            "title": "fun add()"
        },
        {
            "location": "/collections-HashMap/#fun-apply",
            "text": "fun box\n apply(key: box- K!): this- V ?  Public, may raise an error.  Gets a value from the map. Raises an error if no such item exists.",
            "title": "fun apply()"
        },
        {
            "location": "/collections-HashMap/#fun-clear",
            "text": "fun ref\n clear():  HashMap [K, V, H val] ref^  Public.  Remove all entries.",
            "title": "fun clear()"
        },
        {
            "location": "/collections-HashMap/#fun-clone",
            "text": "fun box\n clone[optional H2:  HashFunction [this- K!] val]():  HashMap [this- K!, this- V!, H2 val] ref^  Public.  Create a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.",
            "title": "fun clone()"
        },
        {
            "location": "/collections-HashMap/#fun-compact",
            "text": "fun ref\n compact():  HashMap [K, V, H val] ref^  Public.  Minimise the memory used for the map.",
            "title": "fun compact()"
        },
        {
            "location": "/collections-HashMap/#fun-concat",
            "text": "fun ref\n concat(iter:  Iterator [(K^ , V^)] ref):  None  val  Public.  Add K, V pairs from the iterator to the map.",
            "title": "fun concat()"
        },
        {
            "location": "/collections-HashMap/#fun-index",
            "text": "fun box\n index(i:  USize  val): (this- K , this- V) ?  Public, may raise an error.  Returns the key and value at a given index.\nRaise an error if the index is not populated.",
            "title": "fun index()"
        },
        {
            "location": "/collections-HashMap/#fun-insert",
            "text": "fun ref\n insert(key: K, value: V): V ?  Public, may raise an error.  Set a value in the map. Returns the new value, allowing reuse.",
            "title": "fun insert()"
        },
        {
            "location": "/collections-HashMap/#fun-keys",
            "text": "fun box\n keys():  MapKeys [K, V, H val, this- HashMap [K, V, H val] ref] ref^  Public.  Return an iterator over the keys.",
            "title": "fun keys()"
        },
        {
            "location": "/collections-HashMap/#fun-next_index",
            "text": "fun box\n next_index(optional prev:  USize  val):  USize  val ?  Public, may raise an error.  Given an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.",
            "title": "fun next_index()"
        },
        {
            "location": "/collections-HashMap/#fun-pairs",
            "text": "fun box\n pairs():  MapPairs [K, V, H val, this- HashMap [K, V, H val] ref] ref^  Public.  Return an iterator over the keys and values.",
            "title": "fun pairs()"
        },
        {
            "location": "/collections-HashMap/#fun-remove",
            "text": "fun ref\n remove(key: box- K!): (K^ , V^) ?  Public, may raise an error.  Delete a value from the map and return it. Raises an error if there was no\nvalue for the given key.",
            "title": "fun remove()"
        },
        {
            "location": "/collections-HashMap/#fun-_resize",
            "text": "fun ref\n _resize(len:  USize  val):  None  val  Private.  Change the available space.",
            "title": "fun _resize()"
        },
        {
            "location": "/collections-HashMap/#fun-_search",
            "text": "fun box\n _search(key: box- K!): ( USize  val ,  Bool  val)  Private.  Return a slot number and whether or not it's currently occupied.",
            "title": "fun _search()"
        },
        {
            "location": "/collections-HashMap/#fun-size",
            "text": "fun box\n size():  USize  val  Public.  The number of items in the map.",
            "title": "fun size()"
        },
        {
            "location": "/collections-HashMap/#fun-space",
            "text": "fun box\n space():  USize  val  Public.  The available space in the map. Resize will happen when\nsize / space  = 0.75.",
            "title": "fun space()"
        },
        {
            "location": "/collections-HashMap/#fun-sub",
            "text": "fun box\n sub[optional H2:  HashFunction [this- K!] val](key: this- K!, value: this- V!):  HashMap [this- K!, this- V!, H2 val] ref^  Public.  This without the given key.",
            "title": "fun sub()"
        },
        {
            "location": "/collections-HashMap/#fun-update",
            "text": "fun ref\n update(key: K, value: V): (V^ |  None  val)  Public.  Sets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.",
            "title": "fun update()"
        },
        {
            "location": "/collections-HashMap/#fun-values",
            "text": "fun box\n values():  MapValues [K, V, H val, this- HashMap [K, V, H val] ref] ref^  Public.  Return an iterator over the values.",
            "title": "fun values()"
        },
        {
            "location": "/collections-HashSet/",
            "text": "class HashSet[A: A, H: \nHashFunction\n[A!] val] is \nComparable\n[\nHashSet\n[A, H val] box] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nA set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional prealloc: \nUSize\n val)\n\n\nPublic.\n\n\nDefaults to a prealloc of 8.\n\n\nFunctions\n\n\nfun add()\n\n\nfun box\n add[optional K: \nHashFunction\n[this-\nA!] val](value: this-\nA!): \nHashSet\n[this-\nA!, K val] ref^\n\n\nPublic.\n\n\nAdd a value to the set.\n\n\nfun apply()\n\n\nfun box\n apply(value: box-\nA!): this-\nA ?\n\n\nPublic, may raise an error.\n\n\nReturn the value if its in the set, otherwise raise an error.\n\n\nfun clear()\n\n\nfun ref\n clear(): \nHashSet\n[A, H val] ref^\n\n\nPublic.\n\n\nRemove all elements from the set.\n\n\nfun clone()\n\n\nfun box\n clone[optional K: \nHashFunction\n[this-\nA!] val](): \nHashSet\n[this-\nA!, K val] ref^\n\n\nPublic.\n\n\nCreate a clone. The element type may be different due to aliasing and\nviewpoint adaptation.\n\n\nfun compare()\n\n\nfun box\n compare(that: \nHashSet\n[A, H val] box): ((\nLess\n val | \nEqual\n val) | \nGreater\n val)\n\n\nPublic.\n\n\nfun difference()\n\n\nfun ref\n difference(that: \nIterator\n[A^] ref): \nHashSet\n[A, H val] ref^\n\n\nPublic.\n\n\nRemove elements in this which are also in that. Add elements in that which\nare not in this.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the sets contain the same elements.\n\n\nfun extract()\n\n\nfun ref\n extract(value: box-\nA!): A^ ?\n\n\nPublic, may raise an error.\n\n\nRemove a value from the set and return it. Raises an error if the value\nwasn't in the set.\n\n\nfun ge()\n\n\nfun box\n ge(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if every element in that is also in this.\n\n\nfun gt()\n\n\nfun box\n gt(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if every element in that is also in this, and this has more\nelements than that.\n\n\nfun index()\n\n\nfun box\n index(i: \nUSize\n val): this-\nA ?\n\n\nPublic, may raise an error.\n\n\nReturns the value at a given index. Raise an error if the index is not\npopulated.\n\n\nfun intersect()\n\n\nfun ref\n intersect[optional K: \nHashFunction\n[box-\nA!] val](that: \nHashSet\n[box-\nA!, K val] ref): \nHashSet\n[A, H val] ref^\n\n\nPublic.\n\n\nRemove everything that isn't in that.\n\n\nfun le()\n\n\nfun box\n le(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if every element in this is also in that.\n\n\nfun lt()\n\n\nfun box\n lt(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns true if every element in this is also in that, and this has fewer\nelements than that.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nHashSet\n[A, H val] box): \nBool\n val\n\n\nPublic.\n\n\nReturns false if the sets contain the same elements.\n\n\nfun next_index()\n\n\nfun box\n next_index(optional prev: \nUSize\n val): \nUSize\n val ?\n\n\nPublic, may raise an error.\n\n\nGiven an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.\n\n\nfun op_and()\n\n\nfun box\n op_and[optional K: \nHashFunction\n[this-\nA!] val](that: this-\nHashSet\n[A, H val] ref): \nHashSet\n[this-\nA!, K val] ref^\n\n\nPublic.\n\n\nCreate a set with the elements that are in both this and that.\n\n\nfun op_or()\n\n\nfun box\n op_or[optional K: \nHashFunction\n[this-\nA!] val](that: this-\nHashSet\n[A, H val] ref): \nHashSet\n[this-\nA!, K val] ref^\n\n\nPublic.\n\n\nCreate a set with the elements of both this and that.\n\n\nfun op_xor()\n\n\nfun box\n op_xor[optional K: \nHashFunction\n[this-\nA!] val](that: this-\nHashSet\n[A, H val] ref): \nHashSet\n[this-\nA!, K val] ref^\n\n\nPublic.\n\n\nCreate a set with the elements that are in either set but not both.\n\n\nfun remove()\n\n\nfun ref\n remove(that: \nIterator\n[box-\nA!] ref): \nHashSet\n[A, H val] ref^\n\n\nPublic.\n\n\nRemove everything that is in that.\n\n\nfun set()\n\n\nfun ref\n set(value: A): \nHashSet\n[A, H val] ref^\n\n\nPublic.\n\n\nAdd a value to the set.\n\n\nfun size()\n\n\nfun box\n size(): \nUSize\n val\n\n\nPublic.\n\n\nThe number of items in the set.\n\n\nfun space()\n\n\nfun box\n space(): \nUSize\n val\n\n\nPublic.\n\n\nThe available space in the set.\n\n\nfun sub()\n\n\nfun box\n sub[optional K: \nHashFunction\n[this-\nA!] val](value: box-\nthis-\nA!): \nHashSet\n[this-\nA!, K val] ref^\n\n\nPublic.\n\n\nRemove a value from the set.\n\n\nfun union()\n\n\nfun ref\n union(that: \nIterator\n[A^] ref): \nHashSet\n[A, H val] ref^\n\n\nPublic.\n\n\nAdd everything in that to the set.\n\n\nfun unset()\n\n\nfun ref\n unset(value: box-\nA!): \nHashSet\n[A, H val] ref^\n\n\nPublic.\n\n\nRemove a value from the set.\n\n\nfun values()\n\n\nfun box\n values(): \nSetValues\n[A, H val, this-\nHashSet\n[A, H val] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator over the values.\n\n\nfun without()\n\n\nfun box\n without[optional K: \nHashFunction\n[this-\nA!] val](that: this-\nHashSet\n[A, H val] ref): \nHashSet\n[this-\nA!, K val] ref^\n\n\nPublic.\n\n\nCreate a set with the elements of this that are not in that.",
            "title": "class HashSet"
        },
        {
            "location": "/collections-HashSet/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-HashSet/#new-create",
            "text": "new create(optional prealloc:  USize  val)  Public.  Defaults to a prealloc of 8.",
            "title": "new create()"
        },
        {
            "location": "/collections-HashSet/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-HashSet/#fun-add",
            "text": "fun box\n add[optional K:  HashFunction [this- A!] val](value: this- A!):  HashSet [this- A!, K val] ref^  Public.  Add a value to the set.",
            "title": "fun add()"
        },
        {
            "location": "/collections-HashSet/#fun-apply",
            "text": "fun box\n apply(value: box- A!): this- A ?  Public, may raise an error.  Return the value if its in the set, otherwise raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/collections-HashSet/#fun-clear",
            "text": "fun ref\n clear():  HashSet [A, H val] ref^  Public.  Remove all elements from the set.",
            "title": "fun clear()"
        },
        {
            "location": "/collections-HashSet/#fun-clone",
            "text": "fun box\n clone[optional K:  HashFunction [this- A!] val]():  HashSet [this- A!, K val] ref^  Public.  Create a clone. The element type may be different due to aliasing and\nviewpoint adaptation.",
            "title": "fun clone()"
        },
        {
            "location": "/collections-HashSet/#fun-compare",
            "text": "fun box\n compare(that:  HashSet [A, H val] box): (( Less  val |  Equal  val) |  Greater  val)  Public.",
            "title": "fun compare()"
        },
        {
            "location": "/collections-HashSet/#fun-difference",
            "text": "fun ref\n difference(that:  Iterator [A^] ref):  HashSet [A, H val] ref^  Public.  Remove elements in this which are also in that. Add elements in that which\nare not in this.",
            "title": "fun difference()"
        },
        {
            "location": "/collections-HashSet/#fun-eq",
            "text": "fun box\n eq(that:  HashSet [A, H val] box):  Bool  val  Public.  Returns true if the sets contain the same elements.",
            "title": "fun eq()"
        },
        {
            "location": "/collections-HashSet/#fun-extract",
            "text": "fun ref\n extract(value: box- A!): A^ ?  Public, may raise an error.  Remove a value from the set and return it. Raises an error if the value\nwasn't in the set.",
            "title": "fun extract()"
        },
        {
            "location": "/collections-HashSet/#fun-ge",
            "text": "fun box\n ge(that:  HashSet [A, H val] box):  Bool  val  Public.  Returns true if every element in that is also in this.",
            "title": "fun ge()"
        },
        {
            "location": "/collections-HashSet/#fun-gt",
            "text": "fun box\n gt(that:  HashSet [A, H val] box):  Bool  val  Public.  Returns true if every element in that is also in this, and this has more\nelements than that.",
            "title": "fun gt()"
        },
        {
            "location": "/collections-HashSet/#fun-index",
            "text": "fun box\n index(i:  USize  val): this- A ?  Public, may raise an error.  Returns the value at a given index. Raise an error if the index is not\npopulated.",
            "title": "fun index()"
        },
        {
            "location": "/collections-HashSet/#fun-intersect",
            "text": "fun ref\n intersect[optional K:  HashFunction [box- A!] val](that:  HashSet [box- A!, K val] ref):  HashSet [A, H val] ref^  Public.  Remove everything that isn't in that.",
            "title": "fun intersect()"
        },
        {
            "location": "/collections-HashSet/#fun-le",
            "text": "fun box\n le(that:  HashSet [A, H val] box):  Bool  val  Public.  Returns true if every element in this is also in that.",
            "title": "fun le()"
        },
        {
            "location": "/collections-HashSet/#fun-lt",
            "text": "fun box\n lt(that:  HashSet [A, H val] box):  Bool  val  Public.  Returns true if every element in this is also in that, and this has fewer\nelements than that.",
            "title": "fun lt()"
        },
        {
            "location": "/collections-HashSet/#fun-ne",
            "text": "fun box\n ne(that:  HashSet [A, H val] box):  Bool  val  Public.  Returns false if the sets contain the same elements.",
            "title": "fun ne()"
        },
        {
            "location": "/collections-HashSet/#fun-next_index",
            "text": "fun box\n next_index(optional prev:  USize  val):  USize  val ?  Public, may raise an error.  Given an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.",
            "title": "fun next_index()"
        },
        {
            "location": "/collections-HashSet/#fun-op_and",
            "text": "fun box\n op_and[optional K:  HashFunction [this- A!] val](that: this- HashSet [A, H val] ref):  HashSet [this- A!, K val] ref^  Public.  Create a set with the elements that are in both this and that.",
            "title": "fun op_and()"
        },
        {
            "location": "/collections-HashSet/#fun-op_or",
            "text": "fun box\n op_or[optional K:  HashFunction [this- A!] val](that: this- HashSet [A, H val] ref):  HashSet [this- A!, K val] ref^  Public.  Create a set with the elements of both this and that.",
            "title": "fun op_or()"
        },
        {
            "location": "/collections-HashSet/#fun-op_xor",
            "text": "fun box\n op_xor[optional K:  HashFunction [this- A!] val](that: this- HashSet [A, H val] ref):  HashSet [this- A!, K val] ref^  Public.  Create a set with the elements that are in either set but not both.",
            "title": "fun op_xor()"
        },
        {
            "location": "/collections-HashSet/#fun-remove",
            "text": "fun ref\n remove(that:  Iterator [box- A!] ref):  HashSet [A, H val] ref^  Public.  Remove everything that is in that.",
            "title": "fun remove()"
        },
        {
            "location": "/collections-HashSet/#fun-set",
            "text": "fun ref\n set(value: A):  HashSet [A, H val] ref^  Public.  Add a value to the set.",
            "title": "fun set()"
        },
        {
            "location": "/collections-HashSet/#fun-size",
            "text": "fun box\n size():  USize  val  Public.  The number of items in the set.",
            "title": "fun size()"
        },
        {
            "location": "/collections-HashSet/#fun-space",
            "text": "fun box\n space():  USize  val  Public.  The available space in the set.",
            "title": "fun space()"
        },
        {
            "location": "/collections-HashSet/#fun-sub",
            "text": "fun box\n sub[optional K:  HashFunction [this- A!] val](value: box- this- A!):  HashSet [this- A!, K val] ref^  Public.  Remove a value from the set.",
            "title": "fun sub()"
        },
        {
            "location": "/collections-HashSet/#fun-union",
            "text": "fun ref\n union(that:  Iterator [A^] ref):  HashSet [A, H val] ref^  Public.  Add everything in that to the set.",
            "title": "fun union()"
        },
        {
            "location": "/collections-HashSet/#fun-unset",
            "text": "fun ref\n unset(value: box- A!):  HashSet [A, H val] ref^  Public.  Remove a value from the set.",
            "title": "fun unset()"
        },
        {
            "location": "/collections-HashSet/#fun-values",
            "text": "fun box\n values():  SetValues [A, H val, this- HashSet [A, H val] ref] ref^  Public.  Return an iterator over the values.",
            "title": "fun values()"
        },
        {
            "location": "/collections-HashSet/#fun-without",
            "text": "fun box\n without[optional K:  HashFunction [this- A!] val](that: this- HashSet [A, H val] ref):  HashSet [this- A!, K val] ref^  Public.  Create a set with the elements of this that are not in that.",
            "title": "fun without()"
        },
        {
            "location": "/collections-Hashable/",
            "text": "interface Hashable\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nAnything with a hash method is hashable.\n\n\nFunctions\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.",
            "title": "interface Hashable"
        },
        {
            "location": "/collections-Hashable/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-Hashable/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/collections-List/",
            "text": "class List[A: A] is \nSeq\n[A] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nA doubly linked list.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional len: \nUSize\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun append()\n\n\nfun ref\n append(seq: \nReadSeq\n[A] box, optional offset: \nUSize\n val, optional len: \nUSize\n val): \nList\n[A] ref^\n\n\nPublic.\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun append_list()\n\n\nfun ref\n append_list(that: \nList\n[A] ref): \nList\n[A] ref^\n\n\nPublic.\n\n\nRemove all nodes from that and append them to this.\n\n\nfun append_node()\n\n\nfun ref\n append_node(node: \nListNode\n[A] ref): \nList\n[A] ref^\n\n\nPublic.\n\n\nAdds a node to the tail of the list.\n\n\nfun apply()\n\n\nfun box\n apply(optional i: \nUSize\n val): this-\nA ?\n\n\nPublic, may raise an error.\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun clear()\n\n\nfun ref\n clear(): \nList\n[A] ref^\n\n\nPublic.\n\n\nEmpties the list.\n\n\nfun clone()\n\n\nfun box\n clone(): \nList\n[this-\nA!] ref^\n\n\nPublic.\n\n\nClone the list.\n\n\nfun _decrement()\n\n\nfun ref\n _decrement(): \nNone\n val\n\n\nPrivate.\n\n\nfun head()\n\n\nfun box\n head(): this-\nListNode\n[A] ref ?\n\n\nPublic, may raise an error.\n\n\nGet the head of the list.\n\n\nfun _increment()\n\n\nfun ref\n _increment(): \nNone\n val\n\n\nPrivate.\n\n\nfun index()\n\n\nfun box\n index(i: \nUSize\n val): this-\nListNode\n[A] ref ?\n\n\nPublic, may raise an error.\n\n\nGets the i-th node, raising an error if the index is out of bounds.\n\n\nfun nodes()\n\n\nfun box\n nodes(): \nListNodes\n[A, this-\nListNode\n[A] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun pop()\n\n\nfun ref\n pop(): A^ ?\n\n\nPublic, may raise an error.\n\n\nRemoves a value from the tail of the list.\n\n\nfun prepend_list()\n\n\nfun ref\n prepend_list(that: \nList\n[A] ref): \nList\n[A] ref^\n\n\nPublic.\n\n\nRemove all nodes from that and prepend them to this.\n\n\nfun prepend_node()\n\n\nfun ref\n prepend_node(node: \nListNode\n[A] ref): \nList\n[A] ref^\n\n\nPublic.\n\n\nAdds a node to the head of the list.\n\n\nfun push()\n\n\nfun ref\n push(a: A): \nList\n[A] ref^\n\n\nPublic.\n\n\nAdds a value to the tail of the list.\n\n\nfun remove()\n\n\nfun ref\n remove(i: \nUSize\n val): \nList\n[A] ref^ ?\n\n\nPublic, may raise an error.\n\n\nRemove the i-th node, raising an error if the index is out of bounds.\n\n\nfun reserve()\n\n\nfun ref\n reserve(len: \nUSize\n val): \nList\n[A] ref^\n\n\nPublic.\n\n\nDo nothing, but be compatible with Seq.\n\n\nfun rnodes()\n\n\nfun box\n rnodes(): \nListNodes\n[A, this-\nListNode\n[A] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun rvalues()\n\n\nfun box\n rvalues(): \nListValues\n[A, this-\nListNode\n[A] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator on the values in the list.\n\n\nfun _set_both()\n\n\nfun ref\n _set_both(node: \nListNode\n[A] ref): \nNone\n val\n\n\nPrivate.\n\n\nfun _set_head()\n\n\nfun ref\n _set_head(head': (\nListNode\n[A] ref | \nNone\n val)): \nNone\n val\n\n\nPrivate.\n\n\nfun _set_tail()\n\n\nfun ref\n _set_tail(tail': (\nListNode\n[A] ref | \nNone\n val)): \nNone\n val\n\n\nPrivate.\n\n\nfun shift()\n\n\nfun ref\n shift(): A^ ?\n\n\nPublic, may raise an error.\n\n\nRemoves a value from the head of the list.\n\n\nfun size()\n\n\nfun box\n size(): \nUSize\n val\n\n\nPublic.\n\n\nReturns the number of items in the list.\n\n\nfun tail()\n\n\nfun box\n tail(): this-\nListNode\n[A] ref ?\n\n\nPublic, may raise an error.\n\n\nGet the tail of the list.\n\n\nfun truncate()\n\n\nfun ref\n truncate(len: \nUSize\n val): \nList\n[A] ref^\n\n\nPublic.\n\n\nTruncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.\n\n\nfun unshift()\n\n\nfun ref\n unshift(a: A): \nList\n[A] ref^\n\n\nPublic.\n\n\nAdds a value to the head of the list.\n\n\nfun update()\n\n\nfun ref\n update(i: \nUSize\n val, value: A): A^ ?\n\n\nPublic, may raise an error.\n\n\nChange the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.\n\n\nfun values()\n\n\nfun box\n values(): \nListValues\n[A, this-\nListNode\n[A] ref] ref^\n\n\nPublic.\n\n\nReturn an iterator on the values in the list.",
            "title": "class List"
        },
        {
            "location": "/collections-List/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-List/#new-create",
            "text": "new create(optional len:  USize  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-List/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-List/#fun-append",
            "text": "fun ref\n append(seq:  ReadSeq [A] box, optional offset:  USize  val, optional len:  USize  val):  List [A] ref^  Public.  Append the elements from a sequence, starting from the given offset.",
            "title": "fun append()"
        },
        {
            "location": "/collections-List/#fun-append_list",
            "text": "fun ref\n append_list(that:  List [A] ref):  List [A] ref^  Public.  Remove all nodes from that and append them to this.",
            "title": "fun append_list()"
        },
        {
            "location": "/collections-List/#fun-append_node",
            "text": "fun ref\n append_node(node:  ListNode [A] ref):  List [A] ref^  Public.  Adds a node to the tail of the list.",
            "title": "fun append_node()"
        },
        {
            "location": "/collections-List/#fun-apply",
            "text": "fun box\n apply(optional i:  USize  val): this- A ?  Public, may raise an error.  Get the i-th element, raising an error if the index is out of bounds.",
            "title": "fun apply()"
        },
        {
            "location": "/collections-List/#fun-clear",
            "text": "fun ref\n clear():  List [A] ref^  Public.  Empties the list.",
            "title": "fun clear()"
        },
        {
            "location": "/collections-List/#fun-clone",
            "text": "fun box\n clone():  List [this- A!] ref^  Public.  Clone the list.",
            "title": "fun clone()"
        },
        {
            "location": "/collections-List/#fun-_decrement",
            "text": "fun ref\n _decrement():  None  val  Private.",
            "title": "fun _decrement()"
        },
        {
            "location": "/collections-List/#fun-head",
            "text": "fun box\n head(): this- ListNode [A] ref ?  Public, may raise an error.  Get the head of the list.",
            "title": "fun head()"
        },
        {
            "location": "/collections-List/#fun-_increment",
            "text": "fun ref\n _increment():  None  val  Private.",
            "title": "fun _increment()"
        },
        {
            "location": "/collections-List/#fun-index",
            "text": "fun box\n index(i:  USize  val): this- ListNode [A] ref ?  Public, may raise an error.  Gets the i-th node, raising an error if the index is out of bounds.",
            "title": "fun index()"
        },
        {
            "location": "/collections-List/#fun-nodes",
            "text": "fun box\n nodes():  ListNodes [A, this- ListNode [A] ref] ref^  Public.  Return an iterator on the nodes in the list.",
            "title": "fun nodes()"
        },
        {
            "location": "/collections-List/#fun-pop",
            "text": "fun ref\n pop(): A^ ?  Public, may raise an error.  Removes a value from the tail of the list.",
            "title": "fun pop()"
        },
        {
            "location": "/collections-List/#fun-prepend_list",
            "text": "fun ref\n prepend_list(that:  List [A] ref):  List [A] ref^  Public.  Remove all nodes from that and prepend them to this.",
            "title": "fun prepend_list()"
        },
        {
            "location": "/collections-List/#fun-prepend_node",
            "text": "fun ref\n prepend_node(node:  ListNode [A] ref):  List [A] ref^  Public.  Adds a node to the head of the list.",
            "title": "fun prepend_node()"
        },
        {
            "location": "/collections-List/#fun-push",
            "text": "fun ref\n push(a: A):  List [A] ref^  Public.  Adds a value to the tail of the list.",
            "title": "fun push()"
        },
        {
            "location": "/collections-List/#fun-remove",
            "text": "fun ref\n remove(i:  USize  val):  List [A] ref^ ?  Public, may raise an error.  Remove the i-th node, raising an error if the index is out of bounds.",
            "title": "fun remove()"
        },
        {
            "location": "/collections-List/#fun-reserve",
            "text": "fun ref\n reserve(len:  USize  val):  List [A] ref^  Public.  Do nothing, but be compatible with Seq.",
            "title": "fun reserve()"
        },
        {
            "location": "/collections-List/#fun-rnodes",
            "text": "fun box\n rnodes():  ListNodes [A, this- ListNode [A] ref] ref^  Public.  Return an iterator on the nodes in the list.",
            "title": "fun rnodes()"
        },
        {
            "location": "/collections-List/#fun-rvalues",
            "text": "fun box\n rvalues():  ListValues [A, this- ListNode [A] ref] ref^  Public.  Return an iterator on the values in the list.",
            "title": "fun rvalues()"
        },
        {
            "location": "/collections-List/#fun-_set_both",
            "text": "fun ref\n _set_both(node:  ListNode [A] ref):  None  val  Private.",
            "title": "fun _set_both()"
        },
        {
            "location": "/collections-List/#fun-_set_head",
            "text": "fun ref\n _set_head(head': ( ListNode [A] ref |  None  val)):  None  val  Private.",
            "title": "fun _set_head()"
        },
        {
            "location": "/collections-List/#fun-_set_tail",
            "text": "fun ref\n _set_tail(tail': ( ListNode [A] ref |  None  val)):  None  val  Private.",
            "title": "fun _set_tail()"
        },
        {
            "location": "/collections-List/#fun-shift",
            "text": "fun ref\n shift(): A^ ?  Public, may raise an error.  Removes a value from the head of the list.",
            "title": "fun shift()"
        },
        {
            "location": "/collections-List/#fun-size",
            "text": "fun box\n size():  USize  val  Public.  Returns the number of items in the list.",
            "title": "fun size()"
        },
        {
            "location": "/collections-List/#fun-tail",
            "text": "fun box\n tail(): this- ListNode [A] ref ?  Public, may raise an error.  Get the tail of the list.",
            "title": "fun tail()"
        },
        {
            "location": "/collections-List/#fun-truncate",
            "text": "fun ref\n truncate(len:  USize  val):  List [A] ref^  Public.  Truncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.",
            "title": "fun truncate()"
        },
        {
            "location": "/collections-List/#fun-unshift",
            "text": "fun ref\n unshift(a: A):  List [A] ref^  Public.  Adds a value to the head of the list.",
            "title": "fun unshift()"
        },
        {
            "location": "/collections-List/#fun-update",
            "text": "fun ref\n update(i:  USize  val, value: A): A^ ?  Public, may raise an error.  Change the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.",
            "title": "fun update()"
        },
        {
            "location": "/collections-List/#fun-values",
            "text": "fun box\n values():  ListValues [A, this- ListNode [A] ref] ref^  Public.  Return an iterator on the values in the list.",
            "title": "fun values()"
        },
        {
            "location": "/collections-ListNode/",
            "text": "class ListNode[A: A]\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nA node in a list.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional item: (A | \nNone\n val))\n\n\nPublic.\n\n\nFunctions\n\n\nfun append()\n\n\nfun ref\n append(that: \nListNode\n[A] ref): \nListNode\n[A] ref^\n\n\nPublic.\n\n\nAppend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is appended.\n\n\nfun apply()\n\n\nfun box\n apply(): this-\nA ?\n\n\nPublic, may raise an error.\n\n\nReturn the item, if we have one, otherwise raise an error.\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nReturn true if there is a next node.\n\n\nfun has_prev()\n\n\nfun box\n has_prev(): \nBool\n val\n\n\nPublic.\n\n\nReturn true if there is a previous node.\n\n\nfun next()\n\n\nfun box\n next(): (this-\nListNode\n[A] ref | \nNone\n val)\n\n\nPublic.\n\n\nReturn the next node.\n\n\nfun pop()\n\n\nfun ref\n pop(): A^ ?\n\n\nPublic, may raise an error.\n\n\nRemove the item from the node, if we have one, otherwise raise an error.\n\n\nfun prepend()\n\n\nfun ref\n prepend(that: \nListNode\n[A] ref): \nListNode\n[A] ref^\n\n\nPublic.\n\n\nPrepend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is prepended.\n\n\nfun prev()\n\n\nfun box\n prev(): (this-\nListNode\n[A] ref | \nNone\n val)\n\n\nPublic.\n\n\nReturn the previous node.\n\n\nfun remove()\n\n\nfun ref\n remove(): \nListNode\n[A] ref^\n\n\nPublic.\n\n\nRemove a node from a list.\n\n\nfun _set_list()\n\n\nfun ref\n _set_list(list: \nList\n[A] ref): \nListNode\n[A] ref^\n\n\nPrivate.\n\n\nMake this node the only node on the given list.\n\n\nfun update()\n\n\nfun ref\n update(value: (A | \nNone\n val)): A^ ?\n\n\nPublic, may raise an error.\n\n\nReplace the item and return the previous one. Raise an error if we have no\nprevious value.",
            "title": "class ListNode"
        },
        {
            "location": "/collections-ListNode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListNode/#new-create",
            "text": "new create(optional item: (A |  None  val))  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-ListNode/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-ListNode/#fun-append",
            "text": "fun ref\n append(that:  ListNode [A] ref):  ListNode [A] ref^  Public.  Append a node to this one. If  that  is already in a list, it is removed\nbefore it is appended.",
            "title": "fun append()"
        },
        {
            "location": "/collections-ListNode/#fun-apply",
            "text": "fun box\n apply(): this- A ?  Public, may raise an error.  Return the item, if we have one, otherwise raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/collections-ListNode/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.  Return true if there is a next node.",
            "title": "fun has_next()"
        },
        {
            "location": "/collections-ListNode/#fun-has_prev",
            "text": "fun box\n has_prev():  Bool  val  Public.  Return true if there is a previous node.",
            "title": "fun has_prev()"
        },
        {
            "location": "/collections-ListNode/#fun-next",
            "text": "fun box\n next(): (this- ListNode [A] ref |  None  val)  Public.  Return the next node.",
            "title": "fun next()"
        },
        {
            "location": "/collections-ListNode/#fun-pop",
            "text": "fun ref\n pop(): A^ ?  Public, may raise an error.  Remove the item from the node, if we have one, otherwise raise an error.",
            "title": "fun pop()"
        },
        {
            "location": "/collections-ListNode/#fun-prepend",
            "text": "fun ref\n prepend(that:  ListNode [A] ref):  ListNode [A] ref^  Public.  Prepend a node to this one. If  that  is already in a list, it is removed\nbefore it is prepended.",
            "title": "fun prepend()"
        },
        {
            "location": "/collections-ListNode/#fun-prev",
            "text": "fun box\n prev(): (this- ListNode [A] ref |  None  val)  Public.  Return the previous node.",
            "title": "fun prev()"
        },
        {
            "location": "/collections-ListNode/#fun-remove",
            "text": "fun ref\n remove():  ListNode [A] ref^  Public.  Remove a node from a list.",
            "title": "fun remove()"
        },
        {
            "location": "/collections-ListNode/#fun-_set_list",
            "text": "fun ref\n _set_list(list:  List [A] ref):  ListNode [A] ref^  Private.  Make this node the only node on the given list.",
            "title": "fun _set_list()"
        },
        {
            "location": "/collections-ListNode/#fun-update",
            "text": "fun ref\n update(value: (A |  None  val)): A^ ?  Public, may raise an error.  Replace the item and return the previous one. Raise an error if we have no\nprevious value.",
            "title": "fun update()"
        },
        {
            "location": "/collections-ListNodes/",
            "text": "class ListNodes[A: A, N: \nListNode\n[A] #read] is \nIterator\n[N #read] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nIterate over the nodes in a list.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(head: (N #read | \nNone\n val), optional reverse: \nBool\n val)\n\n\nPublic.\n\n\nKeep the next list node to be examined.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nIf we have a list node, we have more values.\n\n\nfun next()\n\n\nfun ref\n next(): N #read ?\n\n\nPublic, may raise an error.\n\n\nGet the list node and replace it with the next one.",
            "title": "class ListNodes"
        },
        {
            "location": "/collections-ListNodes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListNodes/#new-create",
            "text": "new create(head: (N #read |  None  val), optional reverse:  Bool  val)  Public.  Keep the next list node to be examined.",
            "title": "new create()"
        },
        {
            "location": "/collections-ListNodes/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-ListNodes/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.  If we have a list node, we have more values.",
            "title": "fun has_next()"
        },
        {
            "location": "/collections-ListNodes/#fun-next",
            "text": "fun ref\n next(): N #read ?  Public, may raise an error.  Get the list node and replace it with the next one.",
            "title": "fun next()"
        },
        {
            "location": "/collections-ListValues/",
            "text": "class ListValues[A: A, N: \nListNode\n[A] #read] is \nIterator\n[N #read-\nA] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nIterate over the values in a list.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(head: (N #read | \nNone\n val), optional reverse: \nBool\n val)\n\n\nPublic.\n\n\nKeep the next list node to be examined.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nIf we have a list node, we have more values.\n\n\nfun next()\n\n\nfun ref\n next(): N #read-\nA ?\n\n\nPublic, may raise an error.\n\n\nGet the value of the list node and replace it with the next one.",
            "title": "class ListValues"
        },
        {
            "location": "/collections-ListValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-ListValues/#new-create",
            "text": "new create(head: (N #read |  None  val), optional reverse:  Bool  val)  Public.  Keep the next list node to be examined.",
            "title": "new create()"
        },
        {
            "location": "/collections-ListValues/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-ListValues/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.  If we have a list node, we have more values.",
            "title": "fun has_next()"
        },
        {
            "location": "/collections-ListValues/#fun-next",
            "text": "fun ref\n next(): N #read- A ?  Public, may raise an error.  Get the value of the list node and replace it with the next one.",
            "title": "fun next()"
        },
        {
            "location": "/collections-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/collections-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/collections-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/collections-Map/",
            "text": "type Map[K: (\nHashable\n #read \n \nEquatable\n[K #read] #read), V: V] is \nHashMap\n[K #read, V, \nHashEq\n[K #read] val] ref\n\n\nIn package \"collections\".\n\n\nPublic.\n\n\nThis is a map that uses structural equality on the key.",
            "title": "type Map"
        },
        {
            "location": "/collections-_MapDeleted/",
            "text": "primitive _MapDeleted\n\n\nIn package \"collections\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_MapDeleted\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_MapDeleted\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _MapDeleted"
        },
        {
            "location": "/collections-_MapDeleted/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-_MapDeleted/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-_MapDeleted/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-_MapDeleted/#fun-eq",
            "text": "fun box\n eq(that:  _MapDeleted  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/collections-_MapDeleted/#fun-ne",
            "text": "fun box\n ne(that:  _MapDeleted  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/collections-_MapEmpty/",
            "text": "primitive _MapEmpty\n\n\nIn package \"collections\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_MapEmpty\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_MapEmpty\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _MapEmpty"
        },
        {
            "location": "/collections-_MapEmpty/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-_MapEmpty/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-_MapEmpty/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-_MapEmpty/#fun-eq",
            "text": "fun box\n eq(that:  _MapEmpty  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/collections-_MapEmpty/#fun-ne",
            "text": "fun box\n ne(that:  _MapEmpty  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/collections-MapIs/",
            "text": "type MapIs[K: K, V: V] is \nHashMap\n[K, V, \nHashIs\n[K] val] ref\n\n\nIn package \"collections\".\n\n\nPublic.\n\n\nThis is a map that uses identity comparison on the key.",
            "title": "type MapIs"
        },
        {
            "location": "/collections-MapKeys/",
            "text": "class MapKeys[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H val] #read] is \nIterator\n[M #read-\nK] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nAn iterator over the keys in a map.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(map: M #read)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun next()\n\n\nfun ref\n next(): M #read-\nK ?\n\n\nPublic, may raise an error.\n\n\nReturns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.",
            "title": "class MapKeys"
        },
        {
            "location": "/collections-MapKeys/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapKeys/#new-create",
            "text": "new create(map: M #read)  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-MapKeys/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-MapKeys/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.",
            "title": "fun has_next()"
        },
        {
            "location": "/collections-MapKeys/#fun-next",
            "text": "fun ref\n next(): M #read- K ?  Public, may raise an error.  Returns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.",
            "title": "fun next()"
        },
        {
            "location": "/collections-MapPairs/",
            "text": "class MapPairs[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H val] #read] is \nIterator\n[(M #read-\nK , M #read-\nV)] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nAn iterator over the keys and values in a map.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(map: M #read)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun next()\n\n\nfun ref\n next(): (M #read-\nK , M #read-\nV) ?\n\n\nPublic, may raise an error.\n\n\nReturns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.",
            "title": "class MapPairs"
        },
        {
            "location": "/collections-MapPairs/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapPairs/#new-create",
            "text": "new create(map: M #read)  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-MapPairs/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-MapPairs/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.",
            "title": "fun has_next()"
        },
        {
            "location": "/collections-MapPairs/#fun-next",
            "text": "fun ref\n next(): (M #read- K , M #read- V) ?  Public, may raise an error.  Returns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.",
            "title": "fun next()"
        },
        {
            "location": "/collections-MapValues/",
            "text": "class MapValues[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H val] #read] is \nIterator\n[M #read-\nV] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nAn iterator over the values in a map.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(map: M #read)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun next()\n\n\nfun ref\n next(): M #read-\nV ?\n\n\nPublic, may raise an error.\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.",
            "title": "class MapValues"
        },
        {
            "location": "/collections-MapValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-MapValues/#new-create",
            "text": "new create(map: M #read)  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-MapValues/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-MapValues/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.",
            "title": "fun has_next()"
        },
        {
            "location": "/collections-MapValues/#fun-next",
            "text": "fun ref\n next(): M #read- V ?  Public, may raise an error.  Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.",
            "title": "fun next()"
        },
        {
            "location": "/collections-Range/",
            "text": "class Range[optional A: (\nReal\n[A val] val \n ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)))] is \nIterator\n[A val] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nProduces [min, max).\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(min: A val, max: A val, optional inc: A val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun next()\n\n\nfun ref\n next(): A val\n\n\nPublic.\n\n\nfun rewind()\n\n\nfun ref\n rewind(): \nNone\n val\n\n\nPublic.",
            "title": "class Range"
        },
        {
            "location": "/collections-Range/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Range/#new-create",
            "text": "new create(min: A val, max: A val, optional inc: A val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-Range/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-Range/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/collections-Range/#fun-next",
            "text": "fun ref\n next(): A val  Public.",
            "title": "fun next()"
        },
        {
            "location": "/collections-Range/#fun-rewind",
            "text": "fun ref\n rewind():  None  val  Public.",
            "title": "fun rewind()"
        },
        {
            "location": "/collections-Reverse/",
            "text": "class Reverse[optional A: (\nReal\n[A val] val \n ((((((((\nI8\n val | \nI16\n val) | \nI32\n val) | \nI64\n val) | \nI128\n val) | \nILong\n val) | \nISize\n val) | ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val)) | (\nF32\n val | \nF64\n val)))] is \nIterator\n[A val] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nProduces [max, min].\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(max: A val, min: A val, optional dec: A val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun next()\n\n\nfun ref\n next(): A val\n\n\nPublic.\n\n\nfun rewind()\n\n\nfun ref\n rewind(): \nNone\n val\n\n\nPublic.",
            "title": "class Reverse"
        },
        {
            "location": "/collections-Reverse/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-Reverse/#new-create",
            "text": "new create(max: A val, min: A val, optional dec: A val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-Reverse/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-Reverse/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/collections-Reverse/#fun-next",
            "text": "fun ref\n next(): A val  Public.",
            "title": "fun next()"
        },
        {
            "location": "/collections-Reverse/#fun-rewind",
            "text": "fun ref\n rewind():  None  val  Public.",
            "title": "fun rewind()"
        },
        {
            "location": "/collections-RingBuffer/",
            "text": "class RingBuffer[A: A]\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nA ring buffer.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(len: \nUSize\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(i: \nUSize\n val): this-\nA ?\n\n\nPublic, may raise an error.\n\n\nGet the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.\n\n\nfun clear()\n\n\nfun ref\n clear(): \nRingBuffer\n[A] ref^\n\n\nPublic.\n\n\nClear the queue.\n\n\nfun head()\n\n\nfun box\n head(): \nUSize\n val ?\n\n\nPublic, may raise an error.\n\n\nThe first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.\n\n\nfun push()\n\n\nfun ref\n push(value: A): \nRingBuffer\n[A] ref^\n\n\nPublic.\n\n\nAdd an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring.\n\n\nfun size()\n\n\nfun box\n size(): \nUSize\n val\n\n\nPublic.\n\n\nThe number of elements that have been added to the ring.\n\n\nfun space()\n\n\nfun box\n space(): \nUSize\n val\n\n\nPublic.\n\n\nThe available space in the ring.",
            "title": "class RingBuffer"
        },
        {
            "location": "/collections-RingBuffer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-RingBuffer/#new-create",
            "text": "new create(len:  USize  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-RingBuffer/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-RingBuffer/#fun-apply",
            "text": "fun box\n apply(i:  USize  val): this- A ?  Public, may raise an error.  Get the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/collections-RingBuffer/#fun-clear",
            "text": "fun ref\n clear():  RingBuffer [A] ref^  Public.  Clear the queue.",
            "title": "fun clear()"
        },
        {
            "location": "/collections-RingBuffer/#fun-head",
            "text": "fun box\n head():  USize  val ?  Public, may raise an error.  The first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.",
            "title": "fun head()"
        },
        {
            "location": "/collections-RingBuffer/#fun-push",
            "text": "fun ref\n push(value: A):  RingBuffer [A] ref^  Public.  Add an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring.",
            "title": "fun push()"
        },
        {
            "location": "/collections-RingBuffer/#fun-size",
            "text": "fun box\n size():  USize  val  Public.  The number of elements that have been added to the ring.",
            "title": "fun size()"
        },
        {
            "location": "/collections-RingBuffer/#fun-space",
            "text": "fun box\n space():  USize  val  Public.  The available space in the ring.",
            "title": "fun space()"
        },
        {
            "location": "/collections-Set/",
            "text": "type Set[A: (\nHashable\n #read \n \nEquatable\n[A #read] #read)] is \nHashSet\n[A #read, \nHashEq\n[A #read] val] ref\n\n\nIn package \"collections\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type Set"
        },
        {
            "location": "/collections-SetIs/",
            "text": "type SetIs[A: A] is \nHashSet\n[A, \nHashIs\n[A!] val] ref\n\n\nIn package \"collections\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type SetIs"
        },
        {
            "location": "/collections-SetValues/",
            "text": "class SetValues[A: A, H: \nHashFunction\n[A!] val, S: \nHashSet\n[A, H val] #read] is \nIterator\n[S #read-\nA] ref\n\n\nIn package \"collections\".\n\n\nPublic, default capability ref.\n\n\nAn iterator over the values in a set.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(set: S #read)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.\n\n\nfun next()\n\n\nfun ref\n next(): S #read-\nA ?\n\n\nPublic, may raise an error.\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.",
            "title": "class SetValues"
        },
        {
            "location": "/collections-SetValues/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-SetValues/#new-create",
            "text": "new create(set: S #read)  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-SetValues/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-SetValues/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.  True if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.",
            "title": "fun has_next()"
        },
        {
            "location": "/collections-SetValues/#fun-next",
            "text": "fun ref\n next(): S #read- A ?  Public, may raise an error.  Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.",
            "title": "fun next()"
        },
        {
            "location": "/collections-_TestList/",
            "text": "class _TestList is \nUnitTest\n ref\n\n\nIn package \"collections\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestList"
        },
        {
            "location": "/collections-_TestList/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-_TestList/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-_TestList/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-_TestList/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/collections-_TestList/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/collections-_TestList/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/collections-_TestList/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/collections-_TestList/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/collections-_TestRing/",
            "text": "class _TestRing is \nUnitTest\n ref\n\n\nIn package \"collections\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestRing"
        },
        {
            "location": "/collections-_TestRing/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/collections-_TestRing/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/collections-_TestRing/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/collections-_TestRing/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/collections-_TestRing/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/collections-_TestRing/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/collections-_TestRing/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/collections-_TestRing/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/debug--index/",
            "text": "No package doc string provided for debug.",
            "title": "Package"
        },
        {
            "location": "/debug-Debug/",
            "text": "primitive Debug\n\n\nIn package \"debug\".\n\n\nPublic, default capability val.\n\n\nThis is a debug only print utility.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(msg: (\nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box | \nReadSeq\n[\nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box] box), optional sep: (\nString\n val | \nString\n val), optional stream: ((\nDebugOut\n val | \nDebugErr\n val) | (\nDebugOut\n val | \nDebugErr\n val))): ((\nNone\n val | \nNone\n val) | \nNone\n val)\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nDebug\n val): \nBool\n val\n\n\nPublic.\n\n\nfun err()\n\n\nfun box\n err(optional msg: \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nNone\n val\n\n\nPublic.\n\n\nIf platform is debug configured, print message to standard error\n\n\nfun ne()\n\n\nfun box\n ne(that: \nDebug\n val): \nBool\n val\n\n\nPublic.\n\n\nfun out()\n\n\nfun box\n out(optional msg: \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box): \nNone\n val\n\n\nPublic.\n\n\nIf platform is debug configured, print message to standard output\n\n\nfun _print()\n\n\nfun box\n _print(msg: \nString\n val, stream: (\nDebugOut\n val | \nDebugErr\n val)): \nNone\n val\n\n\nPrivate.\n\n\nfun _stream()\n\n\nfun box\n _stream(stream: (\nDebugOut\n val | \nDebugErr\n val)): \nPointer\n[\nU8\n val] ref ?\n\n\nPrivate, may raise an error.",
            "title": "primitive Debug"
        },
        {
            "location": "/debug-Debug/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/debug-Debug/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/debug-Debug/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/debug-Debug/#fun-apply",
            "text": "fun box\n apply(msg: ( Stringable [ FormatDefault  val,  PrefixDefault  val] box |  ReadSeq [ Stringable [ FormatDefault  val,  PrefixDefault  val] box] box), optional sep: ( String  val |  String  val), optional stream: (( DebugOut  val |  DebugErr  val) | ( DebugOut  val |  DebugErr  val))): (( None  val |  None  val) |  None  val)  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/debug-Debug/#fun-eq",
            "text": "fun box\n eq(that:  Debug  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/debug-Debug/#fun-err",
            "text": "fun box\n err(optional msg:  Stringable [ FormatDefault  val,  PrefixDefault  val] box):  None  val  Public.  If platform is debug configured, print message to standard error",
            "title": "fun err()"
        },
        {
            "location": "/debug-Debug/#fun-ne",
            "text": "fun box\n ne(that:  Debug  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/debug-Debug/#fun-out",
            "text": "fun box\n out(optional msg:  Stringable [ FormatDefault  val,  PrefixDefault  val] box):  None  val  Public.  If platform is debug configured, print message to standard output",
            "title": "fun out()"
        },
        {
            "location": "/debug-Debug/#fun-_print",
            "text": "fun box\n _print(msg:  String  val, stream: ( DebugOut  val |  DebugErr  val)):  None  val  Private.",
            "title": "fun _print()"
        },
        {
            "location": "/debug-Debug/#fun-_stream",
            "text": "fun box\n _stream(stream: ( DebugOut  val |  DebugErr  val)):  Pointer [ U8  val] ref ?  Private, may raise an error.",
            "title": "fun _stream()"
        },
        {
            "location": "/debug-DebugErr/",
            "text": "primitive DebugErr\n\n\nIn package \"debug\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nDebugErr\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nDebugErr\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive DebugErr"
        },
        {
            "location": "/debug-DebugErr/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/debug-DebugErr/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/debug-DebugErr/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/debug-DebugErr/#fun-eq",
            "text": "fun box\n eq(that:  DebugErr  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/debug-DebugErr/#fun-ne",
            "text": "fun box\n ne(that:  DebugErr  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/debug-DebugOut/",
            "text": "primitive DebugOut\n\n\nIn package \"debug\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nDebugOut\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nDebugOut\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive DebugOut"
        },
        {
            "location": "/debug-DebugOut/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/debug-DebugOut/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/debug-DebugOut/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/debug-DebugOut/#fun-eq",
            "text": "fun box\n eq(that:  DebugOut  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/debug-DebugOut/#fun-ne",
            "text": "fun box\n ne(that:  DebugOut  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/debug-DebugStream/",
            "text": "type DebugStream is (\nDebugOut\n val | \nDebugErr\n val)\n\n\nIn package \"debug\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type DebugStream"
        },
        {
            "location": "/encode-base64--index/",
            "text": "No package doc string provided for encode/base64.",
            "title": "Package"
        },
        {
            "location": "/encode-base64-Base64/",
            "text": "primitive Base64\n\n\nIn package \"encode/base64\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun decode()\n\n\nfun box\n decode[optional A: \nSeq\n[\nU8\n val] iso](data: \nByteSeq\n box, optional at62: \nU8\n val, optional at63: \nU8\n val, optional pad: \nU8\n val): A iso^ ?\n\n\nPublic, may raise an error.\n\n\nConfigurable decoding. The defaults are for RFC 4648. Missing padding is\nnot an error. Non-base64 data, other than whitespace (which can appear at\nany time), is an error.\n\n\nfun decode_url()\n\n\nfun box\n decode_url[optional A: \nSeq\n[\nU8\n val] iso](data: \nByteSeq\n box): A iso^ ?\n\n\nPublic, may raise an error.\n\n\nDecode for URLs (RFC 4648).\n\n\nfun _enc_byte()\n\n\nfun box\n _enc_byte(i: \nU8\n val, at62: \nU8\n val, at63: \nU8\n val): \nU8\n val ?\n\n\nPrivate, may raise an error.\n\n\nEncode a single byte.\n\n\nfun encode()\n\n\nfun box\n encode[optional A: \nSeq\n[\nU8\n val] iso](data: \nByteSeq\n box, optional at62: \nU8\n val, optional at63: \nU8\n val, optional pad: \nU8\n val, optional linelen: \nUSize\n val, optional linesep: \nString\n val): A iso^\n\n\nPublic.\n\n\nConfigurable encoding. The defaults are for RFC 4648.\n\n\nfun encode_mime()\n\n\nfun box\n encode_mime(data: \nByteSeq\n box): \nString\n iso^\n\n\nPublic.\n\n\nEncode for MIME (RFC 2045).\n\n\nfun encode_pem()\n\n\nfun box\n encode_pem(data: \nByteSeq\n box): \nString\n iso^\n\n\nPublic.\n\n\nEncode for PEM (RFC 1421).\n\n\nfun encode_url()\n\n\nfun box\n encode_url(data: \nByteSeq\n box, optional pad: \nBool\n val): \nString\n iso^\n\n\nPublic.\n\n\nEncode for URLs (RFC 4648). Padding characters are stripped by default.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nBase64\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nBase64\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive Base64"
        },
        {
            "location": "/encode-base64-Base64/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/encode-base64-Base64/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/encode-base64-Base64/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/encode-base64-Base64/#fun-decode",
            "text": "fun box\n decode[optional A:  Seq [ U8  val] iso](data:  ByteSeq  box, optional at62:  U8  val, optional at63:  U8  val, optional pad:  U8  val): A iso^ ?  Public, may raise an error.  Configurable decoding. The defaults are for RFC 4648. Missing padding is\nnot an error. Non-base64 data, other than whitespace (which can appear at\nany time), is an error.",
            "title": "fun decode()"
        },
        {
            "location": "/encode-base64-Base64/#fun-decode_url",
            "text": "fun box\n decode_url[optional A:  Seq [ U8  val] iso](data:  ByteSeq  box): A iso^ ?  Public, may raise an error.  Decode for URLs (RFC 4648).",
            "title": "fun decode_url()"
        },
        {
            "location": "/encode-base64-Base64/#fun-_enc_byte",
            "text": "fun box\n _enc_byte(i:  U8  val, at62:  U8  val, at63:  U8  val):  U8  val ?  Private, may raise an error.  Encode a single byte.",
            "title": "fun _enc_byte()"
        },
        {
            "location": "/encode-base64-Base64/#fun-encode",
            "text": "fun box\n encode[optional A:  Seq [ U8  val] iso](data:  ByteSeq  box, optional at62:  U8  val, optional at63:  U8  val, optional pad:  U8  val, optional linelen:  USize  val, optional linesep:  String  val): A iso^  Public.  Configurable encoding. The defaults are for RFC 4648.",
            "title": "fun encode()"
        },
        {
            "location": "/encode-base64-Base64/#fun-encode_mime",
            "text": "fun box\n encode_mime(data:  ByteSeq  box):  String  iso^  Public.  Encode for MIME (RFC 2045).",
            "title": "fun encode_mime()"
        },
        {
            "location": "/encode-base64-Base64/#fun-encode_pem",
            "text": "fun box\n encode_pem(data:  ByteSeq  box):  String  iso^  Public.  Encode for PEM (RFC 1421).",
            "title": "fun encode_pem()"
        },
        {
            "location": "/encode-base64-Base64/#fun-encode_url",
            "text": "fun box\n encode_url(data:  ByteSeq  box, optional pad:  Bool  val):  String  iso^  Public.  Encode for URLs (RFC 4648). Padding characters are stripped by default.",
            "title": "fun encode_url()"
        },
        {
            "location": "/encode-base64-Base64/#fun-eq",
            "text": "fun box\n eq(that:  Base64  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/encode-base64-Base64/#fun-ne",
            "text": "fun box\n ne(that:  Base64  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/encode-base64-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"encode/base64\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/encode-base64-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/encode-base64-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/encode-base64-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/encode-base64-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/encode-base64-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/encode-base64-_TestBase64Decode/",
            "text": "class _TestBase64Decode is \nUnitTest\n ref\n\n\nIn package \"encode/base64\".\n\n\nPrivate, default capability iso.\n\n\nTest base64 decoding. Examples with and without padding are tested.\nUsing test examples from RFC 4648.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestBase64Decode"
        },
        {
            "location": "/encode-base64-_TestBase64Decode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/encode-base64-_TestBase64Decode/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/encode-base64-_TestBase64Decode/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/encode-base64-_TestBase64Decode/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/encode-base64-_TestBase64Decode/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/encode-base64-_TestBase64Decode/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/encode-base64-_TestBase64Decode/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/encode-base64-_TestBase64Decode/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/encode-base64-_TestBase64Encode/",
            "text": "class _TestBase64Encode is \nUnitTest\n ref\n\n\nIn package \"encode/base64\".\n\n\nPrivate, default capability iso.\n\n\nTest base64 encoding.\nUsing test examples from RFC 4648.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestBase64Encode"
        },
        {
            "location": "/encode-base64-_TestBase64Encode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/encode-base64-_TestBase64Encode/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/encode-base64-_TestBase64Encode/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/encode-base64-_TestBase64Encode/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/encode-base64-_TestBase64Encode/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/encode-base64-_TestBase64Encode/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/encode-base64-_TestBase64Encode/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/encode-base64-_TestBase64Encode/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/",
            "text": "class _TestBase64EncodeDecode is \nUnitTest\n ref\n\n\nIn package \"encode/base64\".\n\n\nPrivate, default capability iso.\n\n\nTest base64 encoding.\nCheck encoding then decoding gives back original.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestBase64EncodeDecode"
        },
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/encode-base64-_TestBase64EncodeDecode/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/encode-base64-_TestBase64Quote/",
            "text": "class _TestBase64Quote is \nUnitTest\n ref\n\n\nIn package \"encode/base64\".\n\n\nPrivate, default capability iso.\n\n\nTest base64 encoding.\nCheck encoding then decoding something a bit longer.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestBase64Quote"
        },
        {
            "location": "/encode-base64-_TestBase64Quote/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/encode-base64-_TestBase64Quote/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/encode-base64-_TestBase64Quote/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/encode-base64-_TestBase64Quote/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/encode-base64-_TestBase64Quote/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/encode-base64-_TestBase64Quote/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/encode-base64-_TestBase64Quote/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/encode-base64-_TestBase64Quote/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/files--index/",
            "text": "No package doc string provided for files.",
            "title": "Package"
        },
        {
            "location": "/files-CreateFile/",
            "text": "primitive CreateFile\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nOpen a File for read/write, creating if it doesn't exist, preserving the\ncontents if it does exist.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(from: \nFilePath\n val): (\nFile\n ref | (\nFileOK\n val | \nFileError\n val))\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nCreateFile\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nCreateFile\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive CreateFile"
        },
        {
            "location": "/files-CreateFile/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-CreateFile/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-CreateFile/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-CreateFile/#fun-apply",
            "text": "fun box\n apply(from:  FilePath  val): ( File  ref | ( FileOK  val |  FileError  val))  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/files-CreateFile/#fun-eq",
            "text": "fun box\n eq(that:  CreateFile  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-CreateFile/#fun-ne",
            "text": "fun box\n ne(that:  CreateFile  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-Directory/",
            "text": "class Directory\n\n\nIn package \"files\".\n\n\nPublic, default capability ref.\n\n\nOperations on a directory.\n\n\nThe directory-relative functions (open, etc) use the *at interface on FreeBSD\nand Linux. This isn't available on OS X prior to 10.10, so it is not used. On\nFreeBSD, this allows the directory-relative functions to take advantage of\nCapsicum.\n\n\nPublic fields\n\n\n\n\nlet path: \nFilePath\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(from: \nFilePath\n val) ?\n\n\nPublic, may raise an error.\n\n\nnew _relative()\n\n\nnew _relative(path': \nFilePath\n val, fd': \nI32\n val)\n\n\nPrivate.\n\n\nFunctions\n\n\nfun chmod()\n\n\nfun box\n chmod(mode: \nFileMode\n box): \nBool\n val\n\n\nPublic.\n\n\nSet the FileMode for this directory.\n\n\nfun chmodat()\n\n\nfun box\n chmodat(target: \nString\n val, mode: \nFileMode\n box): \nBool\n val\n\n\nPublic.\n\n\nSet the FileMode for some path relative to this directory.\n\n\nfun chown()\n\n\nfun box\n chown(uid: \nU32\n val, gid: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nSet the owner and group for this directory. Does nothing on Windows.\n\n\nfun chownat()\n\n\nfun box\n chownat(target: \nString\n val, uid: \nU32\n val, gid: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nSet the FileMode for some path relative to this directory.\n\n\nfun create_file()\n\n\nfun box\n create_file(target: \nString\n val): \nFile\n iso^ ?\n\n\nPublic, may raise an error.\n\n\nOpen for read/write, creating if it doesn't exist, preserving the contents\nif it does exist.\n\n\nfun dispose()\n\n\nfun ref\n dispose(): \nNone\n val\n\n\nPublic.\n\n\nClose the directory.\n\n\nfun entries()\n\n\nfun box\n entries(): \nArray\n[\nString\n val] iso^ ?\n\n\nPublic, may raise an error.\n\n\nThe entries will include everything in the directory, but it is not\nrecursive. The path for the entry will be relative to the directory, so it\nwill contain no directory separators. The entries will not include \".\" or\n\"..\".\n\n\nfun _final()\n\n\nfun box\n _final(): \nNone\n val\n\n\nPrivate.\n\n\nClose the file descriptor.\n\n\nfun info()\n\n\nfun box\n info(): \nFileInfo\n val ?\n\n\nPublic, may raise an error.\n\n\nReturn a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.\n\n\nfun infoat()\n\n\nfun box\n infoat(target: \nString\n val): \nFileInfo\n val ?\n\n\nPublic, may raise an error.\n\n\nReturn a FileInfo for some path relative to this directory.\n\n\nfun mkdir()\n\n\nfun box\n mkdir(target: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nCreates a directory relative to this one. Returns false if the path is\nnot within this directory hierarchy or if FileMkdir permission is missing.\n\n\nfun open()\n\n\nfun box\n open(target: \nString\n val): \nDirectory\n iso^ ?\n\n\nPublic, may raise an error.\n\n\nOpen a directory relative to this one. Raises an error if the path is not\nwithin this directory hierarchy.\n\n\nfun open_file()\n\n\nfun box\n open_file(target: \nString\n val): \nFile\n iso^ ?\n\n\nPublic, may raise an error.\n\n\nOpen for read only, failing if it doesn't exist.\n\n\nfun remove()\n\n\nfun box\n remove(target: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nRemove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.\n\n\nfun rename()\n\n\nfun box\n rename(source: \nString\n val, to: \nDirectory\n box, target: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nRename source (which is relative to this directory) to target (which is\nrelative to the \nto\n directory).\n\n\nfun set_time()\n\n\nfun box\n set_time(atime: (\nI64\n val , \nI64\n val), mtime: (\nI64\n val , \nI64\n val)): \nBool\n val\n\n\nPublic.\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun set_time_at()\n\n\nfun box\n set_time_at(target: \nString\n val, atime: (\nI64\n val , \nI64\n val), mtime: (\nI64\n val , \nI64\n val)): \nBool\n val\n\n\nPublic.\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun symlink()\n\n\nfun box\n symlink(source: \nFilePath\n val, link_name: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nLink the source path to the link_name, where the link_name is relative to\nthis directory.\n\n\nfun touch()\n\n\nfun box\n touch(): \nBool\n val\n\n\nPublic.\n\n\nSet the last access and modification times of the directory to now.\n\n\nfun touchat()\n\n\nfun box\n touchat(target: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nSet the last access and modification times of the directory to now.",
            "title": "class Directory"
        },
        {
            "location": "/files-Directory/#public-fields",
            "text": "let path:  FilePath  val",
            "title": "Public fields"
        },
        {
            "location": "/files-Directory/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-Directory/#new-create",
            "text": "new create(from:  FilePath  val) ?  Public, may raise an error.",
            "title": "new create()"
        },
        {
            "location": "/files-Directory/#new-_relative",
            "text": "new _relative(path':  FilePath  val, fd':  I32  val)  Private.",
            "title": "new _relative()"
        },
        {
            "location": "/files-Directory/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-Directory/#fun-chmod",
            "text": "fun box\n chmod(mode:  FileMode  box):  Bool  val  Public.  Set the FileMode for this directory.",
            "title": "fun chmod()"
        },
        {
            "location": "/files-Directory/#fun-chmodat",
            "text": "fun box\n chmodat(target:  String  val, mode:  FileMode  box):  Bool  val  Public.  Set the FileMode for some path relative to this directory.",
            "title": "fun chmodat()"
        },
        {
            "location": "/files-Directory/#fun-chown",
            "text": "fun box\n chown(uid:  U32  val, gid:  U32  val):  Bool  val  Public.  Set the owner and group for this directory. Does nothing on Windows.",
            "title": "fun chown()"
        },
        {
            "location": "/files-Directory/#fun-chownat",
            "text": "fun box\n chownat(target:  String  val, uid:  U32  val, gid:  U32  val):  Bool  val  Public.  Set the FileMode for some path relative to this directory.",
            "title": "fun chownat()"
        },
        {
            "location": "/files-Directory/#fun-create_file",
            "text": "fun box\n create_file(target:  String  val):  File  iso^ ?  Public, may raise an error.  Open for read/write, creating if it doesn't exist, preserving the contents\nif it does exist.",
            "title": "fun create_file()"
        },
        {
            "location": "/files-Directory/#fun-dispose",
            "text": "fun ref\n dispose():  None  val  Public.  Close the directory.",
            "title": "fun dispose()"
        },
        {
            "location": "/files-Directory/#fun-entries",
            "text": "fun box\n entries():  Array [ String  val] iso^ ?  Public, may raise an error.  The entries will include everything in the directory, but it is not\nrecursive. The path for the entry will be relative to the directory, so it\nwill contain no directory separators. The entries will not include \".\" or\n\"..\".",
            "title": "fun entries()"
        },
        {
            "location": "/files-Directory/#fun-_final",
            "text": "fun box\n _final():  None  val  Private.  Close the file descriptor.",
            "title": "fun _final()"
        },
        {
            "location": "/files-Directory/#fun-info",
            "text": "fun box\n info():  FileInfo  val ?  Public, may raise an error.  Return a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.",
            "title": "fun info()"
        },
        {
            "location": "/files-Directory/#fun-infoat",
            "text": "fun box\n infoat(target:  String  val):  FileInfo  val ?  Public, may raise an error.  Return a FileInfo for some path relative to this directory.",
            "title": "fun infoat()"
        },
        {
            "location": "/files-Directory/#fun-mkdir",
            "text": "fun box\n mkdir(target:  String  val):  Bool  val  Public.  Creates a directory relative to this one. Returns false if the path is\nnot within this directory hierarchy or if FileMkdir permission is missing.",
            "title": "fun mkdir()"
        },
        {
            "location": "/files-Directory/#fun-open",
            "text": "fun box\n open(target:  String  val):  Directory  iso^ ?  Public, may raise an error.  Open a directory relative to this one. Raises an error if the path is not\nwithin this directory hierarchy.",
            "title": "fun open()"
        },
        {
            "location": "/files-Directory/#fun-open_file",
            "text": "fun box\n open_file(target:  String  val):  File  iso^ ?  Public, may raise an error.  Open for read only, failing if it doesn't exist.",
            "title": "fun open_file()"
        },
        {
            "location": "/files-Directory/#fun-remove",
            "text": "fun box\n remove(target:  String  val):  Bool  val  Public.  Remove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.",
            "title": "fun remove()"
        },
        {
            "location": "/files-Directory/#fun-rename",
            "text": "fun box\n rename(source:  String  val, to:  Directory  box, target:  String  val):  Bool  val  Public.  Rename source (which is relative to this directory) to target (which is\nrelative to the  to  directory).",
            "title": "fun rename()"
        },
        {
            "location": "/files-Directory/#fun-set_time",
            "text": "fun box\n set_time(atime: ( I64  val ,  I64  val), mtime: ( I64  val ,  I64  val)):  Bool  val  Public.  Set the last access and modification times of the directory to the given\nvalues.",
            "title": "fun set_time()"
        },
        {
            "location": "/files-Directory/#fun-set_time_at",
            "text": "fun box\n set_time_at(target:  String  val, atime: ( I64  val ,  I64  val), mtime: ( I64  val ,  I64  val)):  Bool  val  Public.  Set the last access and modification times of the directory to the given\nvalues.",
            "title": "fun set_time_at()"
        },
        {
            "location": "/files-Directory/#fun-symlink",
            "text": "fun box\n symlink(source:  FilePath  val, link_name:  String  val):  Bool  val  Public.  Link the source path to the link_name, where the link_name is relative to\nthis directory.",
            "title": "fun symlink()"
        },
        {
            "location": "/files-Directory/#fun-touch",
            "text": "fun box\n touch():  Bool  val  Public.  Set the last access and modification times of the directory to now.",
            "title": "fun touch()"
        },
        {
            "location": "/files-Directory/#fun-touchat",
            "text": "fun box\n touchat(target:  String  val):  Bool  val  Public.  Set the last access and modification times of the directory to now.",
            "title": "fun touchat()"
        },
        {
            "location": "/files-_DirectoryEntry/",
            "text": "primitive _DirectoryEntry\n\n\nIn package \"files\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_DirectoryEntry\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_DirectoryEntry\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _DirectoryEntry"
        },
        {
            "location": "/files-_DirectoryEntry/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_DirectoryEntry/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_DirectoryEntry/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_DirectoryEntry/#fun-eq",
            "text": "fun box\n eq(that:  _DirectoryEntry  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-_DirectoryEntry/#fun-ne",
            "text": "fun box\n ne(that:  _DirectoryEntry  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-_DirectoryHandle/",
            "text": "primitive _DirectoryHandle\n\n\nIn package \"files\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_DirectoryHandle\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_DirectoryHandle\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _DirectoryHandle"
        },
        {
            "location": "/files-_DirectoryHandle/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_DirectoryHandle/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_DirectoryHandle/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_DirectoryHandle/#fun-eq",
            "text": "fun box\n eq(that:  _DirectoryHandle  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-_DirectoryHandle/#fun-ne",
            "text": "fun box\n ne(that:  _DirectoryHandle  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-File/",
            "text": "class File\n\n\nIn package \"files\".\n\n\nPublic, default capability ref.\n\n\nOperations on a file.\n\n\nPublic fields\n\n\n\n\nlet path: \nFilePath\n val\n\n\nlet writeable: \nBool\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(from: \nFilePath\n val)\n\n\nPublic.\n\n\nnew _descriptor()\n\n\nnew _descriptor(fd: \nI32\n val, from: \nFilePath\n val) ?\n\n\nPrivate, may raise an error.\n\n\nnew open()\n\n\nnew open(from: \nFilePath\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun chmod()\n\n\nfun box\n chmod(mode: \nFileMode\n box): \nBool\n val\n\n\nPublic.\n\n\nSet the FileMode for this directory.\n\n\nfun chown()\n\n\nfun box\n chown(uid: \nU32\n val, gid: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nSet the owner and group for this directory. Does nothing on Windows.\n\n\nfun dispose()\n\n\nfun ref\n dispose(): \nNone\n val\n\n\nPublic.\n\n\nClose the file. Future operations will do nothing.\n\n\nfun errno()\n\n\nfun box\n errno(): (\nFileOK\n val | \nFileError\n val)\n\n\nPublic.\n\n\nReturns the last error code set for this File\n\n\nfun _final()\n\n\nfun box\n _final(): \nNone\n val\n\n\nPrivate.\n\n\nClose the file.\n\n\nfun flush()\n\n\nfun ref\n flush(): \nFile\n ref\n\n\nPublic.\n\n\nFlush the file.\n\n\nfun get_fd()\n\n\nfun box\n get_fd(): \nI32\n val ?\n\n\nPublic, may raise an error.\n\n\nReturns the underlying file descriptor.\nRaises an error if the file is not currently open.\n\n\nfun _get_fd()\n\n\nfun tag\n _get_fd(handle: \nPointer\n[\n_FileHandle\n val] ref): \nI32\n val\n\n\nPrivate.\n\n\nGet the file descriptor associated with the file handle.\n\n\nfun info()\n\n\nfun box\n info(): \nFileInfo\n val ?\n\n\nPublic, may raise an error.\n\n\nReturn a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.\n\n\nfun line()\n\n\nfun ref\n line(): \nString\n iso^ ?\n\n\nPublic, may raise an error.\n\n\nReturns a line as a String. The newline is not included in the string. If\nthere is no more data, this raises an error.\n\n\nfun lines()\n\n\nfun ref\n lines(): \nFileLines\n ref\n\n\nPublic.\n\n\nReturns an iterator for reading lines from the file.\n\n\nfun position()\n\n\nfun box\n position(): \nUSize\n val\n\n\nPublic.\n\n\nReturn the current cursor position in the file.\n\n\nfun print()\n\n\nfun ref\n print(data: \nByteSeq\n box): \nBool\n val\n\n\nPublic.\n\n\nSame as write, buts adds a newline.\n\n\nfun printv()\n\n\nfun ref\n printv(data: \nByteSeqIter\n box): \nBool\n val\n\n\nPublic.\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nfun read()\n\n\nfun ref\n read(len: \nUSize\n val): \nArray\n[\nU8\n val] iso^\n\n\nPublic.\n\n\nReturns up to len bytes.\n\n\nfun read_string()\n\n\nfun ref\n read_string(len: \nUSize\n val): \nString\n iso^\n\n\nPublic.\n\n\nReturns up to len bytes. The resulting string may have internal null\ncharacters.\n\n\nfun seek()\n\n\nfun ref\n seek(offset: \nISize\n val): \nFile\n ref\n\n\nPublic.\n\n\nMove the cursor position.\n\n\nfun _seek()\n\n\nfun ref\n _seek(offset: \nISize\n val, base: \nI32\n val): \nNone\n val\n\n\nPrivate.\n\n\nMove the cursor position.\n\n\nfun seek_end()\n\n\nfun ref\n seek_end(offset: \nUSize\n val): \nFile\n ref\n\n\nPublic.\n\n\nSet the cursor position relative to the end of the file.\n\n\nfun seek_start()\n\n\nfun ref\n seek_start(offset: \nUSize\n val): \nFile\n ref\n\n\nPublic.\n\n\nSet the cursor position relative to the start of the file.\n\n\nfun set_length()\n\n\nfun ref\n set_length(len: \nUSize\n val): \nBool\n val\n\n\nPublic.\n\n\nChange the file size. If it is made larger, the new contents are undefined.\n\n\nfun set_time()\n\n\nfun box\n set_time(atime: (\nI64\n val , \nI64\n val), mtime: (\nI64\n val , \nI64\n val)): \nBool\n val\n\n\nPublic.\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun size()\n\n\nfun ref\n size(): \nUSize\n val\n\n\nPublic.\n\n\nReturn the total length of the file.\n\n\nfun sync()\n\n\nfun ref\n sync(): \nFile\n ref\n\n\nPublic.\n\n\nSync the file contents to physical storage.\n\n\nfun touch()\n\n\nfun box\n touch(): \nBool\n val\n\n\nPublic.\n\n\nSet the last access and modification times of the directory to now.\n\n\nfun valid()\n\n\nfun box\n valid(): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the file is currently open.\n\n\nfun write()\n\n\nfun ref\n write(data: \nByteSeq\n box): \nBool\n val\n\n\nPublic.\n\n\nReturns false if the file wasn't opened with write permission.\nReturns false and closes the file if not all the bytes were written.\n\n\nfun writev()\n\n\nfun ref\n writev(data: \nByteSeqIter\n box): \nBool\n val\n\n\nPublic.\n\n\nWrite an iterable collection of ByteSeqs.",
            "title": "class File"
        },
        {
            "location": "/files-File/#public-fields",
            "text": "let path:  FilePath  val  let writeable:  Bool  val",
            "title": "Public fields"
        },
        {
            "location": "/files-File/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-File/#new-create",
            "text": "new create(from:  FilePath  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-File/#new-_descriptor",
            "text": "new _descriptor(fd:  I32  val, from:  FilePath  val) ?  Private, may raise an error.",
            "title": "new _descriptor()"
        },
        {
            "location": "/files-File/#new-open",
            "text": "new open(from:  FilePath  val)  Public.",
            "title": "new open()"
        },
        {
            "location": "/files-File/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-File/#fun-chmod",
            "text": "fun box\n chmod(mode:  FileMode  box):  Bool  val  Public.  Set the FileMode for this directory.",
            "title": "fun chmod()"
        },
        {
            "location": "/files-File/#fun-chown",
            "text": "fun box\n chown(uid:  U32  val, gid:  U32  val):  Bool  val  Public.  Set the owner and group for this directory. Does nothing on Windows.",
            "title": "fun chown()"
        },
        {
            "location": "/files-File/#fun-dispose",
            "text": "fun ref\n dispose():  None  val  Public.  Close the file. Future operations will do nothing.",
            "title": "fun dispose()"
        },
        {
            "location": "/files-File/#fun-errno",
            "text": "fun box\n errno(): ( FileOK  val |  FileError  val)  Public.  Returns the last error code set for this File",
            "title": "fun errno()"
        },
        {
            "location": "/files-File/#fun-_final",
            "text": "fun box\n _final():  None  val  Private.  Close the file.",
            "title": "fun _final()"
        },
        {
            "location": "/files-File/#fun-flush",
            "text": "fun ref\n flush():  File  ref  Public.  Flush the file.",
            "title": "fun flush()"
        },
        {
            "location": "/files-File/#fun-get_fd",
            "text": "fun box\n get_fd():  I32  val ?  Public, may raise an error.  Returns the underlying file descriptor.\nRaises an error if the file is not currently open.",
            "title": "fun get_fd()"
        },
        {
            "location": "/files-File/#fun-_get_fd",
            "text": "fun tag\n _get_fd(handle:  Pointer [ _FileHandle  val] ref):  I32  val  Private.  Get the file descriptor associated with the file handle.",
            "title": "fun _get_fd()"
        },
        {
            "location": "/files-File/#fun-info",
            "text": "fun box\n info():  FileInfo  val ?  Public, may raise an error.  Return a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.",
            "title": "fun info()"
        },
        {
            "location": "/files-File/#fun-line",
            "text": "fun ref\n line():  String  iso^ ?  Public, may raise an error.  Returns a line as a String. The newline is not included in the string. If\nthere is no more data, this raises an error.",
            "title": "fun line()"
        },
        {
            "location": "/files-File/#fun-lines",
            "text": "fun ref\n lines():  FileLines  ref  Public.  Returns an iterator for reading lines from the file.",
            "title": "fun lines()"
        },
        {
            "location": "/files-File/#fun-position",
            "text": "fun box\n position():  USize  val  Public.  Return the current cursor position in the file.",
            "title": "fun position()"
        },
        {
            "location": "/files-File/#fun-print",
            "text": "fun ref\n print(data:  ByteSeq  box):  Bool  val  Public.  Same as write, buts adds a newline.",
            "title": "fun print()"
        },
        {
            "location": "/files-File/#fun-printv",
            "text": "fun ref\n printv(data:  ByteSeqIter  box):  Bool  val  Public.  Print an iterable collection of ByteSeqs.",
            "title": "fun printv()"
        },
        {
            "location": "/files-File/#fun-read",
            "text": "fun ref\n read(len:  USize  val):  Array [ U8  val] iso^  Public.  Returns up to len bytes.",
            "title": "fun read()"
        },
        {
            "location": "/files-File/#fun-read_string",
            "text": "fun ref\n read_string(len:  USize  val):  String  iso^  Public.  Returns up to len bytes. The resulting string may have internal null\ncharacters.",
            "title": "fun read_string()"
        },
        {
            "location": "/files-File/#fun-seek",
            "text": "fun ref\n seek(offset:  ISize  val):  File  ref  Public.  Move the cursor position.",
            "title": "fun seek()"
        },
        {
            "location": "/files-File/#fun-_seek",
            "text": "fun ref\n _seek(offset:  ISize  val, base:  I32  val):  None  val  Private.  Move the cursor position.",
            "title": "fun _seek()"
        },
        {
            "location": "/files-File/#fun-seek_end",
            "text": "fun ref\n seek_end(offset:  USize  val):  File  ref  Public.  Set the cursor position relative to the end of the file.",
            "title": "fun seek_end()"
        },
        {
            "location": "/files-File/#fun-seek_start",
            "text": "fun ref\n seek_start(offset:  USize  val):  File  ref  Public.  Set the cursor position relative to the start of the file.",
            "title": "fun seek_start()"
        },
        {
            "location": "/files-File/#fun-set_length",
            "text": "fun ref\n set_length(len:  USize  val):  Bool  val  Public.  Change the file size. If it is made larger, the new contents are undefined.",
            "title": "fun set_length()"
        },
        {
            "location": "/files-File/#fun-set_time",
            "text": "fun box\n set_time(atime: ( I64  val ,  I64  val), mtime: ( I64  val ,  I64  val)):  Bool  val  Public.  Set the last access and modification times of the directory to the given\nvalues.",
            "title": "fun set_time()"
        },
        {
            "location": "/files-File/#fun-size",
            "text": "fun ref\n size():  USize  val  Public.  Return the total length of the file.",
            "title": "fun size()"
        },
        {
            "location": "/files-File/#fun-sync",
            "text": "fun ref\n sync():  File  ref  Public.  Sync the file contents to physical storage.",
            "title": "fun sync()"
        },
        {
            "location": "/files-File/#fun-touch",
            "text": "fun box\n touch():  Bool  val  Public.  Set the last access and modification times of the directory to now.",
            "title": "fun touch()"
        },
        {
            "location": "/files-File/#fun-valid",
            "text": "fun box\n valid():  Bool  val  Public.  Returns true if the file is currently open.",
            "title": "fun valid()"
        },
        {
            "location": "/files-File/#fun-write",
            "text": "fun ref\n write(data:  ByteSeq  box):  Bool  val  Public.  Returns false if the file wasn't opened with write permission.\nReturns false and closes the file if not all the bytes were written.",
            "title": "fun write()"
        },
        {
            "location": "/files-File/#fun-writev",
            "text": "fun ref\n writev(data:  ByteSeqIter  box):  Bool  val  Public.  Write an iterable collection of ByteSeqs.",
            "title": "fun writev()"
        },
        {
            "location": "/files-FileCaps/",
            "text": "type FileCaps is \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] ref\n\n\nIn package \"files\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type FileCaps"
        },
        {
            "location": "/files-FileChmod/",
            "text": "primitive FileChmod\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileChmod\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileChmod\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileChmod"
        },
        {
            "location": "/files-FileChmod/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileChmod/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileChmod/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileChmod/#fun-eq",
            "text": "fun box\n eq(that:  FileChmod  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileChmod/#fun-ne",
            "text": "fun box\n ne(that:  FileChmod  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileChmod/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileChown/",
            "text": "primitive FileChown\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileChown\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileChown\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileChown"
        },
        {
            "location": "/files-FileChown/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileChown/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileChown/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileChown/#fun-eq",
            "text": "fun box\n eq(that:  FileChown  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileChown/#fun-ne",
            "text": "fun box\n ne(that:  FileChown  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileChown/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileCreate/",
            "text": "primitive FileCreate\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileCreate\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileCreate\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileCreate"
        },
        {
            "location": "/files-FileCreate/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileCreate/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileCreate/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileCreate/#fun-eq",
            "text": "fun box\n eq(that:  FileCreate  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileCreate/#fun-ne",
            "text": "fun box\n ne(that:  FileCreate  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileCreate/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-_FileDes/",
            "text": "primitive _FileDes\n\n\nIn package \"files\".\n\n\nPrivate, default capability val.\n\n\nConvenience operations on file descriptors.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun chmod()\n\n\nfun box\n chmod(fd: \nI32\n val, path: \nFilePath\n val, mode: \nFileMode\n box): \nBool\n val\n\n\nPublic.\n\n\nSet the FileMode for this fd.\n\n\nfun chown()\n\n\nfun box\n chown(fd: \nI32\n val, path: \nFilePath\n val, uid: \nU32\n val, gid: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nSet the owner and group for this file. Does nothing on Windows.\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_FileDes\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_FileDes\n val): \nBool\n val\n\n\nPublic.\n\n\nfun set_rights()\n\n\nfun box\n set_rights(fd: \nI32\n val, path: \nFilePath\n val, optional writeable: \nBool\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nSet the Capsicum rights on the file descriptor.\n\n\nfun set_time()\n\n\nfun box\n set_time(fd: \nI32\n val, path: \nFilePath\n val, atime: (\nI64\n val , \nI64\n val), mtime: (\nI64\n val , \nI64\n val)): \nBool\n val\n\n\nPublic.\n\n\nSet the last access and modification times of the file to the given values.\n\n\nfun touch()\n\n\nfun box\n touch(fd: \nI32\n val, path: \nFilePath\n val): \nBool\n val\n\n\nPublic.\n\n\nSet the last access and modification times of the file to now.",
            "title": "primitive _FileDes"
        },
        {
            "location": "/files-_FileDes/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_FileDes/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_FileDes/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_FileDes/#fun-chmod",
            "text": "fun box\n chmod(fd:  I32  val, path:  FilePath  val, mode:  FileMode  box):  Bool  val  Public.  Set the FileMode for this fd.",
            "title": "fun chmod()"
        },
        {
            "location": "/files-_FileDes/#fun-chown",
            "text": "fun box\n chown(fd:  I32  val, path:  FilePath  val, uid:  U32  val, gid:  U32  val):  Bool  val  Public.  Set the owner and group for this file. Does nothing on Windows.",
            "title": "fun chown()"
        },
        {
            "location": "/files-_FileDes/#fun-eq",
            "text": "fun box\n eq(that:  _FileDes  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-_FileDes/#fun-ne",
            "text": "fun box\n ne(that:  _FileDes  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-_FileDes/#fun-set_rights",
            "text": "fun box\n set_rights(fd:  I32  val, path:  FilePath  val, optional writeable:  Bool  val):  None  val ?  Public, may raise an error.  Set the Capsicum rights on the file descriptor.",
            "title": "fun set_rights()"
        },
        {
            "location": "/files-_FileDes/#fun-set_time",
            "text": "fun box\n set_time(fd:  I32  val, path:  FilePath  val, atime: ( I64  val ,  I64  val), mtime: ( I64  val ,  I64  val)):  Bool  val  Public.  Set the last access and modification times of the file to the given values.",
            "title": "fun set_time()"
        },
        {
            "location": "/files-_FileDes/#fun-touch",
            "text": "fun box\n touch(fd:  I32  val, path:  FilePath  val):  Bool  val  Public.  Set the last access and modification times of the file to now.",
            "title": "fun touch()"
        },
        {
            "location": "/files-FileErrNo/",
            "text": "type FileErrNo is (\nFileOK\n val | \nFileError\n val)\n\n\nIn package \"files\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type FileErrNo"
        },
        {
            "location": "/files-FileError/",
            "text": "primitive FileError\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileError\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileError\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FileError"
        },
        {
            "location": "/files-FileError/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileError/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileError/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileError/#fun-eq",
            "text": "fun box\n eq(that:  FileError  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileError/#fun-ne",
            "text": "fun box\n ne(that:  FileError  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-_FileHandle/",
            "text": "primitive _FileHandle\n\n\nIn package \"files\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_FileHandle\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_FileHandle\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _FileHandle"
        },
        {
            "location": "/files-_FileHandle/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_FileHandle/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_FileHandle/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_FileHandle/#fun-eq",
            "text": "fun box\n eq(that:  _FileHandle  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-_FileHandle/#fun-ne",
            "text": "fun box\n ne(that:  _FileHandle  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-_FileHelper/",
            "text": "primitive _FileHelper\n\n\nIn package \"files\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_FileHelper\n val): \nBool\n val\n\n\nPublic.\n\n\nfun make_files()\n\n\nfun box\n make_files(h: \nTestHelper\n val, files: \nArray\n[\nString\n val] ref): \nFilePath\n val ?\n\n\nPublic, may raise an error.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_FileHelper\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _FileHelper"
        },
        {
            "location": "/files-_FileHelper/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_FileHelper/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_FileHelper/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_FileHelper/#fun-eq",
            "text": "fun box\n eq(that:  _FileHelper  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-_FileHelper/#fun-make_files",
            "text": "fun box\n make_files(h:  TestHelper  val, files:  Array [ String  val] ref):  FilePath  val ?  Public, may raise an error.",
            "title": "fun make_files()"
        },
        {
            "location": "/files-_FileHelper/#fun-ne",
            "text": "fun box\n ne(that:  _FileHelper  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileInfo/",
            "text": "class FileInfo\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nThis contains file system metadata for a path. The times are in the same\nformat as Time.now(), i.e. seconds and nanoseconds since the epoch.\n\n\nThe UID and GID are UNIX-style user and group IDs. These will be zero on\nWindows. The change_time will actually be the file creation time on Windows.\n\n\nA symlink will report information about itself, other than the size which\nwill be the size of the target. A broken symlink will report as much as it\ncan and will set the broken flag.\n\n\nPublic fields\n\n\n\n\nlet access_time: (\nI64\n val , \nI64\n val)\n\n\nlet broken: \nBool\n val\n\n\nlet change_time: (\nI64\n val , \nI64\n val)\n\n\nlet directory: \nBool\n val\n\n\nlet file: \nBool\n val\n\n\nlet filepath: \nFilePath\n val\n\n\nlet gid: \nU32\n val\n\n\nlet hard_links: \nU32\n val\n\n\nlet mode: \nFileMode\n val\n\n\nlet modified_time: (\nI64\n val , \nI64\n val)\n\n\nlet pipe: \nBool\n val\n\n\nlet size: \nUSize\n val\n\n\nlet symlink: \nBool\n val\n\n\nlet uid: \nU32\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(from: \nFilePath\n val) ?\n\n\nPublic, may raise an error.\n\n\nnew _descriptor()\n\n\nnew _descriptor(fd: \nI32\n val, path: \nFilePath\n val) ?\n\n\nPrivate, may raise an error.\n\n\nnew _relative()\n\n\nnew _relative(fd: \nI32\n val, path: \nFilePath\n val, from: \nString\n val) ?\n\n\nPrivate, may raise an error.",
            "title": "class FileInfo"
        },
        {
            "location": "/files-FileInfo/#public-fields",
            "text": "let access_time: ( I64  val ,  I64  val)  let broken:  Bool  val  let change_time: ( I64  val ,  I64  val)  let directory:  Bool  val  let file:  Bool  val  let filepath:  FilePath  val  let gid:  U32  val  let hard_links:  U32  val  let mode:  FileMode  val  let modified_time: ( I64  val ,  I64  val)  let pipe:  Bool  val  let size:  USize  val  let symlink:  Bool  val  let uid:  U32  val",
            "title": "Public fields"
        },
        {
            "location": "/files-FileInfo/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileInfo/#new-create",
            "text": "new create(from:  FilePath  val) ?  Public, may raise an error.",
            "title": "new create()"
        },
        {
            "location": "/files-FileInfo/#new-_descriptor",
            "text": "new _descriptor(fd:  I32  val, path:  FilePath  val) ?  Private, may raise an error.",
            "title": "new _descriptor()"
        },
        {
            "location": "/files-FileInfo/#new-_relative",
            "text": "new _relative(fd:  I32  val, path:  FilePath  val, from:  String  val) ?  Private, may raise an error.",
            "title": "new _relative()"
        },
        {
            "location": "/files-FileLines/",
            "text": "class FileLines is \nIterator\n[\nString\n val] ref\n\n\nIn package \"files\".\n\n\nPublic, default capability ref.\n\n\nIterate over the lines in a file.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(file: \nFile\n ref)\n\n\nPublic.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun ref\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun next()\n\n\nfun ref\n next(): \nString\n val\n\n\nPublic.",
            "title": "class FileLines"
        },
        {
            "location": "/files-FileLines/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileLines/#new-create",
            "text": "new create(file:  File  ref)  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileLines/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileLines/#fun-has_next",
            "text": "fun ref\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/files-FileLines/#fun-next",
            "text": "fun ref\n next():  String  val  Public.",
            "title": "fun next()"
        },
        {
            "location": "/files-FileLink/",
            "text": "primitive FileLink\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileLink\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileLink\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileLink"
        },
        {
            "location": "/files-FileLink/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileLink/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileLink/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileLink/#fun-eq",
            "text": "fun box\n eq(that:  FileLink  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileLink/#fun-ne",
            "text": "fun box\n ne(that:  FileLink  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileLink/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileLookup/",
            "text": "primitive FileLookup\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileLookup\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileLookup\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileLookup"
        },
        {
            "location": "/files-FileLookup/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileLookup/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileLookup/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileLookup/#fun-eq",
            "text": "fun box\n eq(that:  FileLookup  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileLookup/#fun-ne",
            "text": "fun box\n ne(that:  FileLookup  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileLookup/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileMkdir/",
            "text": "primitive FileMkdir\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileMkdir\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileMkdir\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileMkdir"
        },
        {
            "location": "/files-FileMkdir/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileMkdir/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileMkdir/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileMkdir/#fun-eq",
            "text": "fun box\n eq(that:  FileMkdir  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileMkdir/#fun-ne",
            "text": "fun box\n ne(that:  FileMkdir  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileMkdir/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileMode/",
            "text": "class FileMode\n\n\nIn package \"files\".\n\n\nPublic, default capability ref.\n\n\nThis stores a UNIX-style mode broken out into a Bool for each bit. For other\noperating systems, the mapping will be approximate. For example, on Windows,\nif the file is readable all the read Bools will be set, and if the file is\nwriteable, all the write Bools will be set.\n\n\nThe default mode is read/write for the owner, read-only for everyone else.\n\n\nPublic fields\n\n\n\n\nvar any_exec: \nBool\n val\n\n\nvar any_read: \nBool\n val\n\n\nvar any_write: \nBool\n val\n\n\nvar group_exec: \nBool\n val\n\n\nvar group_read: \nBool\n val\n\n\nvar group_write: \nBool\n val\n\n\nvar owner_exec: \nBool\n val\n\n\nvar owner_read: \nBool\n val\n\n\nvar owner_write: \nBool\n val\n\n\nvar setgid: \nBool\n val\n\n\nvar setuid: \nBool\n val\n\n\nvar sticky: \nBool\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun exec()\n\n\nfun ref\n exec(): \nFileMode\n ref\n\n\nPublic.\n\n\nSet the executable flag for everyone.\n\n\nfun group()\n\n\nfun ref\n group(): \nFileMode\n ref\n\n\nPublic.\n\n\nClear all of the any-user flags.\n\n\nfun _os()\n\n\nfun box\n _os(): \nU32\n val\n\n\nPrivate.\n\n\nGet the OS specific integer for a file mode. On Windows, if any read flag\nis set, the path is made readable, and if any write flag is set, the path\nis made writeable.\n\n\nfun private()\n\n\nfun ref\n private(): \nFileMode\n ref\n\n\nPublic.\n\n\nClear all of the group and any-user flags.\n\n\nfun shared()\n\n\nfun ref\n shared(): \nFileMode\n ref\n\n\nPublic.\n\n\nSet the write flag for everyone to the same as owner_write.",
            "title": "class FileMode"
        },
        {
            "location": "/files-FileMode/#public-fields",
            "text": "var any_exec:  Bool  val  var any_read:  Bool  val  var any_write:  Bool  val  var group_exec:  Bool  val  var group_read:  Bool  val  var group_write:  Bool  val  var owner_exec:  Bool  val  var owner_read:  Bool  val  var owner_write:  Bool  val  var setgid:  Bool  val  var setuid:  Bool  val  var sticky:  Bool  val",
            "title": "Public fields"
        },
        {
            "location": "/files-FileMode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileMode/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileMode/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileMode/#fun-exec",
            "text": "fun ref\n exec():  FileMode  ref  Public.  Set the executable flag for everyone.",
            "title": "fun exec()"
        },
        {
            "location": "/files-FileMode/#fun-group",
            "text": "fun ref\n group():  FileMode  ref  Public.  Clear all of the any-user flags.",
            "title": "fun group()"
        },
        {
            "location": "/files-FileMode/#fun-_os",
            "text": "fun box\n _os():  U32  val  Private.  Get the OS specific integer for a file mode. On Windows, if any read flag\nis set, the path is made readable, and if any write flag is set, the path\nis made writeable.",
            "title": "fun _os()"
        },
        {
            "location": "/files-FileMode/#fun-private",
            "text": "fun ref\n private():  FileMode  ref  Public.  Clear all of the group and any-user flags.",
            "title": "fun private()"
        },
        {
            "location": "/files-FileMode/#fun-shared",
            "text": "fun ref\n shared():  FileMode  ref  Public.  Set the write flag for everyone to the same as owner_write.",
            "title": "fun shared()"
        },
        {
            "location": "/files-FileOK/",
            "text": "primitive FileOK\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileOK\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileOK\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive FileOK"
        },
        {
            "location": "/files-FileOK/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileOK/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileOK/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileOK/#fun-eq",
            "text": "fun box\n eq(that:  FileOK  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileOK/#fun-ne",
            "text": "fun box\n ne(that:  FileOK  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FilePath/",
            "text": "class FilePath\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nA FilePath represents a capability to access a path. The path will be\nrepresented as an absolute path and a set of capabilities for operations on\nthat path.\n\n\nPublic fields\n\n\n\n\nlet caps: \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] ref\n\n\nlet path: \nString\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(base: ((\nFilePath\n val | \nAmbientAuth\n val) | \nNone\n val), path': \nString\n val, optional caps': \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] val) ?\n\n\nPublic, may raise an error.\n\n\nnew _create()\n\n\nnew _create(path': \nString\n val, caps': \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] val)\n\n\nPrivate.\n\n\nnew mkdtemp()\n\n\nnew mkdtemp(base: ((\nFilePath\n val | \nAmbientAuth\n val) | \nNone\n val), optional prefix: \nString\n val, optional caps': \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] val) ?\n\n\nPublic, may raise an error.\n\n\nFunctions\n\n\nfun canonical()\n\n\nfun val\n canonical(): \nFilePath\n val ?\n\n\nPublic, may raise an error.\n\n\nReturn the equivalent canonical absolute path. Raise an error if there\nisn't one.\n\n\nfun chmod()\n\n\nfun box\n chmod(mode: \nFileMode\n box): \nBool\n val\n\n\nPublic.\n\n\nSet the FileMode for a path.\n\n\nfun chown()\n\n\nfun box\n chown(uid: \nU32\n val, gid: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nSet the owner and group for a path. Does nothing on Windows.\n\n\nfun exists()\n\n\nfun val\n exists(): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the path exists. Returns false for a broken symlink.\n\n\nfun join()\n\n\nfun val\n join(path': \nString\n val, optional caps': \nFlags\n[((((((((((((((\nFileCreate\n val | \nFileChmod\n val) | \nFileChown\n val) | \nFileLink\n val) | \nFileLookup\n val) | \nFileMkdir\n val) | \nFileRead\n val) | \nFileRemove\n val) | \nFileRename\n val) | \nFileSeek\n val) | \nFileStat\n val) | \nFileSync\n val) | \nFileTime\n val) | \nFileTruncate\n val) | \nFileWrite\n val), \nU32\n val] val): \nFilePath\n val ?\n\n\nPublic, may raise an error.\n\n\nReturn a new path relative to this one.\n\n\nfun mkdir()\n\n\nfun val\n mkdir(optional must_create: \nBool\n val): \nBool\n val\n\n\nPublic.\n\n\nCreates the directory. Will recursively create each element. Returns true\nif the directory exists when we're done, false if it does not. If we do not\nhave the FileStat permission, this will return false even if the directory\ndoes exist.\n\n\nfun remove()\n\n\nfun val\n remove(): \nBool\n val\n\n\nPublic.\n\n\nRemove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.\n\n\nfun rename()\n\n\nfun box\n rename(new_path: \nFilePath\n val): \nBool\n val\n\n\nPublic.\n\n\nRename a file or directory.\n\n\nfun set_time()\n\n\nfun box\n set_time(atime: (\nI64\n val , \nI64\n val), mtime: (\nI64\n val , \nI64\n val)): \nBool\n val\n\n\nPublic.\n\n\nSet the last access and modification times of a path to the given values.\n\n\nfun symlink()\n\n\nfun box\n symlink(link_name: \nFilePath\n val): \nBool\n val\n\n\nPublic.\n\n\nCreate a symlink to a file or directory.\n\n\nfun touch()\n\n\nfun box\n touch(): \nBool\n val\n\n\nPublic.\n\n\nSet the last access and modification times of a path to now.\n\n\nfun walk()\n\n\nfun val\n walk(handler: \nWalkHandler\n ref, optional follow_links: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nWalks a directory structure starting at this.\n\n\nhandler(dir_path, dir_entries)\n will be called for each directory\nstarting with this one.  The handler can control which subdirectories are\nexpanded by removing them from the \ndir_entries\n list.",
            "title": "class FilePath"
        },
        {
            "location": "/files-FilePath/#public-fields",
            "text": "let caps:  Flags [(((((((((((((( FileCreate  val |  FileChmod  val) |  FileChown  val) |  FileLink  val) |  FileLookup  val) |  FileMkdir  val) |  FileRead  val) |  FileRemove  val) |  FileRename  val) |  FileSeek  val) |  FileStat  val) |  FileSync  val) |  FileTime  val) |  FileTruncate  val) |  FileWrite  val),  U32  val] ref  let path:  String  val",
            "title": "Public fields"
        },
        {
            "location": "/files-FilePath/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FilePath/#new-create",
            "text": "new create(base: (( FilePath  val |  AmbientAuth  val) |  None  val), path':  String  val, optional caps':  Flags [(((((((((((((( FileCreate  val |  FileChmod  val) |  FileChown  val) |  FileLink  val) |  FileLookup  val) |  FileMkdir  val) |  FileRead  val) |  FileRemove  val) |  FileRename  val) |  FileSeek  val) |  FileStat  val) |  FileSync  val) |  FileTime  val) |  FileTruncate  val) |  FileWrite  val),  U32  val] val) ?  Public, may raise an error.",
            "title": "new create()"
        },
        {
            "location": "/files-FilePath/#new-_create",
            "text": "new _create(path':  String  val, caps':  Flags [(((((((((((((( FileCreate  val |  FileChmod  val) |  FileChown  val) |  FileLink  val) |  FileLookup  val) |  FileMkdir  val) |  FileRead  val) |  FileRemove  val) |  FileRename  val) |  FileSeek  val) |  FileStat  val) |  FileSync  val) |  FileTime  val) |  FileTruncate  val) |  FileWrite  val),  U32  val] val)  Private.",
            "title": "new _create()"
        },
        {
            "location": "/files-FilePath/#new-mkdtemp",
            "text": "new mkdtemp(base: (( FilePath  val |  AmbientAuth  val) |  None  val), optional prefix:  String  val, optional caps':  Flags [(((((((((((((( FileCreate  val |  FileChmod  val) |  FileChown  val) |  FileLink  val) |  FileLookup  val) |  FileMkdir  val) |  FileRead  val) |  FileRemove  val) |  FileRename  val) |  FileSeek  val) |  FileStat  val) |  FileSync  val) |  FileTime  val) |  FileTruncate  val) |  FileWrite  val),  U32  val] val) ?  Public, may raise an error.",
            "title": "new mkdtemp()"
        },
        {
            "location": "/files-FilePath/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FilePath/#fun-canonical",
            "text": "fun val\n canonical():  FilePath  val ?  Public, may raise an error.  Return the equivalent canonical absolute path. Raise an error if there\nisn't one.",
            "title": "fun canonical()"
        },
        {
            "location": "/files-FilePath/#fun-chmod",
            "text": "fun box\n chmod(mode:  FileMode  box):  Bool  val  Public.  Set the FileMode for a path.",
            "title": "fun chmod()"
        },
        {
            "location": "/files-FilePath/#fun-chown",
            "text": "fun box\n chown(uid:  U32  val, gid:  U32  val):  Bool  val  Public.  Set the owner and group for a path. Does nothing on Windows.",
            "title": "fun chown()"
        },
        {
            "location": "/files-FilePath/#fun-exists",
            "text": "fun val\n exists():  Bool  val  Public.  Returns true if the path exists. Returns false for a broken symlink.",
            "title": "fun exists()"
        },
        {
            "location": "/files-FilePath/#fun-join",
            "text": "fun val\n join(path':  String  val, optional caps':  Flags [(((((((((((((( FileCreate  val |  FileChmod  val) |  FileChown  val) |  FileLink  val) |  FileLookup  val) |  FileMkdir  val) |  FileRead  val) |  FileRemove  val) |  FileRename  val) |  FileSeek  val) |  FileStat  val) |  FileSync  val) |  FileTime  val) |  FileTruncate  val) |  FileWrite  val),  U32  val] val):  FilePath  val ?  Public, may raise an error.  Return a new path relative to this one.",
            "title": "fun join()"
        },
        {
            "location": "/files-FilePath/#fun-mkdir",
            "text": "fun val\n mkdir(optional must_create:  Bool  val):  Bool  val  Public.  Creates the directory. Will recursively create each element. Returns true\nif the directory exists when we're done, false if it does not. If we do not\nhave the FileStat permission, this will return false even if the directory\ndoes exist.",
            "title": "fun mkdir()"
        },
        {
            "location": "/files-FilePath/#fun-remove",
            "text": "fun val\n remove():  Bool  val  Public.  Remove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.",
            "title": "fun remove()"
        },
        {
            "location": "/files-FilePath/#fun-rename",
            "text": "fun box\n rename(new_path:  FilePath  val):  Bool  val  Public.  Rename a file or directory.",
            "title": "fun rename()"
        },
        {
            "location": "/files-FilePath/#fun-set_time",
            "text": "fun box\n set_time(atime: ( I64  val ,  I64  val), mtime: ( I64  val ,  I64  val)):  Bool  val  Public.  Set the last access and modification times of a path to the given values.",
            "title": "fun set_time()"
        },
        {
            "location": "/files-FilePath/#fun-symlink",
            "text": "fun box\n symlink(link_name:  FilePath  val):  Bool  val  Public.  Create a symlink to a file or directory.",
            "title": "fun symlink()"
        },
        {
            "location": "/files-FilePath/#fun-touch",
            "text": "fun box\n touch():  Bool  val  Public.  Set the last access and modification times of a path to now.",
            "title": "fun touch()"
        },
        {
            "location": "/files-FilePath/#fun-walk",
            "text": "fun val\n walk(handler:  WalkHandler  ref, optional follow_links:  Bool  val):  None  val  Public.  Walks a directory structure starting at this.  handler(dir_path, dir_entries)  will be called for each directory\nstarting with this one.  The handler can control which subdirectories are\nexpanded by removing them from the  dir_entries  list.",
            "title": "fun walk()"
        },
        {
            "location": "/files-FileRead/",
            "text": "primitive FileRead\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileRead\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileRead\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileRead"
        },
        {
            "location": "/files-FileRead/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileRead/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileRead/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileRead/#fun-eq",
            "text": "fun box\n eq(that:  FileRead  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileRead/#fun-ne",
            "text": "fun box\n ne(that:  FileRead  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileRead/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileRemove/",
            "text": "primitive FileRemove\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileRemove\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileRemove\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileRemove"
        },
        {
            "location": "/files-FileRemove/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileRemove/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileRemove/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileRemove/#fun-eq",
            "text": "fun box\n eq(that:  FileRemove  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileRemove/#fun-ne",
            "text": "fun box\n ne(that:  FileRemove  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileRemove/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileRename/",
            "text": "primitive FileRename\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileRename\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileRename\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileRename"
        },
        {
            "location": "/files-FileRename/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileRename/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileRename/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileRename/#fun-eq",
            "text": "fun box\n eq(that:  FileRename  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileRename/#fun-ne",
            "text": "fun box\n ne(that:  FileRename  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileRename/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileSeek/",
            "text": "primitive FileSeek\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileSeek\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileSeek\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileSeek"
        },
        {
            "location": "/files-FileSeek/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileSeek/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileSeek/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileSeek/#fun-eq",
            "text": "fun box\n eq(that:  FileSeek  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileSeek/#fun-ne",
            "text": "fun box\n ne(that:  FileSeek  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileSeek/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileStat/",
            "text": "primitive FileStat\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileStat\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileStat\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileStat"
        },
        {
            "location": "/files-FileStat/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileStat/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileStat/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileStat/#fun-eq",
            "text": "fun box\n eq(that:  FileStat  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileStat/#fun-ne",
            "text": "fun box\n ne(that:  FileStat  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileStat/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileStream/",
            "text": "actor FileStream is \nOutStream\n tag\n\n\nIn package \"files\".\n\n\nPublic, default capability tag.\n\n\nAsynchronous access to a File object. Wraps file operations print, write,\nprintv and writev. The File will be disposed through File._final.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(file: \nFile\n iso)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe print()\n\n\nbe print(data: \nByteSeq\n val)\n\n\nPublic.\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe printv()\n\n\nbe printv(data: \nByteSeqIter\n val)\n\n\nPublic.\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe write()\n\n\nbe write(data: \nByteSeq\n val)\n\n\nPublic.\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe writev()\n\n\nbe writev(data: \nByteSeqIter\n val)\n\n\nPublic.\n\n\nWrite an iterable collection of ByteSeqs.",
            "title": "actor FileStream"
        },
        {
            "location": "/files-FileStream/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileStream/#new-create",
            "text": "new create(file:  File  iso)  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileStream/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/files-FileStream/#be-print",
            "text": "be print(data:  ByteSeq  val)  Public.  Print some bytes and insert a newline afterwards.",
            "title": "be print()"
        },
        {
            "location": "/files-FileStream/#be-printv",
            "text": "be printv(data:  ByteSeqIter  val)  Public.  Print an iterable collection of ByteSeqs.",
            "title": "be printv()"
        },
        {
            "location": "/files-FileStream/#be-write",
            "text": "be write(data:  ByteSeq  val)  Public.  Print some bytes without inserting a newline afterwards.",
            "title": "be write()"
        },
        {
            "location": "/files-FileStream/#be-writev",
            "text": "be writev(data:  ByteSeqIter  val)  Public.  Write an iterable collection of ByteSeqs.",
            "title": "be writev()"
        },
        {
            "location": "/files-FileSync/",
            "text": "primitive FileSync\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileSync\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileSync\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileSync"
        },
        {
            "location": "/files-FileSync/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileSync/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileSync/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileSync/#fun-eq",
            "text": "fun box\n eq(that:  FileSync  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileSync/#fun-ne",
            "text": "fun box\n ne(that:  FileSync  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileSync/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileTime/",
            "text": "primitive FileTime\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileTime\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileTime\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileTime"
        },
        {
            "location": "/files-FileTime/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileTime/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileTime/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileTime/#fun-eq",
            "text": "fun box\n eq(that:  FileTime  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileTime/#fun-ne",
            "text": "fun box\n ne(that:  FileTime  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileTime/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileTruncate/",
            "text": "primitive FileTruncate\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileTruncate\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileTruncate\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileTruncate"
        },
        {
            "location": "/files-FileTruncate/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileTruncate/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileTruncate/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileTruncate/#fun-eq",
            "text": "fun box\n eq(that:  FileTruncate  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileTruncate/#fun-ne",
            "text": "fun box\n ne(that:  FileTruncate  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileTruncate/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-FileWrite/",
            "text": "primitive FileWrite\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nFileWrite\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nFileWrite\n val): \nBool\n val\n\n\nPublic.\n\n\nfun value()\n\n\nfun box\n value(): \nU32\n val\n\n\nPublic.",
            "title": "primitive FileWrite"
        },
        {
            "location": "/files-FileWrite/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-FileWrite/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-FileWrite/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-FileWrite/#fun-eq",
            "text": "fun box\n eq(that:  FileWrite  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-FileWrite/#fun-ne",
            "text": "fun box\n ne(that:  FileWrite  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-FileWrite/#fun-value",
            "text": "fun box\n value():  U32  val  Public.",
            "title": "fun value()"
        },
        {
            "location": "/files-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"files\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/files-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/files-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/files-OpenFile/",
            "text": "primitive OpenFile\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nOpen a File for read only.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(from: \nFilePath\n val): (\nFile\n ref | (\nFileOK\n val | \nFileError\n val))\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nOpenFile\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nOpenFile\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive OpenFile"
        },
        {
            "location": "/files-OpenFile/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-OpenFile/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-OpenFile/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-OpenFile/#fun-apply",
            "text": "fun box\n apply(from:  FilePath  val): ( File  ref | ( FileOK  val |  FileError  val))  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/files-OpenFile/#fun-eq",
            "text": "fun box\n eq(that:  OpenFile  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-OpenFile/#fun-ne",
            "text": "fun box\n ne(that:  OpenFile  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-Path/",
            "text": "primitive Path\n\n\nIn package \"files\".\n\n\nPublic, default capability val.\n\n\nOperations on paths that do not require a capability. The operations can be\nused to manipulate path names, but give no access to the resulting paths.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun abs()\n\n\nfun box\n abs(path: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nReturns a cleaned, absolute path.\n\n\nfun base()\n\n\nfun box\n base(path: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nReturn the path after the last separator, or the whole path if there is no\nseparator.\n\n\nfun canonical()\n\n\nfun box\n canonical(path: \nString\n val): \nString\n val ?\n\n\nPublic, may raise an error.\n\n\nReturn the equivalent canonical absolute path. Raise an error if there\nisn't one.\n\n\nfun clean()\n\n\nfun box\n clean(path: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nReplace multiple separators with a single separator.\nConvert / to the OS separator.\nRemove instances of . from the path.\nRemove instances of .. and the preceding path element from the path.\nThe result will have no trailing slash unless it is a root directory.\nIf the result would be empty, \".\" will be returned instead.\n\n\nfun cwd()\n\n\nfun box\n cwd(): \nString\n val\n\n\nPublic.\n\n\nReturns the program's working directory. Setting the working directory is\nnot supported, as it is not concurrency-safe.\n\n\nfun dir()\n\n\nfun box\n dir(path: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nReturn a cleaned path before the last separator, or the whole path if there\nis no separator.\n\n\nfun _drive_letter()\n\n\nfun box\n _drive_letter(path: \nString\n val, optional offset: \nISize\n val): \nBool\n val\n\n\nPrivate.\n\n\nLook for a drive letter followed by a ':', returning true if we find it.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nPath\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ext()\n\n\nfun box\n ext(path: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nReturn the file extension, i.e. the part after the last dot as long as that\ndot is after all separators. Return an empty string for no extension.\n\n\nfun from_slash()\n\n\nfun box\n from_slash(path: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nChanges each / in the path to the OS specific separator.\n\n\nfun is_abs()\n\n\nfun box\n is_abs(path: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nReturn true if the path is an absolute path.\n\n\nfun is_list_sep()\n\n\nfun box\n is_list_sep(c: \nU8\n val): \nBool\n val\n\n\nPublic.\n\n\nDetermine if a byte is a path list separator.\n\n\nfun is_sep()\n\n\nfun box\n is_sep(c: \nU8\n val): \nBool\n val\n\n\nPublic.\n\n\nDetermine if a byte is a path separator.\n\n\nfun join()\n\n\nfun box\n join(path: \nString\n val, next_path: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nJoin two paths together. If the next_path is absolute, simply return it.\nThe returned path will be cleaned.\n\n\nfun list_sep()\n\n\nfun box\n list_sep(): \nString\n val\n\n\nPublic.\n\n\nReturn the path list separator as a string.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nPath\n val): \nBool\n val\n\n\nPublic.\n\n\nfun _network_share()\n\n\nfun box\n _network_share(path: \nString\n val, optional offset: \nISize\n val): \nString\n val\n\n\nPrivate.\n\n\nLook for a host, a \\, and a resource. Return the path up to that point if\nwe found one, otherwise an empty String.\n\n\nfun normcase()\n\n\nfun box\n normcase(path: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nNormalizes the case of path for the runtime platform.\n\n\nfun random()\n\n\nfun box\n random(optional len: \nUSize\n val): \nString\n val\n\n\nPublic.\n\n\nReturns a pseudo-random base, suitable as a temporary file name or\ndirectory name, but not guaranteed to not already exist.\n\n\nfun rel()\n\n\nfun box\n rel(to: \nString\n val, target: \nString\n val): \nString\n val ?\n\n\nPublic, may raise an error.\n\n\nReturns a path such that Path.join(to, Path.rel(to, target)) == target.\nRaises an error if this isn't possible.\n\n\nfun sep()\n\n\nfun tag\n sep(): \nString\n val\n\n\nPublic.\n\n\nReturn the path separator as a string.\n\n\nfun split()\n\n\nfun box\n split(path: \nString\n val, optional separator: \nString\n val): (\nString\n val , \nString\n val)\n\n\nPublic.\n\n\nSplits the path into a pair, (head, tail) where tail is the last pathname\ncomponent and head is everything leading up to that. The tail part will\nnever contain a slash; if path ends in a slash, tail will be empty. If\nthere is no slash in path, head will be empty. If path is empty, both head\nand tail are empty. The path in head will be cleaned before it is returned.\nIn all cases, join(head, tail) returns a path to the same location as path\n(but the strings may differ). Also see the functions dir() and base().\n\n\nfun split_list()\n\n\nfun box\n split_list(path: \nString\n val): \nArray\n[\nString\n val] iso^\n\n\nPublic.\n\n\nSeparate a list of paths into an array of cleaned paths.\n\n\nfun to_slash()\n\n\nfun box\n to_slash(path: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nChanges each OS specific separator in the path to /.\n\n\nfun volume()\n\n\nfun box\n volume(path: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nOn Windows, this returns the drive letter or UNC base at the beginning of\nthe path, if there is one. Otherwise, this returns an empty string.",
            "title": "primitive Path"
        },
        {
            "location": "/files-Path/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-Path/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-Path/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-Path/#fun-abs",
            "text": "fun box\n abs(path:  String  val):  String  val  Public.  Returns a cleaned, absolute path.",
            "title": "fun abs()"
        },
        {
            "location": "/files-Path/#fun-base",
            "text": "fun box\n base(path:  String  val):  String  val  Public.  Return the path after the last separator, or the whole path if there is no\nseparator.",
            "title": "fun base()"
        },
        {
            "location": "/files-Path/#fun-canonical",
            "text": "fun box\n canonical(path:  String  val):  String  val ?  Public, may raise an error.  Return the equivalent canonical absolute path. Raise an error if there\nisn't one.",
            "title": "fun canonical()"
        },
        {
            "location": "/files-Path/#fun-clean",
            "text": "fun box\n clean(path:  String  val):  String  val  Public.  Replace multiple separators with a single separator.\nConvert / to the OS separator.\nRemove instances of . from the path.\nRemove instances of .. and the preceding path element from the path.\nThe result will have no trailing slash unless it is a root directory.\nIf the result would be empty, \".\" will be returned instead.",
            "title": "fun clean()"
        },
        {
            "location": "/files-Path/#fun-cwd",
            "text": "fun box\n cwd():  String  val  Public.  Returns the program's working directory. Setting the working directory is\nnot supported, as it is not concurrency-safe.",
            "title": "fun cwd()"
        },
        {
            "location": "/files-Path/#fun-dir",
            "text": "fun box\n dir(path:  String  val):  String  val  Public.  Return a cleaned path before the last separator, or the whole path if there\nis no separator.",
            "title": "fun dir()"
        },
        {
            "location": "/files-Path/#fun-_drive_letter",
            "text": "fun box\n _drive_letter(path:  String  val, optional offset:  ISize  val):  Bool  val  Private.  Look for a drive letter followed by a ':', returning true if we find it.",
            "title": "fun _drive_letter()"
        },
        {
            "location": "/files-Path/#fun-eq",
            "text": "fun box\n eq(that:  Path  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-Path/#fun-ext",
            "text": "fun box\n ext(path:  String  val):  String  val  Public.  Return the file extension, i.e. the part after the last dot as long as that\ndot is after all separators. Return an empty string for no extension.",
            "title": "fun ext()"
        },
        {
            "location": "/files-Path/#fun-from_slash",
            "text": "fun box\n from_slash(path:  String  val):  String  val  Public.  Changes each / in the path to the OS specific separator.",
            "title": "fun from_slash()"
        },
        {
            "location": "/files-Path/#fun-is_abs",
            "text": "fun box\n is_abs(path:  String  val):  Bool  val  Public.  Return true if the path is an absolute path.",
            "title": "fun is_abs()"
        },
        {
            "location": "/files-Path/#fun-is_list_sep",
            "text": "fun box\n is_list_sep(c:  U8  val):  Bool  val  Public.  Determine if a byte is a path list separator.",
            "title": "fun is_list_sep()"
        },
        {
            "location": "/files-Path/#fun-is_sep",
            "text": "fun box\n is_sep(c:  U8  val):  Bool  val  Public.  Determine if a byte is a path separator.",
            "title": "fun is_sep()"
        },
        {
            "location": "/files-Path/#fun-join",
            "text": "fun box\n join(path:  String  val, next_path:  String  val):  String  val  Public.  Join two paths together. If the next_path is absolute, simply return it.\nThe returned path will be cleaned.",
            "title": "fun join()"
        },
        {
            "location": "/files-Path/#fun-list_sep",
            "text": "fun box\n list_sep():  String  val  Public.  Return the path list separator as a string.",
            "title": "fun list_sep()"
        },
        {
            "location": "/files-Path/#fun-ne",
            "text": "fun box\n ne(that:  Path  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-Path/#fun-_network_share",
            "text": "fun box\n _network_share(path:  String  val, optional offset:  ISize  val):  String  val  Private.  Look for a host, a \\, and a resource. Return the path up to that point if\nwe found one, otherwise an empty String.",
            "title": "fun _network_share()"
        },
        {
            "location": "/files-Path/#fun-normcase",
            "text": "fun box\n normcase(path:  String  val):  String  val  Public.  Normalizes the case of path for the runtime platform.",
            "title": "fun normcase()"
        },
        {
            "location": "/files-Path/#fun-random",
            "text": "fun box\n random(optional len:  USize  val):  String  val  Public.  Returns a pseudo-random base, suitable as a temporary file name or\ndirectory name, but not guaranteed to not already exist.",
            "title": "fun random()"
        },
        {
            "location": "/files-Path/#fun-rel",
            "text": "fun box\n rel(to:  String  val, target:  String  val):  String  val ?  Public, may raise an error.  Returns a path such that Path.join(to, Path.rel(to, target)) == target.\nRaises an error if this isn't possible.",
            "title": "fun rel()"
        },
        {
            "location": "/files-Path/#fun-sep",
            "text": "fun tag\n sep():  String  val  Public.  Return the path separator as a string.",
            "title": "fun sep()"
        },
        {
            "location": "/files-Path/#fun-split",
            "text": "fun box\n split(path:  String  val, optional separator:  String  val): ( String  val ,  String  val)  Public.  Splits the path into a pair, (head, tail) where tail is the last pathname\ncomponent and head is everything leading up to that. The tail part will\nnever contain a slash; if path ends in a slash, tail will be empty. If\nthere is no slash in path, head will be empty. If path is empty, both head\nand tail are empty. The path in head will be cleaned before it is returned.\nIn all cases, join(head, tail) returns a path to the same location as path\n(but the strings may differ). Also see the functions dir() and base().",
            "title": "fun split()"
        },
        {
            "location": "/files-Path/#fun-split_list",
            "text": "fun box\n split_list(path:  String  val):  Array [ String  val] iso^  Public.  Separate a list of paths into an array of cleaned paths.",
            "title": "fun split_list()"
        },
        {
            "location": "/files-Path/#fun-to_slash",
            "text": "fun box\n to_slash(path:  String  val):  String  val  Public.  Changes each OS specific separator in the path to /.",
            "title": "fun to_slash()"
        },
        {
            "location": "/files-Path/#fun-volume",
            "text": "fun box\n volume(path:  String  val):  String  val  Public.  On Windows, this returns the drive letter or UNC base at the beginning of\nthe path, if there is one. Otherwise, this returns an empty string.",
            "title": "fun volume()"
        },
        {
            "location": "/files-_PathDot/",
            "text": "primitive _PathDot\n\n\nIn package \"files\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PathDot\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PathDot\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PathDot"
        },
        {
            "location": "/files-_PathDot/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_PathDot/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_PathDot/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_PathDot/#fun-eq",
            "text": "fun box\n eq(that:  _PathDot  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-_PathDot/#fun-ne",
            "text": "fun box\n ne(that:  _PathDot  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-_PathDot2/",
            "text": "primitive _PathDot2\n\n\nIn package \"files\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PathDot2\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PathDot2\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PathDot2"
        },
        {
            "location": "/files-_PathDot2/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_PathDot2/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_PathDot2/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_PathDot2/#fun-eq",
            "text": "fun box\n eq(that:  _PathDot2  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-_PathDot2/#fun-ne",
            "text": "fun box\n ne(that:  _PathDot2  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-_PathOther/",
            "text": "primitive _PathOther\n\n\nIn package \"files\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PathOther\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PathOther\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PathOther"
        },
        {
            "location": "/files-_PathOther/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_PathOther/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_PathOther/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_PathOther/#fun-eq",
            "text": "fun box\n eq(that:  _PathOther  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-_PathOther/#fun-ne",
            "text": "fun box\n ne(that:  _PathOther  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-_PathSep/",
            "text": "primitive _PathSep\n\n\nIn package \"files\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PathSep\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PathSep\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PathSep"
        },
        {
            "location": "/files-_PathSep/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_PathSep/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_PathSep/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_PathSep/#fun-eq",
            "text": "fun box\n eq(that:  _PathSep  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/files-_PathSep/#fun-ne",
            "text": "fun box\n ne(that:  _PathSep  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/files-_PathState/",
            "text": "type _PathState is (((\n_PathSep\n val | \n_PathDot\n val) | \n_PathDot2\n val) | \n_PathOther\n val)\n\n\nIn package \"files\".\n\n\nPrivate.\n\n\nNo doc string provided.",
            "title": "type _PathState"
        },
        {
            "location": "/files-_TestMkdtemp/",
            "text": "class _TestMkdtemp is \nUnitTest\n ref\n\n\nIn package \"files\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestMkdtemp"
        },
        {
            "location": "/files-_TestMkdtemp/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_TestMkdtemp/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_TestMkdtemp/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_TestMkdtemp/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/files-_TestMkdtemp/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/files-_TestMkdtemp/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/files-_TestMkdtemp/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/files-_TestMkdtemp/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/files-_TestWalk/",
            "text": "class _TestWalk is \nUnitTest\n ref\n\n\nIn package \"files\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestWalk"
        },
        {
            "location": "/files-_TestWalk/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/files-_TestWalk/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/files-_TestWalk/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-_TestWalk/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/files-_TestWalk/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/files-_TestWalk/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/files-_TestWalk/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/files-_TestWalk/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/files-WalkHandler/",
            "text": "interface WalkHandler\n\n\nIn package \"files\".\n\n\nPublic, default capability ref.\n\n\nA handler for \nFilePath.walk\n.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(dir_path: \nFilePath\n val, dir_entries: \nArray\n[\nString\n val] ref): \nNone\n val\n\n\nPublic.",
            "title": "interface WalkHandler"
        },
        {
            "location": "/files-WalkHandler/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/files-WalkHandler/#fun-apply",
            "text": "fun ref\n apply(dir_path:  FilePath  val, dir_entries:  Array [ String  val] ref):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/glob--index/",
            "text": "No package doc string provided for glob.",
            "title": "Package"
        },
        {
            "location": "/glob-_FileHelper/",
            "text": "primitive _FileHelper\n\n\nIn package \"glob\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_FileHelper\n val): \nBool\n val\n\n\nPublic.\n\n\nfun make_files()\n\n\nfun box\n make_files(h: \nTestHelper\n val, files: \nArray\n[\nString\n val] ref): \nFilePath\n val ?\n\n\nPublic, may raise an error.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_FileHelper\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _FileHelper"
        },
        {
            "location": "/glob-_FileHelper/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/glob-_FileHelper/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/glob-_FileHelper/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/glob-_FileHelper/#fun-eq",
            "text": "fun box\n eq(that:  _FileHelper  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/glob-_FileHelper/#fun-make_files",
            "text": "fun box\n make_files(h:  TestHelper  val, files:  Array [ String  val] ref):  FilePath  val ?  Public, may raise an error.",
            "title": "fun make_files()"
        },
        {
            "location": "/glob-_FileHelper/#fun-ne",
            "text": "fun box\n ne(that:  _FileHelper  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/glob-Glob/",
            "text": "primitive Glob\n\n\nIn package \"glob\".\n\n\nPublic, default capability val.\n\n\nFilename matching and globbing with shell patterns.\n\n\nfnmatch(file_name, pattern)\n matches according to the local convention.\n\nfnmatchcase(file_name, pattern)\n always takes case into account.  The\nfunctions operate by translating the pattern into a regular expression.\n\n\nThe function translate(PATTERN) returns a regular expression corresponding to\nPATTERN.\n\n\nPatterns are Unix shell style:\n    *       | matches multiple characters within a directory\n    **      | matches multiple characters across directories\n    ?       | matches any single character\n    [seq]   | matches any character in seq\n    [!seq]  | matches any char not in seq\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun _apply_glob_to_walk()\n\n\nfun box\n _apply_glob_to_walk(pattern: \nString\n val, compiled_pattern: \nRegex\n ref, root: \nFilePath\n val, glob_handler: \nGlobHandler\n ref, dir: \nFilePath\n val, entries: \nArray\n[\nString\n val] ref): \nNone\n val\n\n\nPrivate.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nGlob\n val): \nBool\n val\n\n\nPublic.\n\n\nfun filter()\n\n\nfun box\n filter(names: \nArray\n[\nString\n val] ref, pattern: \nString\n val): \nArray\n[(\nString\n val , \nArray\n[\nString\n val] ref)] val\n\n\nPublic.\n\n\nReturns \nname\n and the matching subgroups for \nnames\n that match \npattern\n.\n\n\nAll strings are first case-normalized if the operating system requires it.\n\n\nfun fnmatch()\n\n\nfun box\n fnmatch(name: \nString\n val, pattern: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nTests whether \nname\n matches \npattern\n.\n\n\nAn initial period in \nname\n is not special.\n\n\nBoth \nname\n and \npattern\n are first case-normalized if the operating system\nrequires it.  If you don't want this, use \nfnmatchcase\n.\n\n\nfun fnmatchcase()\n\n\nfun box\n fnmatchcase(name: \nString\n val, pattern: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nTests whether \nname\n matches \npattern\n, including case.\n\n\nfun glob()\n\n\nfun box\n glob(root_path: \nFilePath\n val, pattern: \nString\n val): \nArray\n[\nFilePath\n val] ref\n\n\nPublic.\n\n\nReturns an Array[FilePath] for each path below \nroot_path\n that matches\n\npattern\n.\n\n\nThe pattern may contain shell-style wildcards.  See the type documentation\non \nGlob\n for details.\n\n\nfun iglob()\n\n\nfun box\n iglob(root: \nFilePath\n val, pattern: \nString\n val, glob_handler: \nGlobHandler\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalls \nGlobHandler.apply\n for each path below \nroot\n that matches \npattern\n.\n\n\nThe pattern may contain shell-style wildcards.  See the type documentation\non \nGlob\n for details.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nGlob\n val): \nBool\n val\n\n\nPublic.\n\n\nfun translate()\n\n\nfun box\n translate(pat: \nString\n val): \nString\n ref^\n\n\nPublic.\n\n\nTranslates a shell \npattern\n to a regular expression.\nThere is no way to quote meta-characters.",
            "title": "primitive Glob"
        },
        {
            "location": "/glob-Glob/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/glob-Glob/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/glob-Glob/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/glob-Glob/#fun-_apply_glob_to_walk",
            "text": "fun box\n _apply_glob_to_walk(pattern:  String  val, compiled_pattern:  Regex  ref, root:  FilePath  val, glob_handler:  GlobHandler  ref, dir:  FilePath  val, entries:  Array [ String  val] ref):  None  val  Private.",
            "title": "fun _apply_glob_to_walk()"
        },
        {
            "location": "/glob-Glob/#fun-eq",
            "text": "fun box\n eq(that:  Glob  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/glob-Glob/#fun-filter",
            "text": "fun box\n filter(names:  Array [ String  val] ref, pattern:  String  val):  Array [( String  val ,  Array [ String  val] ref)] val  Public.  Returns  name  and the matching subgroups for  names  that match  pattern .  All strings are first case-normalized if the operating system requires it.",
            "title": "fun filter()"
        },
        {
            "location": "/glob-Glob/#fun-fnmatch",
            "text": "fun box\n fnmatch(name:  String  val, pattern:  String  val):  Bool  val  Public.  Tests whether  name  matches  pattern .  An initial period in  name  is not special.  Both  name  and  pattern  are first case-normalized if the operating system\nrequires it.  If you don't want this, use  fnmatchcase .",
            "title": "fun fnmatch()"
        },
        {
            "location": "/glob-Glob/#fun-fnmatchcase",
            "text": "fun box\n fnmatchcase(name:  String  val, pattern:  String  val):  Bool  val  Public.  Tests whether  name  matches  pattern , including case.",
            "title": "fun fnmatchcase()"
        },
        {
            "location": "/glob-Glob/#fun-glob",
            "text": "fun box\n glob(root_path:  FilePath  val, pattern:  String  val):  Array [ FilePath  val] ref  Public.  Returns an Array[FilePath] for each path below  root_path  that matches pattern .  The pattern may contain shell-style wildcards.  See the type documentation\non  Glob  for details.",
            "title": "fun glob()"
        },
        {
            "location": "/glob-Glob/#fun-iglob",
            "text": "fun box\n iglob(root:  FilePath  val, pattern:  String  val, glob_handler:  GlobHandler  ref):  None  val  Public.  Calls  GlobHandler.apply  for each path below  root  that matches  pattern .  The pattern may contain shell-style wildcards.  See the type documentation\non  Glob  for details.",
            "title": "fun iglob()"
        },
        {
            "location": "/glob-Glob/#fun-ne",
            "text": "fun box\n ne(that:  Glob  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/glob-Glob/#fun-translate",
            "text": "fun box\n translate(pat:  String  val):  String  ref^  Public.  Translates a shell  pattern  to a regular expression.\nThere is no way to quote meta-characters.",
            "title": "fun translate()"
        },
        {
            "location": "/glob-GlobHandler/",
            "text": "interface GlobHandler\n\n\nIn package \"glob\".\n\n\nPublic, default capability ref.\n\n\nA handler for \nGlob.iglob\n.  Each path which matches the glob will be called\nwith the groups that matched the various wildcards supplies in the\n\nmatch_groups\n array.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(path: \nFilePath\n val, match_groups: \nArray\n[\nString\n val] ref): \nNone\n val\n\n\nPublic.",
            "title": "interface GlobHandler"
        },
        {
            "location": "/glob-GlobHandler/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/glob-GlobHandler/#fun-apply",
            "text": "fun ref\n apply(path:  FilePath  val, match_groups:  Array [ String  val] ref):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/glob-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"glob\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/glob-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/glob-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/glob-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/glob-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/glob-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/glob-_TestFilter/",
            "text": "class _TestFilter is \nUnitTest\n ref\n\n\nIn package \"glob\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestFilter"
        },
        {
            "location": "/glob-_TestFilter/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/glob-_TestFilter/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/glob-_TestFilter/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/glob-_TestFilter/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/glob-_TestFilter/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/glob-_TestFilter/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/glob-_TestFilter/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/glob-_TestFilter/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/glob-_TestFnMatch/",
            "text": "class _TestFnMatch is \nUnitTest\n ref\n\n\nIn package \"glob\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(glob: \nString\n val, path: \nString\n val, matches: \nBool\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestFnMatch"
        },
        {
            "location": "/glob-_TestFnMatch/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/glob-_TestFnMatch/#new-create",
            "text": "new create(glob:  String  val, path:  String  val, matches:  Bool  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/glob-_TestFnMatch/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/glob-_TestFnMatch/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/glob-_TestFnMatch/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/glob-_TestFnMatch/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/glob-_TestFnMatch/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/glob-_TestFnMatch/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/glob-_TestFnMatchCase/",
            "text": "class _TestFnMatchCase is \nUnitTest\n ref\n\n\nIn package \"glob\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestFnMatchCase"
        },
        {
            "location": "/glob-_TestFnMatchCase/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/glob-_TestFnMatchCase/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/glob-_TestFnMatchCase/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/glob-_TestFnMatchCase/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/glob-_TestFnMatchCase/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/glob-_TestFnMatchCase/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/glob-_TestFnMatchCase/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/glob-_TestFnMatchCase/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/glob-_TestGlob/",
            "text": "class _TestGlob is \nUnitTest\n ref\n\n\nIn package \"glob\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun _rel()\n\n\nfun box\n _rel(top: \nFilePath\n val, files: \nArray\n[\nFilePath\n val] ref): \nArray\n[\nString\n val] ref ?\n\n\nPrivate, may raise an error.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestGlob"
        },
        {
            "location": "/glob-_TestGlob/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/glob-_TestGlob/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/glob-_TestGlob/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/glob-_TestGlob/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/glob-_TestGlob/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/glob-_TestGlob/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/glob-_TestGlob/#fun-_rel",
            "text": "fun box\n _rel(top:  FilePath  val, files:  Array [ FilePath  val] ref):  Array [ String  val] ref ?  Private, may raise an error.",
            "title": "fun _rel()"
        },
        {
            "location": "/glob-_TestGlob/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/glob-_TestGlob/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/glob-_TestIGlob/",
            "text": "class _TestIGlob is \nUnitTest\n ref\n\n\nIn package \"glob\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun _rel()\n\n\nfun box\n _rel(top: \nFilePath\n val, files: \nArray\n[\nFilePath\n val] ref): \nArray\n[\nString\n val] ref ?\n\n\nPrivate, may raise an error.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestIGlob"
        },
        {
            "location": "/glob-_TestIGlob/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/glob-_TestIGlob/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/glob-_TestIGlob/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/glob-_TestIGlob/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/glob-_TestIGlob/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/glob-_TestIGlob/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/glob-_TestIGlob/#fun-_rel",
            "text": "fun box\n _rel(top:  FilePath  val, files:  Array [ FilePath  val] ref):  Array [ String  val] ref ?  Private, may raise an error.",
            "title": "fun _rel()"
        },
        {
            "location": "/glob-_TestIGlob/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/glob-_TestIGlob/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json--index/",
            "text": "No package doc string provided for json.",
            "title": "Package"
        },
        {
            "location": "/json-JsonArray/",
            "text": "class JsonArray\n\n\nIn package \"json\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nvar data: \nArray\n[((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref)] ref\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional len: \nUSize\n val)\n\n\nPublic.\n\n\nCreate an array with zero elements, but space for len elements.\n\n\nnew from_array()\n\n\nnew from_array(data': \nArray\n[((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref)] ref)\n\n\nPublic.\n\n\nCreate a Json array from an actual array.\n\n\nFunctions\n\n\nfun string()\n\n\nfun box\n string(optional indent: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nGenerate string representation of this array.",
            "title": "class JsonArray"
        },
        {
            "location": "/json-JsonArray/#public-fields",
            "text": "var data:  Array [(((((( F64  val |  I64  val) |  Bool  val) |  None  val) |  String  val) |  JsonArray  ref) |  JsonObject  ref)] ref",
            "title": "Public fields"
        },
        {
            "location": "/json-JsonArray/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-JsonArray/#new-create",
            "text": "new create(optional len:  USize  val)  Public.  Create an array with zero elements, but space for len elements.",
            "title": "new create()"
        },
        {
            "location": "/json-JsonArray/#new-from_array",
            "text": "new from_array(data':  Array [(((((( F64  val |  I64  val) |  Bool  val) |  None  val) |  String  val) |  JsonArray  ref) |  JsonObject  ref)] ref)  Public.  Create a Json array from an actual array.",
            "title": "new from_array()"
        },
        {
            "location": "/json-JsonArray/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-JsonArray/#fun-string",
            "text": "fun box\n string(optional indent:  String  val):  String  val  Public.  Generate string representation of this array.",
            "title": "fun string()"
        },
        {
            "location": "/json-JsonDoc/",
            "text": "class JsonDoc\n\n\nIn package \"json\".\n\n\nPublic, default capability ref.\n\n\nTop level JSON type containing an entire document.\nA JSON document consists of exactly 1 value.\n\n\nPublic fields\n\n\n\n\nvar data: ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref)\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun _dump_whitespace()\n\n\nfun ref\n _dump_whitespace(): \nNone\n val\n\n\nPrivate.\n\n\nDump all whitespace at the current read location in source, if any.\n\n\nfun _error()\n\n\nfun ref\n _error(msg: \nString\n val): \nNone\n val\n\n\nPrivate.\n\n\nRecord an error with the given message.\n\n\nfun _get_char()\n\n\nfun ref\n _get_char(optional eof_context: (\nString\n val | \nNone\n val)): \nU8\n val ?\n\n\nPrivate, may raise an error.\n\n\nGet and consume the next char in the source.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.\n\n\nfun _last_char()\n\n\nfun ref\n _last_char(): \nString\n val\n\n\nPrivate.\n\n\nGet the last character peeked or got from the source as a String.\nFor use generating error messages.\n\n\nfun parse()\n\n\nfun ref\n parse(source: \nString\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nParse the given string as a JSON file, building a document.\nRaise error on invalid JSON in given source.\n\n\nfun _parse_array()\n\n\nfun ref\n _parse_array(): \nJsonArray\n ref ?\n\n\nPrivate, may raise an error.\n\n\nParse an array, the leading [ of which has already been peeked.\n\n\nfun _parse_decimal()\n\n\nfun ref\n _parse_decimal(): (\nI64\n val , \nU8\n val) ?\n\n\nPrivate, may raise an error.\n\n\nParse a decimal integer which must appear immediately in the source.\n\n\nfun _parse_escape()\n\n\nfun ref\n _parse_escape(): \nString\n val ?\n\n\nPrivate, may raise an error.\n\n\nProcess a string escape sequence, the leading \\ of which has already been\nconsumed.\n\n\nfun _parse_keyword()\n\n\nfun ref\n _parse_keyword(): (\nBool\n val | \nNone\n val) ?\n\n\nPrivate, may raise an error.\n\n\nParse a keyword, the first letter of which has already been peeked.\n\n\nfun _parse_number()\n\n\nfun ref\n _parse_number(): (\nF64\n val | \nI64\n val) ?\n\n\nPrivate, may raise an error.\n\n\nParse a number, the leading character of which has already been peeked.\n\n\nfun _parse_object()\n\n\nfun ref\n _parse_object(): \nJsonObject\n ref ?\n\n\nPrivate, may raise an error.\n\n\nParse a JSON object, the leading { of which has already been peeked.\n\n\nfun parse_report()\n\n\nfun box\n parse_report(): (\nUSize\n val , \nString\n val)\n\n\nPublic.\n\n\nGive details of the error that occured last time we attempted to parse.\nIf parse was successful returns (0, \"\").\n\n\nfun _parse_string()\n\n\nfun ref\n _parse_string(context: \nString\n val): \nString\n val ?\n\n\nPrivate, may raise an error.\n\n\nParse a string, which must be the next thing found, other than whitesapce.\n\n\nfun _parse_unicode_digits()\n\n\nfun ref\n _parse_unicode_digits(): \nU32\n val ?\n\n\nPrivate, may raise an error.\n\n\nParse the hex digits of a Unicode escape sequence, the leading \\u of which\nhas already been consumed, and return the encoded character value.\n\n\nfun _parse_unicode_escape()\n\n\nfun ref\n _parse_unicode_escape(): \nString\n val ?\n\n\nPrivate, may raise an error.\n\n\nProcess a Unicode escape sequence, the leading \\u of which has already been\nconsumed.\n\n\nfun _parse_value()\n\n\nfun ref\n _parse_value(context: \nString\n val): ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref) ?\n\n\nPrivate, may raise an error.\n\n\nParse a single JSON value of any type, which MUST be present.\nRaise error on invalid or missing value.\n\n\nfun _peek_char()\n\n\nfun ref\n _peek_char(optional eof_context: (\nString\n val | \nNone\n val)): \nU8\n val ?\n\n\nPrivate, may raise an error.\n\n\nPeek the next char in the source, without consuming it.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.\n\n\nfun string()\n\n\nfun box\n string(): \nString\n val\n\n\nPublic.\n\n\nGenerate string representation of this document.",
            "title": "class JsonDoc"
        },
        {
            "location": "/json-JsonDoc/#public-fields",
            "text": "var data: (((((( F64  val |  I64  val) |  Bool  val) |  None  val) |  String  val) |  JsonArray  ref) |  JsonObject  ref)",
            "title": "Public fields"
        },
        {
            "location": "/json-JsonDoc/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-JsonDoc/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-JsonDoc/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-JsonDoc/#fun-_dump_whitespace",
            "text": "fun ref\n _dump_whitespace():  None  val  Private.  Dump all whitespace at the current read location in source, if any.",
            "title": "fun _dump_whitespace()"
        },
        {
            "location": "/json-JsonDoc/#fun-_error",
            "text": "fun ref\n _error(msg:  String  val):  None  val  Private.  Record an error with the given message.",
            "title": "fun _error()"
        },
        {
            "location": "/json-JsonDoc/#fun-_get_char",
            "text": "fun ref\n _get_char(optional eof_context: ( String  val |  None  val)):  U8  val ?  Private, may raise an error.  Get and consume the next char in the source.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.",
            "title": "fun _get_char()"
        },
        {
            "location": "/json-JsonDoc/#fun-_last_char",
            "text": "fun ref\n _last_char():  String  val  Private.  Get the last character peeked or got from the source as a String.\nFor use generating error messages.",
            "title": "fun _last_char()"
        },
        {
            "location": "/json-JsonDoc/#fun-parse",
            "text": "fun ref\n parse(source:  String  val):  None  val ?  Public, may raise an error.  Parse the given string as a JSON file, building a document.\nRaise error on invalid JSON in given source.",
            "title": "fun parse()"
        },
        {
            "location": "/json-JsonDoc/#fun-_parse_array",
            "text": "fun ref\n _parse_array():  JsonArray  ref ?  Private, may raise an error.  Parse an array, the leading [ of which has already been peeked.",
            "title": "fun _parse_array()"
        },
        {
            "location": "/json-JsonDoc/#fun-_parse_decimal",
            "text": "fun ref\n _parse_decimal(): ( I64  val ,  U8  val) ?  Private, may raise an error.  Parse a decimal integer which must appear immediately in the source.",
            "title": "fun _parse_decimal()"
        },
        {
            "location": "/json-JsonDoc/#fun-_parse_escape",
            "text": "fun ref\n _parse_escape():  String  val ?  Private, may raise an error.  Process a string escape sequence, the leading \\ of which has already been\nconsumed.",
            "title": "fun _parse_escape()"
        },
        {
            "location": "/json-JsonDoc/#fun-_parse_keyword",
            "text": "fun ref\n _parse_keyword(): ( Bool  val |  None  val) ?  Private, may raise an error.  Parse a keyword, the first letter of which has already been peeked.",
            "title": "fun _parse_keyword()"
        },
        {
            "location": "/json-JsonDoc/#fun-_parse_number",
            "text": "fun ref\n _parse_number(): ( F64  val |  I64  val) ?  Private, may raise an error.  Parse a number, the leading character of which has already been peeked.",
            "title": "fun _parse_number()"
        },
        {
            "location": "/json-JsonDoc/#fun-_parse_object",
            "text": "fun ref\n _parse_object():  JsonObject  ref ?  Private, may raise an error.  Parse a JSON object, the leading { of which has already been peeked.",
            "title": "fun _parse_object()"
        },
        {
            "location": "/json-JsonDoc/#fun-parse_report",
            "text": "fun box\n parse_report(): ( USize  val ,  String  val)  Public.  Give details of the error that occured last time we attempted to parse.\nIf parse was successful returns (0, \"\").",
            "title": "fun parse_report()"
        },
        {
            "location": "/json-JsonDoc/#fun-_parse_string",
            "text": "fun ref\n _parse_string(context:  String  val):  String  val ?  Private, may raise an error.  Parse a string, which must be the next thing found, other than whitesapce.",
            "title": "fun _parse_string()"
        },
        {
            "location": "/json-JsonDoc/#fun-_parse_unicode_digits",
            "text": "fun ref\n _parse_unicode_digits():  U32  val ?  Private, may raise an error.  Parse the hex digits of a Unicode escape sequence, the leading \\u of which\nhas already been consumed, and return the encoded character value.",
            "title": "fun _parse_unicode_digits()"
        },
        {
            "location": "/json-JsonDoc/#fun-_parse_unicode_escape",
            "text": "fun ref\n _parse_unicode_escape():  String  val ?  Private, may raise an error.  Process a Unicode escape sequence, the leading \\u of which has already been\nconsumed.",
            "title": "fun _parse_unicode_escape()"
        },
        {
            "location": "/json-JsonDoc/#fun-_parse_value",
            "text": "fun ref\n _parse_value(context:  String  val): (((((( F64  val |  I64  val) |  Bool  val) |  None  val) |  String  val) |  JsonArray  ref) |  JsonObject  ref) ?  Private, may raise an error.  Parse a single JSON value of any type, which MUST be present.\nRaise error on invalid or missing value.",
            "title": "fun _parse_value()"
        },
        {
            "location": "/json-JsonDoc/#fun-_peek_char",
            "text": "fun ref\n _peek_char(optional eof_context: ( String  val |  None  val)):  U8  val ?  Private, may raise an error.  Peek the next char in the source, without consuming it.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.",
            "title": "fun _peek_char()"
        },
        {
            "location": "/json-JsonDoc/#fun-string",
            "text": "fun box\n string():  String  val  Public.  Generate string representation of this document.",
            "title": "fun string()"
        },
        {
            "location": "/json-JsonObject/",
            "text": "class JsonObject\n\n\nIn package \"json\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nvar data: \nHashMap\n[\nString\n val, ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref), \nHashEq\n[\nString\n val] val] ref\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional prealloc: \nUSize\n val)\n\n\nPublic.\n\n\nCreate a map with space for prealloc elements without triggering a\nresize. Defaults to 6.\n\n\nnew from_map()\n\n\nnew from_map(data': \nHashMap\n[\nString\n val, ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref), \nHashEq\n[\nString\n val] val] ref)\n\n\nPublic.\n\n\nCreate a Json object from a map.\n\n\nFunctions\n\n\nfun string()\n\n\nfun box\n string(optional indent: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nGenerate string representation of this object.",
            "title": "class JsonObject"
        },
        {
            "location": "/json-JsonObject/#public-fields",
            "text": "var data:  HashMap [ String  val, (((((( F64  val |  I64  val) |  Bool  val) |  None  val) |  String  val) |  JsonArray  ref) |  JsonObject  ref),  HashEq [ String  val] val] ref",
            "title": "Public fields"
        },
        {
            "location": "/json-JsonObject/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-JsonObject/#new-create",
            "text": "new create(optional prealloc:  USize  val)  Public.  Create a map with space for prealloc elements without triggering a\nresize. Defaults to 6.",
            "title": "new create()"
        },
        {
            "location": "/json-JsonObject/#new-from_map",
            "text": "new from_map(data':  HashMap [ String  val, (((((( F64  val |  I64  val) |  Bool  val) |  None  val) |  String  val) |  JsonArray  ref) |  JsonObject  ref),  HashEq [ String  val] val] ref)  Public.  Create a Json object from a map.",
            "title": "new from_map()"
        },
        {
            "location": "/json-JsonObject/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-JsonObject/#fun-string",
            "text": "fun box\n string(optional indent:  String  val):  String  val  Public.  Generate string representation of this object.",
            "title": "fun string()"
        },
        {
            "location": "/json-_JsonPrint/",
            "text": "primitive _JsonPrint\n\n\nIn package \"json\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_JsonPrint\n val): \nBool\n val\n\n\nPublic.\n\n\nfun _escaped_string()\n\n\nfun box\n _escaped_string(s: \nString\n val): \nString\n val\n\n\nPrivate.\n\n\nGenerate a version of the given string with escapes for all non-printable\nand non-ASCII characters.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_JsonPrint\n val): \nBool\n val\n\n\nPublic.\n\n\nfun _string()\n\n\nfun box\n _string(d: ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n box) | \nJsonObject\n box), indent: \nString\n val): \nString\n val\n\n\nPrivate.\n\n\nGenerate string representation of the given data.",
            "title": "primitive _JsonPrint"
        },
        {
            "location": "/json-_JsonPrint/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_JsonPrint/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_JsonPrint/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_JsonPrint/#fun-eq",
            "text": "fun box\n eq(that:  _JsonPrint  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/json-_JsonPrint/#fun-_escaped_string",
            "text": "fun box\n _escaped_string(s:  String  val):  String  val  Private.  Generate a version of the given string with escapes for all non-printable\nand non-ASCII characters.",
            "title": "fun _escaped_string()"
        },
        {
            "location": "/json-_JsonPrint/#fun-ne",
            "text": "fun box\n ne(that:  _JsonPrint  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/json-_JsonPrint/#fun-_string",
            "text": "fun box\n _string(d: (((((( F64  val |  I64  val) |  Bool  val) |  None  val) |  String  val) |  JsonArray  box) |  JsonObject  box), indent:  String  val):  String  val  Private.  Generate string representation of the given data.",
            "title": "fun _string()"
        },
        {
            "location": "/json-JsonType/",
            "text": "type JsonType is ((((((\nF64\n val | \nI64\n val) | \nBool\n val) | \nNone\n val) | \nString\n val) | \nJsonArray\n ref) | \nJsonObject\n ref)\n\n\nIn package \"json\".\n\n\nPublic.\n\n\nAll JSON data types.",
            "title": "type JsonType"
        },
        {
            "location": "/json-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"json\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/json-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/json-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/json-_TestParseArray/",
            "text": "class _TestParseArray is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json parsing of arrays.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestParseArray"
        },
        {
            "location": "/json-_TestParseArray/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestParseArray/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestParseArray/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestParseArray/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestParseArray/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestParseArray/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestParseArray/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestParseArray/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestParseBasic/",
            "text": "class _TestParseBasic is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json basic parsing, eg allowing whitespace.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestParseBasic"
        },
        {
            "location": "/json-_TestParseBasic/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestParseBasic/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestParseBasic/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestParseBasic/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestParseBasic/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestParseBasic/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestParseBasic/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestParseBasic/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestParseKeyword/",
            "text": "class _TestParseKeyword is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json parsing of keywords.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestParseKeyword"
        },
        {
            "location": "/json-_TestParseKeyword/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestParseKeyword/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestParseKeyword/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestParseKeyword/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestParseKeyword/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestParseKeyword/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestParseKeyword/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestParseKeyword/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestParseNumber/",
            "text": "class _TestParseNumber is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json parsing of numbers.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestParseNumber"
        },
        {
            "location": "/json-_TestParseNumber/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestParseNumber/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestParseNumber/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestParseNumber/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestParseNumber/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestParseNumber/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestParseNumber/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestParseNumber/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestParseObject/",
            "text": "class _TestParseObject is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json parsing of objects.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestParseObject"
        },
        {
            "location": "/json-_TestParseObject/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestParseObject/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestParseObject/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestParseObject/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestParseObject/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestParseObject/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestParseObject/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestParseObject/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestParsePrint/",
            "text": "class _TestParsePrint is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json parsing a complex example and then reprinting it.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestParsePrint"
        },
        {
            "location": "/json-_TestParsePrint/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestParsePrint/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestParsePrint/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestParsePrint/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestParsePrint/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestParsePrint/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestParsePrint/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestParsePrint/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestParseRFC1/",
            "text": "class _TestParseRFC1 is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json parsing of first example from RFC7159.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestParseRFC1"
        },
        {
            "location": "/json-_TestParseRFC1/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestParseRFC1/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestParseRFC1/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestParseRFC1/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestParseRFC1/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestParseRFC1/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestParseRFC1/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestParseRFC1/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestParseRFC2/",
            "text": "class _TestParseRFC2 is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json parsing of second example from RFC7159.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestParseRFC2"
        },
        {
            "location": "/json-_TestParseRFC2/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestParseRFC2/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestParseRFC2/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestParseRFC2/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestParseRFC2/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestParseRFC2/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestParseRFC2/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestParseRFC2/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestParseString/",
            "text": "class _TestParseString is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json parsing of strings.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestParseString"
        },
        {
            "location": "/json-_TestParseString/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestParseString/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestParseString/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestParseString/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestParseString/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestParseString/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestParseString/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestParseString/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestPrintArray/",
            "text": "class _TestPrintArray is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json printing of arrays.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestPrintArray"
        },
        {
            "location": "/json-_TestPrintArray/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestPrintArray/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestPrintArray/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestPrintArray/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestPrintArray/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestPrintArray/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestPrintArray/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestPrintArray/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestPrintKeyword/",
            "text": "class _TestPrintKeyword is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json printing of keywords.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestPrintKeyword"
        },
        {
            "location": "/json-_TestPrintKeyword/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestPrintKeyword/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestPrintKeyword/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestPrintKeyword/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestPrintKeyword/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestPrintKeyword/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestPrintKeyword/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestPrintKeyword/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestPrintNumber/",
            "text": "class _TestPrintNumber is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json printing of numbers.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestPrintNumber"
        },
        {
            "location": "/json-_TestPrintNumber/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestPrintNumber/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestPrintNumber/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestPrintNumber/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestPrintNumber/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestPrintNumber/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestPrintNumber/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestPrintNumber/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestPrintObject/",
            "text": "class _TestPrintObject is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json printing of objects.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestPrintObject"
        },
        {
            "location": "/json-_TestPrintObject/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestPrintObject/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestPrintObject/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestPrintObject/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestPrintObject/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestPrintObject/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestPrintObject/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestPrintObject/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/json-_TestPrintString/",
            "text": "class _TestPrintString is \nUnitTest\n ref\n\n\nIn package \"json\".\n\n\nPrivate, default capability iso.\n\n\nTest Json printing of strings.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestPrintString"
        },
        {
            "location": "/json-_TestPrintString/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/json-_TestPrintString/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/json-_TestPrintString/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/json-_TestPrintString/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/json-_TestPrintString/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/json-_TestPrintString/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/json-_TestPrintString/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/json-_TestPrintString/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/math--index/",
            "text": "No package doc string provided for math.",
            "title": "Package"
        },
        {
            "location": "/math-Fibonacci/",
            "text": "class Fibonacci[optional A: (\nInteger\n[A val] val \n ((((((\nU8\n val | \nU16\n val) | \nU32\n val) | \nU64\n val) | \nU128\n val) | \nULong\n val) | \nUSize\n val))] is \nIterator\n[A val] ref\n\n\nIn package \"math\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(n: \nU8\n val): A val\n\n\nPublic.\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun next()\n\n\nfun ref\n next(): A val\n\n\nPublic.",
            "title": "class Fibonacci"
        },
        {
            "location": "/math-Fibonacci/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/math-Fibonacci/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/math-Fibonacci/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/math-Fibonacci/#fun-apply",
            "text": "fun box\n apply(n:  U8  val): A val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/math-Fibonacci/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/math-Fibonacci/#fun-next",
            "text": "fun ref\n next(): A val  Public.",
            "title": "fun next()"
        },
        {
            "location": "/net--index/",
            "text": "No package doc string provided for net.",
            "title": "Package"
        },
        {
            "location": "/net-Buffer/",
            "text": "class Buffer\n\n\nIn package \"net\".\n\n\nPublic, default capability ref.\n\n\nStore network data and provide a parsing interface.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun append()\n\n\nfun ref\n append(data: \nArray\n[\nU8\n val] val): \nBuffer\n ref^\n\n\nPublic.\n\n\nAdd a chunk of data.\n\n\nfun block()\n\n\nfun ref\n block(len: \nUSize\n val): \nArray\n[\nU8\n val] iso^ ?\n\n\nPublic, may raise an error.\n\n\nReturn a block as a contiguous chunk of memory.\n\n\nfun _byte()\n\n\nfun ref\n _byte(): \nU8\n val ?\n\n\nPrivate, may raise an error.\n\n\nGet a single byte.\n\n\nfun clear()\n\n\nfun ref\n clear(): \nBuffer\n ref^\n\n\nPublic.\n\n\nDiscard all pending data.\n\n\nfun f32_be()\n\n\nfun ref\n f32_be(): \nF32\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a big-endian F32.\n\n\nfun f32_le()\n\n\nfun ref\n f32_le(): \nF32\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a little-endian F32.\n\n\nfun f64_be()\n\n\nfun ref\n f64_be(): \nF64\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a big-endian F64.\n\n\nfun f64_le()\n\n\nfun ref\n f64_le(): \nF64\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a little-endian F64.\n\n\nfun i128_be()\n\n\nfun ref\n i128_be(): \nI128\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a big-endian I129.\n\n\nfun i128_le()\n\n\nfun ref\n i128_le(): \nI128\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a little-endian I128.\n\n\nfun i16_be()\n\n\nfun ref\n i16_be(): \nI16\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a big-endian I16.\n\n\nfun i16_le()\n\n\nfun ref\n i16_le(): \nI16\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a little-endian I16.\n\n\nfun i32_be()\n\n\nfun ref\n i32_be(): \nI32\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a big-endian I32.\n\n\nfun i32_le()\n\n\nfun ref\n i32_le(): \nI32\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a little-endian I32.\n\n\nfun i64_be()\n\n\nfun ref\n i64_be(): \nI64\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a big-endian I64.\n\n\nfun i64_le()\n\n\nfun ref\n i64_le(): \nI64\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a little-endian I64.\n\n\nfun i8()\n\n\nfun ref\n i8(): \nI8\n val ?\n\n\nPublic, may raise an error.\n\n\nGet an I8.\n\n\nfun line()\n\n\nfun ref\n line(): \nString\n val ?\n\n\nPublic, may raise an error.\n\n\nReturn a \\n or \\r\\n terminated line as a string. The newline is not\nincluded in the returned string, but it is removed from the network buffer.\n\n\nfun _line_length()\n\n\nfun ref\n _line_length(): \nUSize\n val ?\n\n\nPrivate, may raise an error.\n\n\nGet the length of a pending line. Raise an error if there is no pending\nline.\n\n\nfun _peek_byte()\n\n\nfun box\n _peek_byte(optional offset: \nUSize\n val): \nU8\n val ?\n\n\nPrivate, may raise an error.\n\n\nGet the byte at the given offset without moving the cursor forward.\nRaise an error if the given offset is not yet available.\n\n\nfun peek_f32_be()\n\n\nfun box\n peek_f32_be(optional offset: \nUSize\n val): \nF32\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a big-endian F32.\n\n\nfun peek_f32_le()\n\n\nfun box\n peek_f32_le(optional offset: \nUSize\n val): \nF32\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a little-endian F32.\n\n\nfun peek_f64_be()\n\n\nfun box\n peek_f64_be(optional offset: \nUSize\n val): \nF64\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a big-endian F64.\n\n\nfun peek_f64_le()\n\n\nfun box\n peek_f64_le(optional offset: \nUSize\n val): \nF64\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a little-endian F64.\n\n\nfun peek_i128_be()\n\n\nfun box\n peek_i128_be(optional offset: \nUSize\n val): \nI128\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a big-endian I129.\n\n\nfun peek_i128_le()\n\n\nfun box\n peek_i128_le(optional offset: \nUSize\n val): \nI128\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a little-endian I128.\n\n\nfun peek_i16_be()\n\n\nfun box\n peek_i16_be(optional offset: \nUSize\n val): \nI16\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a big-endian I16.\n\n\nfun peek_i16_le()\n\n\nfun box\n peek_i16_le(optional offset: \nUSize\n val): \nI16\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a little-endian I16.\n\n\nfun peek_i32_be()\n\n\nfun box\n peek_i32_be(optional offset: \nUSize\n val): \nI32\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a big-endian I32.\n\n\nfun peek_i32_le()\n\n\nfun box\n peek_i32_le(optional offset: \nUSize\n val): \nI32\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a little-endian I32.\n\n\nfun peek_i64_be()\n\n\nfun box\n peek_i64_be(optional offset: \nUSize\n val): \nI64\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a big-endian I64.\n\n\nfun peek_i64_le()\n\n\nfun box\n peek_i64_le(optional offset: \nUSize\n val): \nI64\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a little-endian I64.\n\n\nfun peek_i8()\n\n\nfun box\n peek_i8(optional offset: \nUSize\n val): \nI8\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at an I8.\n\n\nfun peek_u128_be()\n\n\nfun box\n peek_u128_be(optional offset: \nUSize\n val): \nU128\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a big-endian U128.\n\n\nfun peek_u128_le()\n\n\nfun box\n peek_u128_le(optional offset: \nUSize\n val): \nU128\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a little-endian U128.\n\n\nfun peek_u16_be()\n\n\nfun box\n peek_u16_be(optional offset: \nUSize\n val): \nU16\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a big-endian U16.\n\n\nfun peek_u16_le()\n\n\nfun box\n peek_u16_le(optional offset: \nUSize\n val): \nU16\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a little-endian U16.\n\n\nfun peek_u32_be()\n\n\nfun box\n peek_u32_be(optional offset: \nUSize\n val): \nU32\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a big-endian U32.\n\n\nfun peek_u32_le()\n\n\nfun box\n peek_u32_le(optional offset: \nUSize\n val): \nU32\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a little-endian U32.\n\n\nfun peek_u64_be()\n\n\nfun box\n peek_u64_be(optional offset: \nUSize\n val): \nU64\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a big-endian U64.\n\n\nfun peek_u64_le()\n\n\nfun box\n peek_u64_le(optional offset: \nUSize\n val): \nU64\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a little-endian U64.\n\n\nfun peek_u8()\n\n\nfun box\n peek_u8(optional offset: \nUSize\n val): \nU8\n val ?\n\n\nPublic, may raise an error.\n\n\nPeek at a U8 at the given offset. Raise an error if there isn't enough\ndata.\n\n\nfun size()\n\n\nfun box\n size(): \nUSize\n val\n\n\nPublic.\n\n\nReturn the number of available bytes.\n\n\nfun skip()\n\n\nfun ref\n skip(n: \nUSize\n val): \nBuffer\n ref^ ?\n\n\nPublic, may raise an error.\n\n\nSkip n bytes.\n\n\nfun u128_be()\n\n\nfun ref\n u128_be(): \nU128\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a big-endian U128.\n\n\nfun u128_le()\n\n\nfun ref\n u128_le(): \nU128\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a little-endian U128.\n\n\nfun u16_be()\n\n\nfun ref\n u16_be(): \nU16\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a big-endian U16.\n\n\nfun u16_le()\n\n\nfun ref\n u16_le(): \nU16\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a little-endian U16.\n\n\nfun u32_be()\n\n\nfun ref\n u32_be(): \nU32\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a big-endian U32.\n\n\nfun u32_le()\n\n\nfun ref\n u32_le(): \nU32\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a little-endian U32.\n\n\nfun u64_be()\n\n\nfun ref\n u64_be(): \nU64\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a big-endian U64.\n\n\nfun u64_le()\n\n\nfun ref\n u64_le(): \nU64\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a little-endian U64.\n\n\nfun u8()\n\n\nfun ref\n u8(): \nU8\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a U8. Raise an error if there isn't enough data.",
            "title": "class Buffer"
        },
        {
            "location": "/net-Buffer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-Buffer/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-Buffer/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-Buffer/#fun-append",
            "text": "fun ref\n append(data:  Array [ U8  val] val):  Buffer  ref^  Public.  Add a chunk of data.",
            "title": "fun append()"
        },
        {
            "location": "/net-Buffer/#fun-block",
            "text": "fun ref\n block(len:  USize  val):  Array [ U8  val] iso^ ?  Public, may raise an error.  Return a block as a contiguous chunk of memory.",
            "title": "fun block()"
        },
        {
            "location": "/net-Buffer/#fun-_byte",
            "text": "fun ref\n _byte():  U8  val ?  Private, may raise an error.  Get a single byte.",
            "title": "fun _byte()"
        },
        {
            "location": "/net-Buffer/#fun-clear",
            "text": "fun ref\n clear():  Buffer  ref^  Public.  Discard all pending data.",
            "title": "fun clear()"
        },
        {
            "location": "/net-Buffer/#fun-f32_be",
            "text": "fun ref\n f32_be():  F32  val ?  Public, may raise an error.  Get a big-endian F32.",
            "title": "fun f32_be()"
        },
        {
            "location": "/net-Buffer/#fun-f32_le",
            "text": "fun ref\n f32_le():  F32  val ?  Public, may raise an error.  Get a little-endian F32.",
            "title": "fun f32_le()"
        },
        {
            "location": "/net-Buffer/#fun-f64_be",
            "text": "fun ref\n f64_be():  F64  val ?  Public, may raise an error.  Get a big-endian F64.",
            "title": "fun f64_be()"
        },
        {
            "location": "/net-Buffer/#fun-f64_le",
            "text": "fun ref\n f64_le():  F64  val ?  Public, may raise an error.  Get a little-endian F64.",
            "title": "fun f64_le()"
        },
        {
            "location": "/net-Buffer/#fun-i128_be",
            "text": "fun ref\n i128_be():  I128  val ?  Public, may raise an error.  Get a big-endian I129.",
            "title": "fun i128_be()"
        },
        {
            "location": "/net-Buffer/#fun-i128_le",
            "text": "fun ref\n i128_le():  I128  val ?  Public, may raise an error.  Get a little-endian I128.",
            "title": "fun i128_le()"
        },
        {
            "location": "/net-Buffer/#fun-i16_be",
            "text": "fun ref\n i16_be():  I16  val ?  Public, may raise an error.  Get a big-endian I16.",
            "title": "fun i16_be()"
        },
        {
            "location": "/net-Buffer/#fun-i16_le",
            "text": "fun ref\n i16_le():  I16  val ?  Public, may raise an error.  Get a little-endian I16.",
            "title": "fun i16_le()"
        },
        {
            "location": "/net-Buffer/#fun-i32_be",
            "text": "fun ref\n i32_be():  I32  val ?  Public, may raise an error.  Get a big-endian I32.",
            "title": "fun i32_be()"
        },
        {
            "location": "/net-Buffer/#fun-i32_le",
            "text": "fun ref\n i32_le():  I32  val ?  Public, may raise an error.  Get a little-endian I32.",
            "title": "fun i32_le()"
        },
        {
            "location": "/net-Buffer/#fun-i64_be",
            "text": "fun ref\n i64_be():  I64  val ?  Public, may raise an error.  Get a big-endian I64.",
            "title": "fun i64_be()"
        },
        {
            "location": "/net-Buffer/#fun-i64_le",
            "text": "fun ref\n i64_le():  I64  val ?  Public, may raise an error.  Get a little-endian I64.",
            "title": "fun i64_le()"
        },
        {
            "location": "/net-Buffer/#fun-i8",
            "text": "fun ref\n i8():  I8  val ?  Public, may raise an error.  Get an I8.",
            "title": "fun i8()"
        },
        {
            "location": "/net-Buffer/#fun-line",
            "text": "fun ref\n line():  String  val ?  Public, may raise an error.  Return a \\n or \\r\\n terminated line as a string. The newline is not\nincluded in the returned string, but it is removed from the network buffer.",
            "title": "fun line()"
        },
        {
            "location": "/net-Buffer/#fun-_line_length",
            "text": "fun ref\n _line_length():  USize  val ?  Private, may raise an error.  Get the length of a pending line. Raise an error if there is no pending\nline.",
            "title": "fun _line_length()"
        },
        {
            "location": "/net-Buffer/#fun-_peek_byte",
            "text": "fun box\n _peek_byte(optional offset:  USize  val):  U8  val ?  Private, may raise an error.  Get the byte at the given offset without moving the cursor forward.\nRaise an error if the given offset is not yet available.",
            "title": "fun _peek_byte()"
        },
        {
            "location": "/net-Buffer/#fun-peek_f32_be",
            "text": "fun box\n peek_f32_be(optional offset:  USize  val):  F32  val ?  Public, may raise an error.  Peek at a big-endian F32.",
            "title": "fun peek_f32_be()"
        },
        {
            "location": "/net-Buffer/#fun-peek_f32_le",
            "text": "fun box\n peek_f32_le(optional offset:  USize  val):  F32  val ?  Public, may raise an error.  Peek at a little-endian F32.",
            "title": "fun peek_f32_le()"
        },
        {
            "location": "/net-Buffer/#fun-peek_f64_be",
            "text": "fun box\n peek_f64_be(optional offset:  USize  val):  F64  val ?  Public, may raise an error.  Peek at a big-endian F64.",
            "title": "fun peek_f64_be()"
        },
        {
            "location": "/net-Buffer/#fun-peek_f64_le",
            "text": "fun box\n peek_f64_le(optional offset:  USize  val):  F64  val ?  Public, may raise an error.  Peek at a little-endian F64.",
            "title": "fun peek_f64_le()"
        },
        {
            "location": "/net-Buffer/#fun-peek_i128_be",
            "text": "fun box\n peek_i128_be(optional offset:  USize  val):  I128  val ?  Public, may raise an error.  Peek at a big-endian I129.",
            "title": "fun peek_i128_be()"
        },
        {
            "location": "/net-Buffer/#fun-peek_i128_le",
            "text": "fun box\n peek_i128_le(optional offset:  USize  val):  I128  val ?  Public, may raise an error.  Peek at a little-endian I128.",
            "title": "fun peek_i128_le()"
        },
        {
            "location": "/net-Buffer/#fun-peek_i16_be",
            "text": "fun box\n peek_i16_be(optional offset:  USize  val):  I16  val ?  Public, may raise an error.  Peek at a big-endian I16.",
            "title": "fun peek_i16_be()"
        },
        {
            "location": "/net-Buffer/#fun-peek_i16_le",
            "text": "fun box\n peek_i16_le(optional offset:  USize  val):  I16  val ?  Public, may raise an error.  Peek at a little-endian I16.",
            "title": "fun peek_i16_le()"
        },
        {
            "location": "/net-Buffer/#fun-peek_i32_be",
            "text": "fun box\n peek_i32_be(optional offset:  USize  val):  I32  val ?  Public, may raise an error.  Peek at a big-endian I32.",
            "title": "fun peek_i32_be()"
        },
        {
            "location": "/net-Buffer/#fun-peek_i32_le",
            "text": "fun box\n peek_i32_le(optional offset:  USize  val):  I32  val ?  Public, may raise an error.  Peek at a little-endian I32.",
            "title": "fun peek_i32_le()"
        },
        {
            "location": "/net-Buffer/#fun-peek_i64_be",
            "text": "fun box\n peek_i64_be(optional offset:  USize  val):  I64  val ?  Public, may raise an error.  Peek at a big-endian I64.",
            "title": "fun peek_i64_be()"
        },
        {
            "location": "/net-Buffer/#fun-peek_i64_le",
            "text": "fun box\n peek_i64_le(optional offset:  USize  val):  I64  val ?  Public, may raise an error.  Peek at a little-endian I64.",
            "title": "fun peek_i64_le()"
        },
        {
            "location": "/net-Buffer/#fun-peek_i8",
            "text": "fun box\n peek_i8(optional offset:  USize  val):  I8  val ?  Public, may raise an error.  Peek at an I8.",
            "title": "fun peek_i8()"
        },
        {
            "location": "/net-Buffer/#fun-peek_u128_be",
            "text": "fun box\n peek_u128_be(optional offset:  USize  val):  U128  val ?  Public, may raise an error.  Peek at a big-endian U128.",
            "title": "fun peek_u128_be()"
        },
        {
            "location": "/net-Buffer/#fun-peek_u128_le",
            "text": "fun box\n peek_u128_le(optional offset:  USize  val):  U128  val ?  Public, may raise an error.  Peek at a little-endian U128.",
            "title": "fun peek_u128_le()"
        },
        {
            "location": "/net-Buffer/#fun-peek_u16_be",
            "text": "fun box\n peek_u16_be(optional offset:  USize  val):  U16  val ?  Public, may raise an error.  Peek at a big-endian U16.",
            "title": "fun peek_u16_be()"
        },
        {
            "location": "/net-Buffer/#fun-peek_u16_le",
            "text": "fun box\n peek_u16_le(optional offset:  USize  val):  U16  val ?  Public, may raise an error.  Peek at a little-endian U16.",
            "title": "fun peek_u16_le()"
        },
        {
            "location": "/net-Buffer/#fun-peek_u32_be",
            "text": "fun box\n peek_u32_be(optional offset:  USize  val):  U32  val ?  Public, may raise an error.  Peek at a big-endian U32.",
            "title": "fun peek_u32_be()"
        },
        {
            "location": "/net-Buffer/#fun-peek_u32_le",
            "text": "fun box\n peek_u32_le(optional offset:  USize  val):  U32  val ?  Public, may raise an error.  Peek at a little-endian U32.",
            "title": "fun peek_u32_le()"
        },
        {
            "location": "/net-Buffer/#fun-peek_u64_be",
            "text": "fun box\n peek_u64_be(optional offset:  USize  val):  U64  val ?  Public, may raise an error.  Peek at a big-endian U64.",
            "title": "fun peek_u64_be()"
        },
        {
            "location": "/net-Buffer/#fun-peek_u64_le",
            "text": "fun box\n peek_u64_le(optional offset:  USize  val):  U64  val ?  Public, may raise an error.  Peek at a little-endian U64.",
            "title": "fun peek_u64_le()"
        },
        {
            "location": "/net-Buffer/#fun-peek_u8",
            "text": "fun box\n peek_u8(optional offset:  USize  val):  U8  val ?  Public, may raise an error.  Peek at a U8 at the given offset. Raise an error if there isn't enough\ndata.",
            "title": "fun peek_u8()"
        },
        {
            "location": "/net-Buffer/#fun-size",
            "text": "fun box\n size():  USize  val  Public.  Return the number of available bytes.",
            "title": "fun size()"
        },
        {
            "location": "/net-Buffer/#fun-skip",
            "text": "fun ref\n skip(n:  USize  val):  Buffer  ref^ ?  Public, may raise an error.  Skip n bytes.",
            "title": "fun skip()"
        },
        {
            "location": "/net-Buffer/#fun-u128_be",
            "text": "fun ref\n u128_be():  U128  val ?  Public, may raise an error.  Get a big-endian U128.",
            "title": "fun u128_be()"
        },
        {
            "location": "/net-Buffer/#fun-u128_le",
            "text": "fun ref\n u128_le():  U128  val ?  Public, may raise an error.  Get a little-endian U128.",
            "title": "fun u128_le()"
        },
        {
            "location": "/net-Buffer/#fun-u16_be",
            "text": "fun ref\n u16_be():  U16  val ?  Public, may raise an error.  Get a big-endian U16.",
            "title": "fun u16_be()"
        },
        {
            "location": "/net-Buffer/#fun-u16_le",
            "text": "fun ref\n u16_le():  U16  val ?  Public, may raise an error.  Get a little-endian U16.",
            "title": "fun u16_le()"
        },
        {
            "location": "/net-Buffer/#fun-u32_be",
            "text": "fun ref\n u32_be():  U32  val ?  Public, may raise an error.  Get a big-endian U32.",
            "title": "fun u32_be()"
        },
        {
            "location": "/net-Buffer/#fun-u32_le",
            "text": "fun ref\n u32_le():  U32  val ?  Public, may raise an error.  Get a little-endian U32.",
            "title": "fun u32_le()"
        },
        {
            "location": "/net-Buffer/#fun-u64_be",
            "text": "fun ref\n u64_be():  U64  val ?  Public, may raise an error.  Get a big-endian U64.",
            "title": "fun u64_be()"
        },
        {
            "location": "/net-Buffer/#fun-u64_le",
            "text": "fun ref\n u64_le():  U64  val ?  Public, may raise an error.  Get a little-endian U64.",
            "title": "fun u64_le()"
        },
        {
            "location": "/net-Buffer/#fun-u8",
            "text": "fun ref\n u8():  U8  val ?  Public, may raise an error.  Get a U8. Raise an error if there isn't enough data.",
            "title": "fun u8()"
        },
        {
            "location": "/net-DNS/",
            "text": "primitive DNS\n\n\nIn package \"net\".\n\n\nPublic, default capability val.\n\n\nHelper functions for resolving DNS queries.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(host: \nString\n val, service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nPublic.\n\n\nGets all IPv4 and IPv6 addresses for a host and service.\n\n\nfun broadcast_ip4()\n\n\nfun box\n broadcast_ip4(service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nPublic.\n\n\nLink-local IP4 broadcast address.\n\n\nfun broadcast_ip6()\n\n\nfun box\n broadcast_ip6(service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nPublic.\n\n\nLink-local IP6 broadcast address.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nDNS\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ip4()\n\n\nfun box\n ip4(host: \nString\n val, service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nPublic.\n\n\nGets all IPv4 addresses for a host and service.\n\n\nfun ip6()\n\n\nfun box\n ip6(host: \nString\n val, service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nPublic.\n\n\nGets all IPv6 addresses for a host and service.\n\n\nfun is_ip4()\n\n\nfun box\n is_ip4(host: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the host is a literal IPv4 address.\n\n\nfun is_ip6()\n\n\nfun box\n is_ip6(host: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nReturns true if the host is a literal IPv6 address.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nDNS\n val): \nBool\n val\n\n\nPublic.\n\n\nfun _resolve()\n\n\nfun box\n _resolve(family: \nU32\n val, host: \nString\n val, service: \nString\n val): \nArray\n[\nIPAddress\n val] iso^\n\n\nPrivate.\n\n\nTurns an addrinfo pointer into an array of addresses.",
            "title": "primitive DNS"
        },
        {
            "location": "/net-DNS/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-DNS/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-DNS/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-DNS/#fun-apply",
            "text": "fun box\n apply(host:  String  val, service:  String  val):  Array [ IPAddress  val] iso^  Public.  Gets all IPv4 and IPv6 addresses for a host and service.",
            "title": "fun apply()"
        },
        {
            "location": "/net-DNS/#fun-broadcast_ip4",
            "text": "fun box\n broadcast_ip4(service:  String  val):  Array [ IPAddress  val] iso^  Public.  Link-local IP4 broadcast address.",
            "title": "fun broadcast_ip4()"
        },
        {
            "location": "/net-DNS/#fun-broadcast_ip6",
            "text": "fun box\n broadcast_ip6(service:  String  val):  Array [ IPAddress  val] iso^  Public.  Link-local IP6 broadcast address.",
            "title": "fun broadcast_ip6()"
        },
        {
            "location": "/net-DNS/#fun-eq",
            "text": "fun box\n eq(that:  DNS  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-DNS/#fun-ip4",
            "text": "fun box\n ip4(host:  String  val, service:  String  val):  Array [ IPAddress  val] iso^  Public.  Gets all IPv4 addresses for a host and service.",
            "title": "fun ip4()"
        },
        {
            "location": "/net-DNS/#fun-ip6",
            "text": "fun box\n ip6(host:  String  val, service:  String  val):  Array [ IPAddress  val] iso^  Public.  Gets all IPv6 addresses for a host and service.",
            "title": "fun ip6()"
        },
        {
            "location": "/net-DNS/#fun-is_ip4",
            "text": "fun box\n is_ip4(host:  String  val):  Bool  val  Public.  Returns true if the host is a literal IPv4 address.",
            "title": "fun is_ip4()"
        },
        {
            "location": "/net-DNS/#fun-is_ip6",
            "text": "fun box\n is_ip6(host:  String  val):  Bool  val  Public.  Returns true if the host is a literal IPv6 address.",
            "title": "fun is_ip6()"
        },
        {
            "location": "/net-DNS/#fun-ne",
            "text": "fun box\n ne(that:  DNS  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-DNS/#fun-_resolve",
            "text": "fun box\n _resolve(family:  U32  val, host:  String  val, service:  String  val):  Array [ IPAddress  val] iso^  Private.  Turns an addrinfo pointer into an array of addresses.",
            "title": "fun _resolve()"
        },
        {
            "location": "/net-IPAddress/",
            "text": "class IPAddress\n\n\nIn package \"net\".\n\n\nPublic, default capability val.\n\n\nRepresents an IPv4 or IPv6 address. The family field indicates the address\ntype. The addr field is either the IPv4 address or the IPv6 flow info. The\naddr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The\nscope field is the IPv6 scope, or invalid for an IPv4 address.\n\n\nPublic fields\n\n\n\n\nlet addr: \nU32\n val\n\n\nlet addr1: \nU32\n val\n\n\nlet addr2: \nU32\n val\n\n\nlet addr3: \nU32\n val\n\n\nlet addr4: \nU32\n val\n\n\nlet family: \nU8\n val\n\n\nlet length: \nU8\n val\n\n\nlet port: \nU16\n val\n\n\nlet scope: \nU32\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun ip4()\n\n\nfun box\n ip4(): \nBool\n val\n\n\nPublic.\n\n\nReturns true for an IPv4 address.\n\n\nfun ip6()\n\n\nfun box\n ip6(): \nBool\n val\n\n\nPublic.\n\n\nReturns true for an IPv6 address.\n\n\nfun name()\n\n\nfun box\n name(optional reversedns: \nBool\n val, optional servicename: \nBool\n val): (\nString\n val , \nString\n val) ?\n\n\nPublic, may raise an error.\n\n\nReturn the host and service name.",
            "title": "class IPAddress"
        },
        {
            "location": "/net-IPAddress/#public-fields",
            "text": "let addr:  U32  val  let addr1:  U32  val  let addr2:  U32  val  let addr3:  U32  val  let addr4:  U32  val  let family:  U8  val  let length:  U8  val  let port:  U16  val  let scope:  U32  val",
            "title": "Public fields"
        },
        {
            "location": "/net-IPAddress/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-IPAddress/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-IPAddress/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-IPAddress/#fun-ip4",
            "text": "fun box\n ip4():  Bool  val  Public.  Returns true for an IPv4 address.",
            "title": "fun ip4()"
        },
        {
            "location": "/net-IPAddress/#fun-ip6",
            "text": "fun box\n ip6():  Bool  val  Public.  Returns true for an IPv6 address.",
            "title": "fun ip6()"
        },
        {
            "location": "/net-IPAddress/#fun-name",
            "text": "fun box\n name(optional reversedns:  Bool  val, optional servicename:  Bool  val): ( String  val ,  String  val) ?  Public, may raise an error.  Return the host and service name.",
            "title": "fun name()"
        },
        {
            "location": "/net-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"net\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/net-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/net-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/net-TCPConnection/",
            "text": "actor TCPConnection\n\n\nIn package \"net\".\n\n\nPublic, default capability tag.\n\n\nA TCP connection. When connecting, the Happy Eyeballs algorithm is used.\n\n\nConstructors\n\n\nnew _accept()\n\n\nnew _accept(listen: \nTCPListener\n tag, notify: \nTCPConnectionNotify\n iso, fd: \nU32\n val)\n\n\nPrivate.\n\n\nnew create()\n\n\nnew create(notify: \nTCPConnectionNotify\n iso, host: \nString\n val, service: \nString\n val, optional from: \nString\n val)\n\n\nPublic.\n\n\nnew ip4()\n\n\nnew ip4(notify: \nTCPConnectionNotify\n iso, host: \nString\n val, service: \nString\n val, optional from: \nString\n val)\n\n\nPublic.\n\n\nnew ip6()\n\n\nnew ip6(notify: \nTCPConnectionNotify\n iso, host: \nString\n val, service: \nString\n val, optional from: \nString\n val)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.\n\n\nClose the connection gracefully once all writes are sent.\n\n\nbe _event_notify()\n\n\nbe _event_notify(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nPrivate.\n\n\nHandle socket events.\n\n\nbe _read_again()\n\n\nbe _read_again()\n\n\nPrivate.\n\n\nResume reading.\n\n\nbe set_notify()\n\n\nbe set_notify(notify: \nTCPConnectionNotify\n iso)\n\n\nPublic.\n\n\nChange the notifier.\n\n\nbe write()\n\n\nbe write(data: \nByteSeq\n val)\n\n\nPublic.\n\n\nWrite a single sequence of bytes.\n\n\nbe writev()\n\n\nbe writev(data: \nByteSeqIter\n val)\n\n\nPublic.\n\n\nWrite a sequence of sequences of bytes.\n\n\nFunctions\n\n\nfun close()\n\n\nfun ref\n close(): \nNone\n val\n\n\nPublic.\n\n\nPerform a graceful shutdown. Don't accept new writes, but don't finish\nclosing until we get a zero length read.\n\n\nfun _complete_reads()\n\n\nfun ref\n _complete_reads(len: \nU32\n val): \nNone\n val\n\n\nPrivate.\n\n\nThe OS has informed as that len bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.\n\n\nfun _complete_writes()\n\n\nfun ref\n _complete_writes(len: \nU32\n val): \nNone\n val\n\n\nPrivate.\n\n\nThe OS has informed as that len bytes of pending writes have completed.\nThis occurs only with IOCP on Windows.\n\n\nfun _hard_close()\n\n\nfun ref\n _hard_close(): \nNone\n val\n\n\nPrivate.\n\n\nWhen an error happens, do a non-graceful close.\n\n\nfun local_address()\n\n\nfun box\n local_address(): \nIPAddress\n val\n\n\nPublic.\n\n\nReturn the local IP address.\n\n\nfun _notify_connecting()\n\n\nfun ref\n _notify_connecting(): \nNone\n val\n\n\nPrivate.\n\n\nInform the notifier that we're connecting.\n\n\nfun _pending_reads()\n\n\nfun ref\n _pending_reads(): \nNone\n val\n\n\nPrivate.\n\n\nRead while data is available, guessing the next packet length as we go. If\nwe read 4 kb of data, send ourself a resume message and stop reading, to\navoid starving other actors.\n\n\nfun _pending_writes()\n\n\nfun ref\n _pending_writes(): \nNone\n val\n\n\nPrivate.\n\n\nSend pending data. If any data can't be sent, keep it and mark as not\nwriteable. On an error, dispose of the connection.\n\n\nfun _queue_read()\n\n\nfun ref\n _queue_read(): \nNone\n val\n\n\nPrivate.\n\n\nQueue an IOCP read on Windows.\n\n\nfun remote_address()\n\n\nfun box\n remote_address(): \nIPAddress\n val\n\n\nPublic.\n\n\nReturn the remote IP address.\n\n\nfun set_keepalive()\n\n\nfun ref\n set_keepalive(secs: \nU32\n val): \nNone\n val\n\n\nPublic.\n\n\nSets the TCP keepalive timeout to approximately secs seconds. Exact timing\nis OS dependent. If secs is zero, TCP keepalive is disabled. TCP keepalive\nis disabled by default. This can only be set on a connected socket.\n\n\nfun set_nodelay()\n\n\nfun ref\n set_nodelay(state: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nTurn Nagle on/off. Defaults to on. This can only be set on a connected\nsocket.\n\n\nfun _try_shutdown()\n\n\nfun ref\n _try_shutdown(): \nNone\n val\n\n\nPrivate.\n\n\nIf we have closed and we have no remaining writes or pending connections,\nthen shutdown.\n\n\nfun write_final()\n\n\nfun ref\n write_final(data: \nByteSeq\n val): \nNone\n val\n\n\nPublic.\n\n\nWrite as much as possible to the socket. Set _writeable to false if not\neverything was written. On an error, close the connection. This is for\ndata that has already been transformed by the notifier.",
            "title": "actor TCPConnection"
        },
        {
            "location": "/net-TCPConnection/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-TCPConnection/#new-_accept",
            "text": "new _accept(listen:  TCPListener  tag, notify:  TCPConnectionNotify  iso, fd:  U32  val)  Private.",
            "title": "new _accept()"
        },
        {
            "location": "/net-TCPConnection/#new-create",
            "text": "new create(notify:  TCPConnectionNotify  iso, host:  String  val, service:  String  val, optional from:  String  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-TCPConnection/#new-ip4",
            "text": "new ip4(notify:  TCPConnectionNotify  iso, host:  String  val, service:  String  val, optional from:  String  val)  Public.",
            "title": "new ip4()"
        },
        {
            "location": "/net-TCPConnection/#new-ip6",
            "text": "new ip6(notify:  TCPConnectionNotify  iso, host:  String  val, service:  String  val, optional from:  String  val)  Public.",
            "title": "new ip6()"
        },
        {
            "location": "/net-TCPConnection/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/net-TCPConnection/#be-dispose",
            "text": "be dispose()  Public.  Close the connection gracefully once all writes are sent.",
            "title": "be dispose()"
        },
        {
            "location": "/net-TCPConnection/#be-_event_notify",
            "text": "be _event_notify(event:  Pointer [ AsioEvent  val] tag, flags:  U32  val, arg:  U32  val)  Private.  Handle socket events.",
            "title": "be _event_notify()"
        },
        {
            "location": "/net-TCPConnection/#be-_read_again",
            "text": "be _read_again()  Private.  Resume reading.",
            "title": "be _read_again()"
        },
        {
            "location": "/net-TCPConnection/#be-set_notify",
            "text": "be set_notify(notify:  TCPConnectionNotify  iso)  Public.  Change the notifier.",
            "title": "be set_notify()"
        },
        {
            "location": "/net-TCPConnection/#be-write",
            "text": "be write(data:  ByteSeq  val)  Public.  Write a single sequence of bytes.",
            "title": "be write()"
        },
        {
            "location": "/net-TCPConnection/#be-writev",
            "text": "be writev(data:  ByteSeqIter  val)  Public.  Write a sequence of sequences of bytes.",
            "title": "be writev()"
        },
        {
            "location": "/net-TCPConnection/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-TCPConnection/#fun-close",
            "text": "fun ref\n close():  None  val  Public.  Perform a graceful shutdown. Don't accept new writes, but don't finish\nclosing until we get a zero length read.",
            "title": "fun close()"
        },
        {
            "location": "/net-TCPConnection/#fun-_complete_reads",
            "text": "fun ref\n _complete_reads(len:  U32  val):  None  val  Private.  The OS has informed as that len bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.",
            "title": "fun _complete_reads()"
        },
        {
            "location": "/net-TCPConnection/#fun-_complete_writes",
            "text": "fun ref\n _complete_writes(len:  U32  val):  None  val  Private.  The OS has informed as that len bytes of pending writes have completed.\nThis occurs only with IOCP on Windows.",
            "title": "fun _complete_writes()"
        },
        {
            "location": "/net-TCPConnection/#fun-_hard_close",
            "text": "fun ref\n _hard_close():  None  val  Private.  When an error happens, do a non-graceful close.",
            "title": "fun _hard_close()"
        },
        {
            "location": "/net-TCPConnection/#fun-local_address",
            "text": "fun box\n local_address():  IPAddress  val  Public.  Return the local IP address.",
            "title": "fun local_address()"
        },
        {
            "location": "/net-TCPConnection/#fun-_notify_connecting",
            "text": "fun ref\n _notify_connecting():  None  val  Private.  Inform the notifier that we're connecting.",
            "title": "fun _notify_connecting()"
        },
        {
            "location": "/net-TCPConnection/#fun-_pending_reads",
            "text": "fun ref\n _pending_reads():  None  val  Private.  Read while data is available, guessing the next packet length as we go. If\nwe read 4 kb of data, send ourself a resume message and stop reading, to\navoid starving other actors.",
            "title": "fun _pending_reads()"
        },
        {
            "location": "/net-TCPConnection/#fun-_pending_writes",
            "text": "fun ref\n _pending_writes():  None  val  Private.  Send pending data. If any data can't be sent, keep it and mark as not\nwriteable. On an error, dispose of the connection.",
            "title": "fun _pending_writes()"
        },
        {
            "location": "/net-TCPConnection/#fun-_queue_read",
            "text": "fun ref\n _queue_read():  None  val  Private.  Queue an IOCP read on Windows.",
            "title": "fun _queue_read()"
        },
        {
            "location": "/net-TCPConnection/#fun-remote_address",
            "text": "fun box\n remote_address():  IPAddress  val  Public.  Return the remote IP address.",
            "title": "fun remote_address()"
        },
        {
            "location": "/net-TCPConnection/#fun-set_keepalive",
            "text": "fun ref\n set_keepalive(secs:  U32  val):  None  val  Public.  Sets the TCP keepalive timeout to approximately secs seconds. Exact timing\nis OS dependent. If secs is zero, TCP keepalive is disabled. TCP keepalive\nis disabled by default. This can only be set on a connected socket.",
            "title": "fun set_keepalive()"
        },
        {
            "location": "/net-TCPConnection/#fun-set_nodelay",
            "text": "fun ref\n set_nodelay(state:  Bool  val):  None  val  Public.  Turn Nagle on/off. Defaults to on. This can only be set on a connected\nsocket.",
            "title": "fun set_nodelay()"
        },
        {
            "location": "/net-TCPConnection/#fun-_try_shutdown",
            "text": "fun ref\n _try_shutdown():  None  val  Private.  If we have closed and we have no remaining writes or pending connections,\nthen shutdown.",
            "title": "fun _try_shutdown()"
        },
        {
            "location": "/net-TCPConnection/#fun-write_final",
            "text": "fun ref\n write_final(data:  ByteSeq  val):  None  val  Public.  Write as much as possible to the socket. Set _writeable to false if not\neverything was written. On an error, close the connection. This is for\ndata that has already been transformed by the notifier.",
            "title": "fun write_final()"
        },
        {
            "location": "/net-TCPConnectionNotify/",
            "text": "interface TCPConnectionNotify\n\n\nIn package \"net\".\n\n\nPublic, default capability ref.\n\n\nNotifications for TCP connections.\n\n\nFunctions\n\n\nfun accepted()\n\n\nfun ref\n accepted(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when a TCPConnection is accepted by a TCPListener.\n\n\nfun auth_failed()\n\n\nfun ref\n auth_failed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nA raw TCPConnection has no authentication mechanism. However, when\nprotocols are wrapped in other protocols, this can be used to report an\nauthentication failure in a lower level protocol (eg. SSL).\n\n\nfun closed()\n\n\nfun ref\n closed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when the connection is closed.\n\n\nfun connect_failed()\n\n\nfun ref\n connect_failed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when we have failed to connect to all possible addresses for the\nserver. At this point, the connection will never be established.\n\n\nfun connected()\n\n\nfun ref\n connected(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when we have successfully connected to the server.\n\n\nfun connecting()\n\n\nfun ref\n connecting(conn: \nTCPConnection\n ref, count: \nU32\n val): \nNone\n val\n\n\nPublic.\n\n\nCalled if name resolution succeeded for a TCPConnection and we are now\nwaiting for a connection to the server to succeed. The count is the number\nof connections we're trying. The notifier will be informed each time the\ncount changes, until a connection is made or connect_failed() is called.\n\n\nfun received()\n\n\nfun ref\n received(conn: \nTCPConnection\n ref, data: \nArray\n[\nU8\n val] iso): \nNone\n val\n\n\nPublic.\n\n\nCalled when new data is received on the connection.\n\n\nfun sent()\n\n\nfun ref\n sent(conn: \nTCPConnection\n ref, data: \nByteSeq\n val): \nByteSeq\n val ?\n\n\nPublic, may raise an error.\n\n\nCalled when data is sent on the connection. This gives the notifier an\nopportunity to modify sent data before it is written. The notifier can\nraise an error if the data is swallowed entirely.",
            "title": "interface TCPConnectionNotify"
        },
        {
            "location": "/net-TCPConnectionNotify/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-TCPConnectionNotify/#fun-accepted",
            "text": "fun ref\n accepted(conn:  TCPConnection  ref):  None  val  Public.  Called when a TCPConnection is accepted by a TCPListener.",
            "title": "fun accepted()"
        },
        {
            "location": "/net-TCPConnectionNotify/#fun-auth_failed",
            "text": "fun ref\n auth_failed(conn:  TCPConnection  ref):  None  val  Public.  A raw TCPConnection has no authentication mechanism. However, when\nprotocols are wrapped in other protocols, this can be used to report an\nauthentication failure in a lower level protocol (eg. SSL).",
            "title": "fun auth_failed()"
        },
        {
            "location": "/net-TCPConnectionNotify/#fun-closed",
            "text": "fun ref\n closed(conn:  TCPConnection  ref):  None  val  Public.  Called when the connection is closed.",
            "title": "fun closed()"
        },
        {
            "location": "/net-TCPConnectionNotify/#fun-connect_failed",
            "text": "fun ref\n connect_failed(conn:  TCPConnection  ref):  None  val  Public.  Called when we have failed to connect to all possible addresses for the\nserver. At this point, the connection will never be established.",
            "title": "fun connect_failed()"
        },
        {
            "location": "/net-TCPConnectionNotify/#fun-connected",
            "text": "fun ref\n connected(conn:  TCPConnection  ref):  None  val  Public.  Called when we have successfully connected to the server.",
            "title": "fun connected()"
        },
        {
            "location": "/net-TCPConnectionNotify/#fun-connecting",
            "text": "fun ref\n connecting(conn:  TCPConnection  ref, count:  U32  val):  None  val  Public.  Called if name resolution succeeded for a TCPConnection and we are now\nwaiting for a connection to the server to succeed. The count is the number\nof connections we're trying. The notifier will be informed each time the\ncount changes, until a connection is made or connect_failed() is called.",
            "title": "fun connecting()"
        },
        {
            "location": "/net-TCPConnectionNotify/#fun-received",
            "text": "fun ref\n received(conn:  TCPConnection  ref, data:  Array [ U8  val] iso):  None  val  Public.  Called when new data is received on the connection.",
            "title": "fun received()"
        },
        {
            "location": "/net-TCPConnectionNotify/#fun-sent",
            "text": "fun ref\n sent(conn:  TCPConnection  ref, data:  ByteSeq  val):  ByteSeq  val ?  Public, may raise an error.  Called when data is sent on the connection. This gives the notifier an\nopportunity to modify sent data before it is written. The notifier can\nraise an error if the data is swallowed entirely.",
            "title": "fun sent()"
        },
        {
            "location": "/net-TCPListenNotify/",
            "text": "interface TCPListenNotify\n\n\nIn package \"net\".\n\n\nPublic, default capability ref.\n\n\nNotifications for TCP listeners.\n\n\nFunctions\n\n\nfun closed()\n\n\nfun ref\n closed(listen: \nTCPListener\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when the listener is closed.\n\n\nfun connected()\n\n\nfun ref\n connected(listen: \nTCPListener\n ref): \nTCPConnectionNotify\n iso^ ?\n\n\nPublic, may raise an error.\n\n\nCreate a new TCPConnectionNotify to attach to a new TCPConnection for a\nnewly established connection to the server.\n\n\nfun listening()\n\n\nfun ref\n listening(listen: \nTCPListener\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when the listener has been bound to an address.\n\n\nfun not_listening()\n\n\nfun ref\n not_listening(listen: \nTCPListener\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled if it wasn't possible to bind the listener to an address.",
            "title": "interface TCPListenNotify"
        },
        {
            "location": "/net-TCPListenNotify/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-TCPListenNotify/#fun-closed",
            "text": "fun ref\n closed(listen:  TCPListener  ref):  None  val  Public.  Called when the listener is closed.",
            "title": "fun closed()"
        },
        {
            "location": "/net-TCPListenNotify/#fun-connected",
            "text": "fun ref\n connected(listen:  TCPListener  ref):  TCPConnectionNotify  iso^ ?  Public, may raise an error.  Create a new TCPConnectionNotify to attach to a new TCPConnection for a\nnewly established connection to the server.",
            "title": "fun connected()"
        },
        {
            "location": "/net-TCPListenNotify/#fun-listening",
            "text": "fun ref\n listening(listen:  TCPListener  ref):  None  val  Public.  Called when the listener has been bound to an address.",
            "title": "fun listening()"
        },
        {
            "location": "/net-TCPListenNotify/#fun-not_listening",
            "text": "fun ref\n not_listening(listen:  TCPListener  ref):  None  val  Public.  Called if it wasn't possible to bind the listener to an address.",
            "title": "fun not_listening()"
        },
        {
            "location": "/net-TCPListener/",
            "text": "actor TCPListener\n\n\nIn package \"net\".\n\n\nPublic, default capability tag.\n\n\nListens for new network connections.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(notify: \nTCPListenNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional limit: \nUSize\n val)\n\n\nPublic.\n\n\nnew ip4()\n\n\nnew ip4(notify: \nTCPListenNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional limit: \nUSize\n val)\n\n\nPublic.\n\n\nnew ip6()\n\n\nnew ip6(notify: \nTCPListenNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional limit: \nUSize\n val)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe _conn_closed()\n\n\nbe _conn_closed()\n\n\nPrivate.\n\n\nAn accepted connection has closed. If we have dropped below the limit, try\nto accept new connections.\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.\n\n\nStop listening.\n\n\nbe _event_notify()\n\n\nbe _event_notify(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nPrivate.\n\n\nWhen we are readable, we accept new connections until none remain.\n\n\nbe set_notify()\n\n\nbe set_notify(notify: \nTCPListenNotify\n iso)\n\n\nPublic.\n\n\nChange the notifier.\n\n\nFunctions\n\n\nfun _accept()\n\n\nfun ref\n _accept(optional ns: \nU32\n val): \nNone\n val\n\n\nPrivate.\n\n\nAccept connections as long as we have spawned fewer than our limit.\n\n\nfun close()\n\n\nfun ref\n close(): \nNone\n val\n\n\nPublic.\n\n\nDispose of resources.\n\n\nfun local_address()\n\n\nfun box\n local_address(): \nIPAddress\n val\n\n\nPublic.\n\n\nReturn the bound IP address.\n\n\nfun _notify_listening()\n\n\nfun ref\n _notify_listening(): \nNone\n val\n\n\nPrivate.\n\n\nInform the notifier that we're listening.\n\n\nfun _spawn()\n\n\nfun ref\n _spawn(ns: \nU32\n val): \nNone\n val\n\n\nPrivate.\n\n\nSpawn a new connection.",
            "title": "actor TCPListener"
        },
        {
            "location": "/net-TCPListener/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-TCPListener/#new-create",
            "text": "new create(notify:  TCPListenNotify  iso, optional host:  String  val, optional service:  String  val, optional limit:  USize  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-TCPListener/#new-ip4",
            "text": "new ip4(notify:  TCPListenNotify  iso, optional host:  String  val, optional service:  String  val, optional limit:  USize  val)  Public.",
            "title": "new ip4()"
        },
        {
            "location": "/net-TCPListener/#new-ip6",
            "text": "new ip6(notify:  TCPListenNotify  iso, optional host:  String  val, optional service:  String  val, optional limit:  USize  val)  Public.",
            "title": "new ip6()"
        },
        {
            "location": "/net-TCPListener/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/net-TCPListener/#be-_conn_closed",
            "text": "be _conn_closed()  Private.  An accepted connection has closed. If we have dropped below the limit, try\nto accept new connections.",
            "title": "be _conn_closed()"
        },
        {
            "location": "/net-TCPListener/#be-dispose",
            "text": "be dispose()  Public.  Stop listening.",
            "title": "be dispose()"
        },
        {
            "location": "/net-TCPListener/#be-_event_notify",
            "text": "be _event_notify(event:  Pointer [ AsioEvent  val] tag, flags:  U32  val, arg:  U32  val)  Private.  When we are readable, we accept new connections until none remain.",
            "title": "be _event_notify()"
        },
        {
            "location": "/net-TCPListener/#be-set_notify",
            "text": "be set_notify(notify:  TCPListenNotify  iso)  Public.  Change the notifier.",
            "title": "be set_notify()"
        },
        {
            "location": "/net-TCPListener/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-TCPListener/#fun-_accept",
            "text": "fun ref\n _accept(optional ns:  U32  val):  None  val  Private.  Accept connections as long as we have spawned fewer than our limit.",
            "title": "fun _accept()"
        },
        {
            "location": "/net-TCPListener/#fun-close",
            "text": "fun ref\n close():  None  val  Public.  Dispose of resources.",
            "title": "fun close()"
        },
        {
            "location": "/net-TCPListener/#fun-local_address",
            "text": "fun box\n local_address():  IPAddress  val  Public.  Return the bound IP address.",
            "title": "fun local_address()"
        },
        {
            "location": "/net-TCPListener/#fun-_notify_listening",
            "text": "fun ref\n _notify_listening():  None  val  Private.  Inform the notifier that we're listening.",
            "title": "fun _notify_listening()"
        },
        {
            "location": "/net-TCPListener/#fun-_spawn",
            "text": "fun ref\n _spawn(ns:  U32  val):  None  val  Private.  Spawn a new connection.",
            "title": "fun _spawn()"
        },
        {
            "location": "/net-_TestBroadcast/",
            "text": "class _TestBroadcast is \nUnitTest\n ref\n\n\nIn package \"net\".\n\n\nPrivate, default capability iso.\n\n\nTest broadcasting with UDP.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timedout()\n\n\nfun box\n timedout(t: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestBroadcast"
        },
        {
            "location": "/net-_TestBroadcast/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-_TestBroadcast/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-_TestBroadcast/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-_TestBroadcast/#fun-apply",
            "text": "fun ref\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-_TestBroadcast/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-_TestBroadcast/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-_TestBroadcast/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-_TestBroadcast/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-_TestBroadcast/#fun-timedout",
            "text": "fun box\n timedout(t:  TestHelper  val):  None  val  Public.",
            "title": "fun timedout()"
        },
        {
            "location": "/net-_TestBroadcastMgr/",
            "text": "actor _TestBroadcastMgr\n\n\nIn package \"net\".\n\n\nPrivate, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(h: \nTestHelper\n val)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe fail()\n\n\nbe fail(msg: \nString\n val)\n\n\nPublic.\n\n\nbe pong_listening()\n\n\nbe pong_listening(ip: \nIPAddress\n val)\n\n\nPublic.\n\n\nbe succeed()\n\n\nbe succeed()\n\n\nPublic.",
            "title": "actor _TestBroadcastMgr"
        },
        {
            "location": "/net-_TestBroadcastMgr/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-_TestBroadcastMgr/#new-create",
            "text": "new create(h:  TestHelper  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-_TestBroadcastMgr/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/net-_TestBroadcastMgr/#be-fail",
            "text": "be fail(msg:  String  val)  Public.",
            "title": "be fail()"
        },
        {
            "location": "/net-_TestBroadcastMgr/#be-pong_listening",
            "text": "be pong_listening(ip:  IPAddress  val)  Public.",
            "title": "be pong_listening()"
        },
        {
            "location": "/net-_TestBroadcastMgr/#be-succeed",
            "text": "be succeed()  Public.",
            "title": "be succeed()"
        },
        {
            "location": "/net-_TestBuffer/",
            "text": "class _TestBuffer is \nUnitTest\n ref\n\n\nIn package \"net\".\n\n\nPrivate, default capability iso.\n\n\nTest adding to and reading from a Buffer.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestBuffer"
        },
        {
            "location": "/net-_TestBuffer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-_TestBuffer/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-_TestBuffer/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-_TestBuffer/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/net-_TestBuffer/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-_TestBuffer/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-_TestBuffer/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-_TestBuffer/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-_TestPing/",
            "text": "class _TestPing is \nUDPNotify\n ref\n\n\nIn package \"net\".\n\n\nPrivate, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(mgr: \n_TestBroadcastMgr\n tag, h: \nTestHelper\n val, ip: \nIPAddress\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun closed()\n\n\nfun ref\n closed(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun listening()\n\n\nfun ref\n listening(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun not_listening()\n\n\nfun ref\n not_listening(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun received()\n\n\nfun ref\n received(sock: \nUDPSocket\n ref, data: \nArray\n[\nU8\n val] iso, from: \nIPAddress\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestPing"
        },
        {
            "location": "/net-_TestPing/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-_TestPing/#new-create",
            "text": "new create(mgr:  _TestBroadcastMgr  tag, h:  TestHelper  val, ip:  IPAddress  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-_TestPing/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-_TestPing/#fun-closed",
            "text": "fun ref\n closed(sock:  UDPSocket  ref):  None  val  Public.",
            "title": "fun closed()"
        },
        {
            "location": "/net-_TestPing/#fun-listening",
            "text": "fun ref\n listening(sock:  UDPSocket  ref):  None  val  Public.",
            "title": "fun listening()"
        },
        {
            "location": "/net-_TestPing/#fun-not_listening",
            "text": "fun ref\n not_listening(sock:  UDPSocket  ref):  None  val  Public.",
            "title": "fun not_listening()"
        },
        {
            "location": "/net-_TestPing/#fun-received",
            "text": "fun ref\n received(sock:  UDPSocket  ref, data:  Array [ U8  val] iso, from:  IPAddress  val):  None  val  Public.",
            "title": "fun received()"
        },
        {
            "location": "/net-_TestPong/",
            "text": "class _TestPong is \nUDPNotify\n ref\n\n\nIn package \"net\".\n\n\nPrivate, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(mgr: \n_TestBroadcastMgr\n tag, h: \nTestHelper\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun closed()\n\n\nfun ref\n closed(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun listening()\n\n\nfun ref\n listening(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun not_listening()\n\n\nfun ref\n not_listening(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun received()\n\n\nfun ref\n received(sock: \nUDPSocket\n ref, data: \nArray\n[\nU8\n val] iso, from: \nIPAddress\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestPong"
        },
        {
            "location": "/net-_TestPong/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-_TestPong/#new-create",
            "text": "new create(mgr:  _TestBroadcastMgr  tag, h:  TestHelper  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-_TestPong/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-_TestPong/#fun-closed",
            "text": "fun ref\n closed(sock:  UDPSocket  ref):  None  val  Public.",
            "title": "fun closed()"
        },
        {
            "location": "/net-_TestPong/#fun-listening",
            "text": "fun ref\n listening(sock:  UDPSocket  ref):  None  val  Public.",
            "title": "fun listening()"
        },
        {
            "location": "/net-_TestPong/#fun-not_listening",
            "text": "fun ref\n not_listening(sock:  UDPSocket  ref):  None  val  Public.",
            "title": "fun not_listening()"
        },
        {
            "location": "/net-_TestPong/#fun-received",
            "text": "fun ref\n received(sock:  UDPSocket  ref, data:  Array [ U8  val] iso, from:  IPAddress  val):  None  val  Public.",
            "title": "fun received()"
        },
        {
            "location": "/net-UDPNotify/",
            "text": "interface UDPNotify\n\n\nIn package \"net\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nFunctions\n\n\nfun closed()\n\n\nfun ref\n closed(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when the socket is closed.\n\n\nfun listening()\n\n\nfun ref\n listening(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when the socket has been bound to an address.\n\n\nfun not_listening()\n\n\nfun ref\n not_listening(sock: \nUDPSocket\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled if it wasn't possible to bind the socket to an address.\n\n\nfun received()\n\n\nfun ref\n received(sock: \nUDPSocket\n ref, data: \nArray\n[\nU8\n val] iso, from: \nIPAddress\n val): \nNone\n val\n\n\nPublic.\n\n\nCalled when new data is received on the socket.",
            "title": "interface UDPNotify"
        },
        {
            "location": "/net-UDPNotify/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-UDPNotify/#fun-closed",
            "text": "fun ref\n closed(sock:  UDPSocket  ref):  None  val  Public.  Called when the socket is closed.",
            "title": "fun closed()"
        },
        {
            "location": "/net-UDPNotify/#fun-listening",
            "text": "fun ref\n listening(sock:  UDPSocket  ref):  None  val  Public.  Called when the socket has been bound to an address.",
            "title": "fun listening()"
        },
        {
            "location": "/net-UDPNotify/#fun-not_listening",
            "text": "fun ref\n not_listening(sock:  UDPSocket  ref):  None  val  Public.  Called if it wasn't possible to bind the socket to an address.",
            "title": "fun not_listening()"
        },
        {
            "location": "/net-UDPNotify/#fun-received",
            "text": "fun ref\n received(sock:  UDPSocket  ref, data:  Array [ U8  val] iso, from:  IPAddress  val):  None  val  Public.  Called when new data is received on the socket.",
            "title": "fun received()"
        },
        {
            "location": "/net-UDPSocket/",
            "text": "actor UDPSocket\n\n\nIn package \"net\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(notify: \nUDPNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional size: \nUSize\n val)\n\n\nPublic.\n\n\nnew ip4()\n\n\nnew ip4(notify: \nUDPNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional size: \nUSize\n val)\n\n\nPublic.\n\n\nnew ip6()\n\n\nnew ip6(notify: \nUDPNotify\n iso, optional host: \nString\n val, optional service: \nString\n val, optional size: \nUSize\n val)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.\n\n\nStop listening.\n\n\nbe _event_notify()\n\n\nbe _event_notify(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nPrivate.\n\n\nWhen we are readable, we accept new connections until none remain.\n\n\nbe multicast_join()\n\n\nbe multicast_join(group: \nString\n val, optional to: \nString\n val)\n\n\nPublic.\n\n\nAdd a multicast group. This can be limited to packets arriving on a\nspecific interface.\n\n\nbe multicast_leave()\n\n\nbe multicast_leave(group: \nString\n val, optional to: \nString\n val)\n\n\nPublic.\n\n\nDrop a multicast group. This can be limited to packets arriving on a\nspecific interface. No attempt is made to check that this socket has\npreviously added this group.\n\n\nbe _read_again()\n\n\nbe _read_again()\n\n\nPrivate.\n\n\nResume reading.\n\n\nbe set_broadcast()\n\n\nbe set_broadcast(state: \nBool\n val)\n\n\nPublic.\n\n\nEnable or disable broadcasting from this socket.\n\n\nbe set_multicast_interface()\n\n\nbe set_multicast_interface(optional from: \nString\n val)\n\n\nPublic.\n\n\nBy default, the OS will choose which address is used to send packets bound\nfor multicast addresses. This can be used to force a specific interface. To\nrevert to allowing the OS to choose, call with an empty string.\n\n\nbe set_multicast_loopback()\n\n\nbe set_multicast_loopback(loopback: \nBool\n val)\n\n\nPublic.\n\n\nBy default, packets sent to a multicast address will be received by the\nsending system if it has subscribed to that address. Disabling loopback\nprevents this.\n\n\nbe set_multicast_ttl()\n\n\nbe set_multicast_ttl(ttl: \nU8\n val)\n\n\nPublic.\n\n\nSet the TTL for multicast sends. Defaults to 1.\n\n\nbe set_notify()\n\n\nbe set_notify(notify: \nUDPNotify\n iso)\n\n\nPublic.\n\n\nChange the notifier.\n\n\nbe write()\n\n\nbe write(data: \nByteSeq\n val, to: \nIPAddress\n val)\n\n\nPublic.\n\n\nWrite a single sequence of bytes.\n\n\nbe writev()\n\n\nbe writev(data: \nByteSeqIter\n val, to: \nIPAddress\n val)\n\n\nPublic.\n\n\nWrite a sequence of sequences of bytes.\n\n\nFunctions\n\n\nfun _close()\n\n\nfun ref\n _close(): \nNone\n val\n\n\nPrivate.\n\n\nInform the notifier that we've closed.\n\n\nfun _complete_reads()\n\n\nfun ref\n _complete_reads(len: \nU32\n val): \nNone\n val\n\n\nPrivate.\n\n\nThe OS has informed as that len bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.\n\n\nfun local_address()\n\n\nfun box\n local_address(): \nIPAddress\n val\n\n\nPublic.\n\n\nReturn the bound IP address.\n\n\nfun _notify_listening()\n\n\nfun ref\n _notify_listening(): \nNone\n val\n\n\nPrivate.\n\n\nInform the notifier that we're listening.\n\n\nfun _pending_reads()\n\n\nfun ref\n _pending_reads(): \nNone\n val\n\n\nPrivate.\n\n\nRead while data is available, guessing the next packet length as we go. If\nwe read 4 kb of data, send ourself a resume message and stop reading, to\navoid starving other actors.\n\n\nfun _start_next_read()\n\n\nfun ref\n _start_next_read(): \nNone\n val\n\n\nPrivate.\n\n\nStart our next receive.\nThis is used only with IOCP on Windows.\n\n\nfun _write()\n\n\nfun ref\n _write(data: \nByteSeq\n val, to: \nIPAddress\n val): \nNone\n val\n\n\nPrivate.\n\n\nWrite the datagram to the socket.",
            "title": "actor UDPSocket"
        },
        {
            "location": "/net-UDPSocket/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-UDPSocket/#new-create",
            "text": "new create(notify:  UDPNotify  iso, optional host:  String  val, optional service:  String  val, optional size:  USize  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-UDPSocket/#new-ip4",
            "text": "new ip4(notify:  UDPNotify  iso, optional host:  String  val, optional service:  String  val, optional size:  USize  val)  Public.",
            "title": "new ip4()"
        },
        {
            "location": "/net-UDPSocket/#new-ip6",
            "text": "new ip6(notify:  UDPNotify  iso, optional host:  String  val, optional service:  String  val, optional size:  USize  val)  Public.",
            "title": "new ip6()"
        },
        {
            "location": "/net-UDPSocket/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/net-UDPSocket/#be-dispose",
            "text": "be dispose()  Public.  Stop listening.",
            "title": "be dispose()"
        },
        {
            "location": "/net-UDPSocket/#be-_event_notify",
            "text": "be _event_notify(event:  Pointer [ AsioEvent  val] tag, flags:  U32  val, arg:  U32  val)  Private.  When we are readable, we accept new connections until none remain.",
            "title": "be _event_notify()"
        },
        {
            "location": "/net-UDPSocket/#be-multicast_join",
            "text": "be multicast_join(group:  String  val, optional to:  String  val)  Public.  Add a multicast group. This can be limited to packets arriving on a\nspecific interface.",
            "title": "be multicast_join()"
        },
        {
            "location": "/net-UDPSocket/#be-multicast_leave",
            "text": "be multicast_leave(group:  String  val, optional to:  String  val)  Public.  Drop a multicast group. This can be limited to packets arriving on a\nspecific interface. No attempt is made to check that this socket has\npreviously added this group.",
            "title": "be multicast_leave()"
        },
        {
            "location": "/net-UDPSocket/#be-_read_again",
            "text": "be _read_again()  Private.  Resume reading.",
            "title": "be _read_again()"
        },
        {
            "location": "/net-UDPSocket/#be-set_broadcast",
            "text": "be set_broadcast(state:  Bool  val)  Public.  Enable or disable broadcasting from this socket.",
            "title": "be set_broadcast()"
        },
        {
            "location": "/net-UDPSocket/#be-set_multicast_interface",
            "text": "be set_multicast_interface(optional from:  String  val)  Public.  By default, the OS will choose which address is used to send packets bound\nfor multicast addresses. This can be used to force a specific interface. To\nrevert to allowing the OS to choose, call with an empty string.",
            "title": "be set_multicast_interface()"
        },
        {
            "location": "/net-UDPSocket/#be-set_multicast_loopback",
            "text": "be set_multicast_loopback(loopback:  Bool  val)  Public.  By default, packets sent to a multicast address will be received by the\nsending system if it has subscribed to that address. Disabling loopback\nprevents this.",
            "title": "be set_multicast_loopback()"
        },
        {
            "location": "/net-UDPSocket/#be-set_multicast_ttl",
            "text": "be set_multicast_ttl(ttl:  U8  val)  Public.  Set the TTL for multicast sends. Defaults to 1.",
            "title": "be set_multicast_ttl()"
        },
        {
            "location": "/net-UDPSocket/#be-set_notify",
            "text": "be set_notify(notify:  UDPNotify  iso)  Public.  Change the notifier.",
            "title": "be set_notify()"
        },
        {
            "location": "/net-UDPSocket/#be-write",
            "text": "be write(data:  ByteSeq  val, to:  IPAddress  val)  Public.  Write a single sequence of bytes.",
            "title": "be write()"
        },
        {
            "location": "/net-UDPSocket/#be-writev",
            "text": "be writev(data:  ByteSeqIter  val, to:  IPAddress  val)  Public.  Write a sequence of sequences of bytes.",
            "title": "be writev()"
        },
        {
            "location": "/net-UDPSocket/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-UDPSocket/#fun-_close",
            "text": "fun ref\n _close():  None  val  Private.  Inform the notifier that we've closed.",
            "title": "fun _close()"
        },
        {
            "location": "/net-UDPSocket/#fun-_complete_reads",
            "text": "fun ref\n _complete_reads(len:  U32  val):  None  val  Private.  The OS has informed as that len bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.",
            "title": "fun _complete_reads()"
        },
        {
            "location": "/net-UDPSocket/#fun-local_address",
            "text": "fun box\n local_address():  IPAddress  val  Public.  Return the bound IP address.",
            "title": "fun local_address()"
        },
        {
            "location": "/net-UDPSocket/#fun-_notify_listening",
            "text": "fun ref\n _notify_listening():  None  val  Private.  Inform the notifier that we're listening.",
            "title": "fun _notify_listening()"
        },
        {
            "location": "/net-UDPSocket/#fun-_pending_reads",
            "text": "fun ref\n _pending_reads():  None  val  Private.  Read while data is available, guessing the next packet length as we go. If\nwe read 4 kb of data, send ourself a resume message and stop reading, to\navoid starving other actors.",
            "title": "fun _pending_reads()"
        },
        {
            "location": "/net-UDPSocket/#fun-_start_next_read",
            "text": "fun ref\n _start_next_read():  None  val  Private.  Start our next receive.\nThis is used only with IOCP on Windows.",
            "title": "fun _start_next_read()"
        },
        {
            "location": "/net-UDPSocket/#fun-_write",
            "text": "fun ref\n _write(data:  ByteSeq  val, to:  IPAddress  val):  None  val  Private.  Write the datagram to the socket.",
            "title": "fun _write()"
        },
        {
            "location": "/net-http--index/",
            "text": "No package doc string provided for net/http.",
            "title": "Package"
        },
        {
            "location": "/net-http-_BuildBad/",
            "text": "class _BuildBad is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _BuildBad"
        },
        {
            "location": "/net-http-_BuildBad/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_BuildBad/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_BuildBad/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_BuildBad/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_BuildBad/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_BuildBad/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_BuildBad/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_BuildBad/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_BuildBasic/",
            "text": "class _BuildBasic is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _BuildBasic"
        },
        {
            "location": "/net-http-_BuildBasic/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_BuildBasic/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_BuildBasic/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_BuildBasic/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_BuildBasic/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_BuildBasic/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_BuildBasic/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_BuildBasic/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_BuildMissingParts/",
            "text": "class _BuildMissingParts is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _BuildMissingParts"
        },
        {
            "location": "/net-http-_BuildMissingParts/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_BuildMissingParts/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_BuildMissingParts/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_BuildMissingParts/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_BuildMissingParts/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_BuildMissingParts/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_BuildMissingParts/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_BuildMissingParts/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_BuildNoEncoding/",
            "text": "class _BuildNoEncoding is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _BuildNoEncoding"
        },
        {
            "location": "/net-http-_BuildNoEncoding/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_BuildNoEncoding/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_BuildNoEncoding/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_BuildNoEncoding/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_BuildNoEncoding/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_BuildNoEncoding/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_BuildNoEncoding/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_BuildNoEncoding/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_Check/",
            "text": "class _Check is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _Check"
        },
        {
            "location": "/net-http-_Check/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_Check/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_Check/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_Check/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_Check/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_Check/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_Check/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_Check/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_CheckBad/",
            "text": "class _CheckBad is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _CheckBad"
        },
        {
            "location": "/net-http-_CheckBad/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_CheckBad/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_CheckBad/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_CheckBad/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_CheckBad/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_CheckBad/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_CheckBad/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_CheckBad/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_CheckIPv6/",
            "text": "class _CheckIPv6 is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _CheckIPv6"
        },
        {
            "location": "/net-http-_CheckIPv6/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_CheckIPv6/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_CheckIPv6/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_CheckIPv6/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_CheckIPv6/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_CheckIPv6/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_CheckIPv6/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_CheckIPv6/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_CheckScheme/",
            "text": "class _CheckScheme is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _CheckScheme"
        },
        {
            "location": "/net-http-_CheckScheme/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_CheckScheme/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_CheckScheme/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_CheckScheme/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_CheckScheme/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_CheckScheme/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_CheckScheme/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_CheckScheme/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-Client/",
            "text": "actor Client\n\n\nIn package \"net/http\".\n\n\nPublic, default capability tag.\n\n\nManages a collection of client connections.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional sslctx: (\nSSLContext\n val | \nNone\n val), optional pipeline: \nBool\n val)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe apply()\n\n\nbe apply(request: \nPayload\n val)\n\n\nPublic.\n\n\nSchedule a request.\n\n\nbe cancel()\n\n\nbe cancel(request: \nPayload\n val)\n\n\nPublic.\n\n\nCancel a request.\n\n\nFunctions\n\n\nfun _get_client()\n\n\nfun ref\n _get_client(url: \nURL\n val): \n_ClientConnection\n tag ?\n\n\nPrivate, may raise an error.\n\n\nGets or creates a client for the given URL.",
            "title": "actor Client"
        },
        {
            "location": "/net-http-Client/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-Client/#new-create",
            "text": "new create(optional sslctx: ( SSLContext  val |  None  val), optional pipeline:  Bool  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-Client/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/net-http-Client/#be-apply",
            "text": "be apply(request:  Payload  val)  Public.  Schedule a request.",
            "title": "be apply()"
        },
        {
            "location": "/net-http-Client/#be-cancel",
            "text": "be cancel(request:  Payload  val)  Public.  Cancel a request.",
            "title": "be cancel()"
        },
        {
            "location": "/net-http-Client/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-Client/#fun-_get_client",
            "text": "fun ref\n _get_client(url:  URL  val):  _ClientConnection  tag ?  Private, may raise an error.  Gets or creates a client for the given URL.",
            "title": "fun _get_client()"
        },
        {
            "location": "/net-http-_ClientConnection/",
            "text": "actor _ClientConnection\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability tag.\n\n\nManages a persistent and possibly pipelined TCP connection to an HTTP server.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(host: \nString\n val, service: \nString\n val, optional sslctx: (\nSSLContext\n val | \nNone\n val), optional pipeline: \nBool\n val)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe apply()\n\n\nbe apply(request: \nPayload\n val)\n\n\nPublic.\n\n\nSchedule a request.\n\n\nbe _auth_failed()\n\n\nbe _auth_failed(conn: \nTCPConnection\n tag)\n\n\nPrivate.\n\n\nThe connection couldn't be authenticated. Cancel all pending requests.\n\n\nbe cancel()\n\n\nbe cancel(request: \nPayload\n tag)\n\n\nPublic.\n\n\nCancel a request.\n\n\nbe _closed()\n\n\nbe _closed(conn: \nTCPConnection\n tag)\n\n\nPrivate.\n\n\nThe connection to the server has closed prematurely. Cancel everything.\n\n\nbe _connect_failed()\n\n\nbe _connect_failed(conn: \nTCPConnection\n tag)\n\n\nPrivate.\n\n\nThe connection couldn't be established. Cancel all pending requests.\n\n\nbe _connected()\n\n\nbe _connected(conn: \nTCPConnection\n tag)\n\n\nPrivate.\n\n\nThe connection to the server has been established. Send pending requests.\n\n\nbe _response()\n\n\nbe _response(response: \nPayload\n iso)\n\n\nPrivate.\n\n\nCall the request's handler and supply the response.\n\n\nFunctions\n\n\nfun _cancel_all()\n\n\nfun ref\n _cancel_all(): \nNone\n val\n\n\nPrivate.\n\n\nCancel all pending requests.\n\n\nfun _new_conn()\n\n\nfun ref\n _new_conn(): \nNone\n val\n\n\nPrivate.\n\n\nCreates a new connection.\n\n\nfun _send()\n\n\nfun ref\n _send(): \nNone\n val\n\n\nPrivate.\n\n\nSend pending requests. If the connection is closed, open it. If we have\nnothing to send and we aren't waiting on any responses, close the\nconnection.",
            "title": "actor _ClientConnection"
        },
        {
            "location": "/net-http-_ClientConnection/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_ClientConnection/#new-create",
            "text": "new create(host:  String  val, service:  String  val, optional sslctx: ( SSLContext  val |  None  val), optional pipeline:  Bool  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_ClientConnection/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/net-http-_ClientConnection/#be-apply",
            "text": "be apply(request:  Payload  val)  Public.  Schedule a request.",
            "title": "be apply()"
        },
        {
            "location": "/net-http-_ClientConnection/#be-_auth_failed",
            "text": "be _auth_failed(conn:  TCPConnection  tag)  Private.  The connection couldn't be authenticated. Cancel all pending requests.",
            "title": "be _auth_failed()"
        },
        {
            "location": "/net-http-_ClientConnection/#be-cancel",
            "text": "be cancel(request:  Payload  tag)  Public.  Cancel a request.",
            "title": "be cancel()"
        },
        {
            "location": "/net-http-_ClientConnection/#be-_closed",
            "text": "be _closed(conn:  TCPConnection  tag)  Private.  The connection to the server has closed prematurely. Cancel everything.",
            "title": "be _closed()"
        },
        {
            "location": "/net-http-_ClientConnection/#be-_connect_failed",
            "text": "be _connect_failed(conn:  TCPConnection  tag)  Private.  The connection couldn't be established. Cancel all pending requests.",
            "title": "be _connect_failed()"
        },
        {
            "location": "/net-http-_ClientConnection/#be-_connected",
            "text": "be _connected(conn:  TCPConnection  tag)  Private.  The connection to the server has been established. Send pending requests.",
            "title": "be _connected()"
        },
        {
            "location": "/net-http-_ClientConnection/#be-_response",
            "text": "be _response(response:  Payload  iso)  Private.  Call the request's handler and supply the response.",
            "title": "be _response()"
        },
        {
            "location": "/net-http-_ClientConnection/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_ClientConnection/#fun-_cancel_all",
            "text": "fun ref\n _cancel_all():  None  val  Private.  Cancel all pending requests.",
            "title": "fun _cancel_all()"
        },
        {
            "location": "/net-http-_ClientConnection/#fun-_new_conn",
            "text": "fun ref\n _new_conn():  None  val  Private.  Creates a new connection.",
            "title": "fun _new_conn()"
        },
        {
            "location": "/net-http-_ClientConnection/#fun-_send",
            "text": "fun ref\n _send():  None  val  Private.  Send pending requests. If the connection is closed, open it. If we have\nnothing to send and we aren't waiting on any responses, close the\nconnection.",
            "title": "fun _send()"
        },
        {
            "location": "/net-http-CommonLog/",
            "text": "class CommonLog is \nLogger\n val\n\n\nIn package \"net/http\".\n\n\nPublic, default capability ref.\n\n\nLogs HTTP requests in the common log format.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(out: \nOutStream\n tag)\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun val\n apply(ip: \nString\n val, request: \nPayload\n val, response: \nPayload\n val): \nNone\n val\n\n\nPublic.\n\n\nfun _entry()\n\n\nfun box\n _entry(s: \nString\n val): \nString\n val\n\n\nPrivate.",
            "title": "class CommonLog"
        },
        {
            "location": "/net-http-CommonLog/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-CommonLog/#new-create",
            "text": "new create(out:  OutStream  tag)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-CommonLog/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-CommonLog/#fun-apply",
            "text": "fun val\n apply(ip:  String  val, request:  Payload  val, response:  Payload  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-CommonLog/#fun-_entry",
            "text": "fun box\n _entry(s:  String  val):  String  val  Private.",
            "title": "fun _entry()"
        },
        {
            "location": "/net-http-ContentsLog/",
            "text": "class ContentsLog\n\n\nIn package \"net/http\".\n\n\nPublic, default capability ref.\n\n\nLogs the contents of HTTP requests and responses.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(out: \nOutStream\n tag)\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun val\n apply(ip: \nString\n val, request: \nPayload\n val, response: \nPayload\n val): \nNone\n val\n\n\nPublic.",
            "title": "class ContentsLog"
        },
        {
            "location": "/net-http-ContentsLog/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-ContentsLog/#new-create",
            "text": "new create(out:  OutStream  tag)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-ContentsLog/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-ContentsLog/#fun-apply",
            "text": "fun val\n apply(ip:  String  val, request:  Payload  val, response:  Payload  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_Decode/",
            "text": "class _Decode is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _Decode"
        },
        {
            "location": "/net-http-_Decode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_Decode/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_Decode/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_Decode/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_Decode/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_Decode/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_Decode/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_Decode/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_DecodeBad/",
            "text": "class _DecodeBad is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _DecodeBad"
        },
        {
            "location": "/net-http-_DecodeBad/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_DecodeBad/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_DecodeBad/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_DecodeBad/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_DecodeBad/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_DecodeBad/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_DecodeBad/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_DecodeBad/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-DiscardLog/",
            "text": "primitive DiscardLog\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nDoesn't log anything.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun val\n apply(ip: \nString\n val, request: \nPayload\n val, response: \nPayload\n val): \nNone\n val\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nDiscardLog\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nDiscardLog\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive DiscardLog"
        },
        {
            "location": "/net-http-DiscardLog/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-DiscardLog/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-DiscardLog/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-DiscardLog/#fun-apply",
            "text": "fun val\n apply(ip:  String  val, request:  Payload  val, response:  Payload  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-DiscardLog/#fun-eq",
            "text": "fun box\n eq(that:  DiscardLog  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-DiscardLog/#fun-ne",
            "text": "fun box\n ne(that:  DiscardLog  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_Encode/",
            "text": "class _Encode is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _Encode"
        },
        {
            "location": "/net-http-_Encode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_Encode/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_Encode/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_Encode/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_Encode/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_Encode/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_Encode/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_Encode/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_EncodeBad/",
            "text": "class _EncodeBad is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _EncodeBad"
        },
        {
            "location": "/net-http-_EncodeBad/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_EncodeBad/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_EncodeBad/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_EncodeBad/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_EncodeBad/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_EncodeBad/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_EncodeBad/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_EncodeBad/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_EncodeClean/",
            "text": "class _EncodeClean is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _EncodeClean"
        },
        {
            "location": "/net-http-_EncodeClean/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_EncodeClean/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_EncodeClean/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_EncodeClean/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_EncodeClean/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_EncodeClean/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_EncodeClean/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_EncodeClean/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_EncodeIPv6/",
            "text": "class _EncodeIPv6 is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _EncodeIPv6"
        },
        {
            "location": "/net-http-_EncodeIPv6/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_EncodeIPv6/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_EncodeIPv6/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_EncodeIPv6/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_EncodeIPv6/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_EncodeIPv6/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_EncodeIPv6/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_EncodeIPv6/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-_HostService/",
            "text": "class _HostService is \nHashable\n ref, \nEquatable\n[\n_HostService\n val] ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nlet host: \nString\n val\n\n\nlet scheme: \nString\n val\n\n\nlet service: \nString\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(scheme': \nString\n val, host': \nString\n val, service': \nString\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_HostService\n box): \nBool\n val\n\n\nPublic.\n\n\nfun hash()\n\n\nfun box\n hash(): \nU64\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_HostService\n val): \nBool\n val\n\n\nPublic.",
            "title": "class _HostService"
        },
        {
            "location": "/net-http-_HostService/#public-fields",
            "text": "let host:  String  val  let scheme:  String  val  let service:  String  val",
            "title": "Public fields"
        },
        {
            "location": "/net-http-_HostService/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_HostService/#new-create",
            "text": "new create(scheme':  String  val, host':  String  val, service':  String  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_HostService/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_HostService/#fun-eq",
            "text": "fun box\n eq(that:  _HostService  box):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_HostService/#fun-hash",
            "text": "fun box\n hash():  U64  val  Public.",
            "title": "fun hash()"
        },
        {
            "location": "/net-http-_HostService/#fun-ne",
            "text": "fun box\n ne(that:  _HostService  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-Logger/",
            "text": "interface Logger\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nHandles logging request/response pairs.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun val\n apply(ip: \nString\n val, request: \nPayload\n val, response: \nPayload\n val): \nAny\n tag\n\n\nPublic.",
            "title": "interface Logger"
        },
        {
            "location": "/net-http-Logger/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-Logger/#fun-apply",
            "text": "fun val\n apply(ip:  String  val, request:  Payload  val, response:  Payload  val):  Any  tag  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"net/http\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/net-http-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/net-http-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/net-http-Payload/",
            "text": "class Payload\n\n\nIn package \"net/http\".\n\n\nPublic, default capability iso.\n\n\nAn HTTP payload. For a response, the method indicates the status text. For a\nrequest, the status is meaningless.\n\n\nPublic fields\n\n\n\n\nvar handler: (\nResponseHandler\n val | \nNone\n val)\n\n\nvar method: \nString\n val\n\n\nvar proto: \nString\n val\n\n\nvar status: \nU16\n val\n\n\nvar url: \nURL\n val\n\n\n\n\nConstructors\n\n\nnew _empty()\n\n\nnew _empty(optional response': \nBool\n val)\n\n\nPrivate.\n\n\nnew request()\n\n\nnew request(optional method': \nString\n val, optional url': \nURL\n val, optional handler': (\nResponseHandler\n val | \nNone\n val))\n\n\nPublic.\n\n\nnew response()\n\n\nnew response(optional status': \nU16\n val, optional description: \nString\n val, optional handler': (\nResponseHandler\n val | \nNone\n val))\n\n\nPublic.\n\n\nFunctions\n\n\nfun _add_body()\n\n\nfun box\n _add_body(list: \nArray\n[\nByteSeq\n val] iso): \nArray\n[\nByteSeq\n val] iso^\n\n\nPrivate.\n\n\nAdd the body to the list.\nTODO: don't include the body for HEAD, 204, 304 or 1xx\n\n\nfun add_chunk()\n\n\nfun ref\n add_chunk(data: \nByteSeq\n val): \nPayload\n ref^\n\n\nPublic.\n\n\nAdd a chunk to the body.\n\n\nfun _add_headers()\n\n\nfun box\n _add_headers(list: \nArray\n[\nByteSeq\n val] iso): \nArray\n[\nByteSeq\n val] iso^\n\n\nPrivate.\n\n\nAdd the headers to the list.\n\n\nfun apply()\n\n\nfun box\n apply(key: \nString\n val): \nString\n val ?\n\n\nPublic, may raise an error.\n\n\nGet a header.\n\n\nfun body()\n\n\nfun box\n body(): this-\nArray\n[\nByteSeq\n val] ref\n\n\nPublic.\n\n\nGet the body.\n\n\nfun body_size()\n\n\nfun box\n body_size(): \nUSize\n val\n\n\nPublic.\n\n\nGet the total size of the body.\n\n\nfun _client_fail()\n\n\nfun val\n _client_fail(): \nNone\n val\n\n\nPrivate.\n\n\nTrigger the response handler with an error payload. This is private to\nprevent request handlers from responding to a request more than once.\n\n\nfun _client_respond()\n\n\nfun val\n _client_respond(response': \nPayload\n iso): \nNone\n val\n\n\nPrivate.\n\n\nTrigger the response handler. This is private to prevent request handlers\nfrom responding to a request more than once.\n\n\nfun fail()\n\n\nfun iso\n fail(): \nNone\n val\n\n\nPublic.\n\n\nTrigger the response handler with an error payload.\n\n\nfun headers()\n\n\nfun box\n headers(): this-\nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] ref\n\n\nPublic.\n\n\nGet the headers.\n\n\nfun respond()\n\n\nfun iso\n respond(response': \nPayload\n iso): \nNone\n val\n\n\nPublic.\n\n\nTrigger the response handler.\n\n\nfun update()\n\n\nfun ref\n update(key: \nString\n val, value: \nString\n val): \nPayload\n ref^\n\n\nPublic.\n\n\nSet a header. If we've already received the header, append the value as a\ncomma separated list, as per RFC 2616 section 4.2.\n\n\nfun _write()\n\n\nfun box\n _write(conn: \nTCPConnection\n tag, optional keepalive: \nBool\n val): \nNone\n val\n\n\nPrivate.\n\n\nWrites the payload to a TCP connection.\n\n\nfun _write_request()\n\n\nfun box\n _write_request(conn: \nTCPConnection\n tag, keepalive: \nBool\n val): \nNone\n val\n\n\nPrivate.\n\n\nWrites an an HTTP request.\n\n\nfun _write_response()\n\n\nfun box\n _write_response(conn: \nTCPConnection\n tag, keepalive: \nBool\n val): \nNone\n val\n\n\nPrivate.\n\n\nWrite as an HTTP response.",
            "title": "class Payload"
        },
        {
            "location": "/net-http-Payload/#public-fields",
            "text": "var handler: ( ResponseHandler  val |  None  val)  var method:  String  val  var proto:  String  val  var status:  U16  val  var url:  URL  val",
            "title": "Public fields"
        },
        {
            "location": "/net-http-Payload/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-Payload/#new-_empty",
            "text": "new _empty(optional response':  Bool  val)  Private.",
            "title": "new _empty()"
        },
        {
            "location": "/net-http-Payload/#new-request",
            "text": "new request(optional method':  String  val, optional url':  URL  val, optional handler': ( ResponseHandler  val |  None  val))  Public.",
            "title": "new request()"
        },
        {
            "location": "/net-http-Payload/#new-response",
            "text": "new response(optional status':  U16  val, optional description:  String  val, optional handler': ( ResponseHandler  val |  None  val))  Public.",
            "title": "new response()"
        },
        {
            "location": "/net-http-Payload/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-Payload/#fun-_add_body",
            "text": "fun box\n _add_body(list:  Array [ ByteSeq  val] iso):  Array [ ByteSeq  val] iso^  Private.  Add the body to the list.\nTODO: don't include the body for HEAD, 204, 304 or 1xx",
            "title": "fun _add_body()"
        },
        {
            "location": "/net-http-Payload/#fun-add_chunk",
            "text": "fun ref\n add_chunk(data:  ByteSeq  val):  Payload  ref^  Public.  Add a chunk to the body.",
            "title": "fun add_chunk()"
        },
        {
            "location": "/net-http-Payload/#fun-_add_headers",
            "text": "fun box\n _add_headers(list:  Array [ ByteSeq  val] iso):  Array [ ByteSeq  val] iso^  Private.  Add the headers to the list.",
            "title": "fun _add_headers()"
        },
        {
            "location": "/net-http-Payload/#fun-apply",
            "text": "fun box\n apply(key:  String  val):  String  val ?  Public, may raise an error.  Get a header.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-Payload/#fun-body",
            "text": "fun box\n body(): this- Array [ ByteSeq  val] ref  Public.  Get the body.",
            "title": "fun body()"
        },
        {
            "location": "/net-http-Payload/#fun-body_size",
            "text": "fun box\n body_size():  USize  val  Public.  Get the total size of the body.",
            "title": "fun body_size()"
        },
        {
            "location": "/net-http-Payload/#fun-_client_fail",
            "text": "fun val\n _client_fail():  None  val  Private.  Trigger the response handler with an error payload. This is private to\nprevent request handlers from responding to a request more than once.",
            "title": "fun _client_fail()"
        },
        {
            "location": "/net-http-Payload/#fun-_client_respond",
            "text": "fun val\n _client_respond(response':  Payload  iso):  None  val  Private.  Trigger the response handler. This is private to prevent request handlers\nfrom responding to a request more than once.",
            "title": "fun _client_respond()"
        },
        {
            "location": "/net-http-Payload/#fun-fail",
            "text": "fun iso\n fail():  None  val  Public.  Trigger the response handler with an error payload.",
            "title": "fun fail()"
        },
        {
            "location": "/net-http-Payload/#fun-headers",
            "text": "fun box\n headers(): this- HashMap [ String  val,  String  val,  HashEq [ String  val] val] ref  Public.  Get the headers.",
            "title": "fun headers()"
        },
        {
            "location": "/net-http-Payload/#fun-respond",
            "text": "fun iso\n respond(response':  Payload  iso):  None  val  Public.  Trigger the response handler.",
            "title": "fun respond()"
        },
        {
            "location": "/net-http-Payload/#fun-update",
            "text": "fun ref\n update(key:  String  val, value:  String  val):  Payload  ref^  Public.  Set a header. If we've already received the header, append the value as a\ncomma separated list, as per RFC 2616 section 4.2.",
            "title": "fun update()"
        },
        {
            "location": "/net-http-Payload/#fun-_write",
            "text": "fun box\n _write(conn:  TCPConnection  tag, optional keepalive:  Bool  val):  None  val  Private.  Writes the payload to a TCP connection.",
            "title": "fun _write()"
        },
        {
            "location": "/net-http-Payload/#fun-_write_request",
            "text": "fun box\n _write_request(conn:  TCPConnection  tag, keepalive:  Bool  val):  None  val  Private.  Writes an an HTTP request.",
            "title": "fun _write_request()"
        },
        {
            "location": "/net-http-Payload/#fun-_write_response",
            "text": "fun box\n _write_response(conn:  TCPConnection  tag, keepalive:  Bool  val):  None  val  Private.  Write as an HTTP response.",
            "title": "fun _write_response()"
        },
        {
            "location": "/net-http-_PayloadBody/",
            "text": "primitive _PayloadBody\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PayloadBody\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PayloadBody\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PayloadBody"
        },
        {
            "location": "/net-http-_PayloadBody/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadBody/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_PayloadBody/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadBody/#fun-eq",
            "text": "fun box\n eq(that:  _PayloadBody  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_PayloadBody/#fun-ne",
            "text": "fun box\n ne(that:  _PayloadBody  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_PayloadBuilder/",
            "text": "class _PayloadBuilder\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability ref.\n\n\nThis builds a Payload using received chunks of data.\n\n\nConstructors\n\n\nnew request()\n\n\nnew request()\n\n\nPublic.\n\n\nnew response()\n\n\nnew response()\n\n\nPublic.\n\n\nFunctions\n\n\nfun closed()\n\n\nfun ref\n closed(buffer: \nBuffer\n ref): \nNone\n val\n\n\nPublic.\n\n\nThe connection has closed, which may signal that all remaining data is the\npayload body.\n\n\nfun done()\n\n\nfun ref\n done(): \nPayload\n iso^\n\n\nPublic.\n\n\nFinish parsing. Returns the payload if it is ready, otherwise an empty\npayload.\n\n\nfun parse()\n\n\nfun ref\n parse(buffer: \nBuffer\n ref): \nNone\n val\n\n\nPublic.\n\n\nParse available data based on our state. _ResponseBody is not listed here.\nIn that state, we wait for the connection to close and treat all pending\ndata as the response body.\n\n\nfun _parse_chunk()\n\n\nfun ref\n _parse_chunk(buffer: \nBuffer\n ref): \nNone\n val\n\n\nPrivate.\n\n\nLook for a chunk.\n\n\nfun _parse_chunk_end()\n\n\nfun ref\n _parse_chunk_end(buffer: \nBuffer\n ref): \nNone\n val\n\n\nPrivate.\n\n\nLook for a blank line.\n\n\nfun _parse_chunk_start()\n\n\nfun ref\n _parse_chunk_start(buffer: \nBuffer\n ref): \nNone\n val\n\n\nPrivate.\n\n\nLook for the beginning of a chunk.\n\n\nfun _parse_content_length()\n\n\nfun ref\n _parse_content_length(buffer: \nBuffer\n ref): \nNone\n val\n\n\nPrivate.\n\n\nLook for _content_length available bytes.\n\n\nfun _parse_headers()\n\n\nfun ref\n _parse_headers(buffer: \nBuffer\n ref): \nNone\n val\n\n\nPrivate.\n\n\nLook for: \"\n:\n\" or an empty line.\n\n\nfun _parse_request()\n\n\nfun ref\n _parse_request(buffer: \nBuffer\n ref): \nNone\n val\n\n\nPrivate.\n\n\nLook for: \"\n \n \n\".\n\n\nfun _parse_response()\n\n\nfun ref\n _parse_response(buffer: \nBuffer\n ref): \nNone\n val\n\n\nPrivate.\n\n\nLook for: \"\n \n \n\".\n\n\nfun state()\n\n\nfun box\n state(): (((((((((\n_PayloadRequest\n val | \n_PayloadResponse\n val) | \n_PayloadHeaders\n val) | \n_PayloadContentLength\n val) | \n_PayloadChunkStart\n val) | \n_PayloadChunk\n val) | \n_PayloadChunkEnd\n val) | \n_PayloadBody\n val) | \n_PayloadReady\n val) | \n_PayloadError\n val)\n\n\nPublic.\n\n\nReturns the parse state.",
            "title": "class _PayloadBuilder"
        },
        {
            "location": "/net-http-_PayloadBuilder/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadBuilder/#new-request",
            "text": "new request()  Public.",
            "title": "new request()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#new-response",
            "text": "new response()  Public.",
            "title": "new response()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-closed",
            "text": "fun ref\n closed(buffer:  Buffer  ref):  None  val  Public.  The connection has closed, which may signal that all remaining data is the\npayload body.",
            "title": "fun closed()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-done",
            "text": "fun ref\n done():  Payload  iso^  Public.  Finish parsing. Returns the payload if it is ready, otherwise an empty\npayload.",
            "title": "fun done()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-parse",
            "text": "fun ref\n parse(buffer:  Buffer  ref):  None  val  Public.  Parse available data based on our state. _ResponseBody is not listed here.\nIn that state, we wait for the connection to close and treat all pending\ndata as the response body.",
            "title": "fun parse()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-_parse_chunk",
            "text": "fun ref\n _parse_chunk(buffer:  Buffer  ref):  None  val  Private.  Look for a chunk.",
            "title": "fun _parse_chunk()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-_parse_chunk_end",
            "text": "fun ref\n _parse_chunk_end(buffer:  Buffer  ref):  None  val  Private.  Look for a blank line.",
            "title": "fun _parse_chunk_end()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-_parse_chunk_start",
            "text": "fun ref\n _parse_chunk_start(buffer:  Buffer  ref):  None  val  Private.  Look for the beginning of a chunk.",
            "title": "fun _parse_chunk_start()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-_parse_content_length",
            "text": "fun ref\n _parse_content_length(buffer:  Buffer  ref):  None  val  Private.  Look for _content_length available bytes.",
            "title": "fun _parse_content_length()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-_parse_headers",
            "text": "fun ref\n _parse_headers(buffer:  Buffer  ref):  None  val  Private.  Look for: \" : \" or an empty line.",
            "title": "fun _parse_headers()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-_parse_request",
            "text": "fun ref\n _parse_request(buffer:  Buffer  ref):  None  val  Private.  Look for: \"     \".",
            "title": "fun _parse_request()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-_parse_response",
            "text": "fun ref\n _parse_response(buffer:  Buffer  ref):  None  val  Private.  Look for: \"     \".",
            "title": "fun _parse_response()"
        },
        {
            "location": "/net-http-_PayloadBuilder/#fun-state",
            "text": "fun box\n state(): ((((((((( _PayloadRequest  val |  _PayloadResponse  val) |  _PayloadHeaders  val) |  _PayloadContentLength  val) |  _PayloadChunkStart  val) |  _PayloadChunk  val) |  _PayloadChunkEnd  val) |  _PayloadBody  val) |  _PayloadReady  val) |  _PayloadError  val)  Public.  Returns the parse state.",
            "title": "fun state()"
        },
        {
            "location": "/net-http-_PayloadChunk/",
            "text": "primitive _PayloadChunk\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PayloadChunk\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PayloadChunk\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PayloadChunk"
        },
        {
            "location": "/net-http-_PayloadChunk/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadChunk/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_PayloadChunk/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadChunk/#fun-eq",
            "text": "fun box\n eq(that:  _PayloadChunk  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_PayloadChunk/#fun-ne",
            "text": "fun box\n ne(that:  _PayloadChunk  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_PayloadChunkEnd/",
            "text": "primitive _PayloadChunkEnd\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PayloadChunkEnd\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PayloadChunkEnd\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PayloadChunkEnd"
        },
        {
            "location": "/net-http-_PayloadChunkEnd/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadChunkEnd/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_PayloadChunkEnd/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadChunkEnd/#fun-eq",
            "text": "fun box\n eq(that:  _PayloadChunkEnd  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_PayloadChunkEnd/#fun-ne",
            "text": "fun box\n ne(that:  _PayloadChunkEnd  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_PayloadChunkStart/",
            "text": "primitive _PayloadChunkStart\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PayloadChunkStart\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PayloadChunkStart\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PayloadChunkStart"
        },
        {
            "location": "/net-http-_PayloadChunkStart/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadChunkStart/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_PayloadChunkStart/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadChunkStart/#fun-eq",
            "text": "fun box\n eq(that:  _PayloadChunkStart  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_PayloadChunkStart/#fun-ne",
            "text": "fun box\n ne(that:  _PayloadChunkStart  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_PayloadContentLength/",
            "text": "primitive _PayloadContentLength\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PayloadContentLength\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PayloadContentLength\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PayloadContentLength"
        },
        {
            "location": "/net-http-_PayloadContentLength/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadContentLength/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_PayloadContentLength/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadContentLength/#fun-eq",
            "text": "fun box\n eq(that:  _PayloadContentLength  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_PayloadContentLength/#fun-ne",
            "text": "fun box\n ne(that:  _PayloadContentLength  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_PayloadError/",
            "text": "primitive _PayloadError\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PayloadError\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PayloadError\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PayloadError"
        },
        {
            "location": "/net-http-_PayloadError/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadError/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_PayloadError/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadError/#fun-eq",
            "text": "fun box\n eq(that:  _PayloadError  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_PayloadError/#fun-ne",
            "text": "fun box\n ne(that:  _PayloadError  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_PayloadHeaders/",
            "text": "primitive _PayloadHeaders\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PayloadHeaders\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PayloadHeaders\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PayloadHeaders"
        },
        {
            "location": "/net-http-_PayloadHeaders/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadHeaders/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_PayloadHeaders/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadHeaders/#fun-eq",
            "text": "fun box\n eq(that:  _PayloadHeaders  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_PayloadHeaders/#fun-ne",
            "text": "fun box\n ne(that:  _PayloadHeaders  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_PayloadReady/",
            "text": "primitive _PayloadReady\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PayloadReady\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PayloadReady\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PayloadReady"
        },
        {
            "location": "/net-http-_PayloadReady/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadReady/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_PayloadReady/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadReady/#fun-eq",
            "text": "fun box\n eq(that:  _PayloadReady  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_PayloadReady/#fun-ne",
            "text": "fun box\n ne(that:  _PayloadReady  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_PayloadRequest/",
            "text": "primitive _PayloadRequest\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PayloadRequest\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PayloadRequest\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PayloadRequest"
        },
        {
            "location": "/net-http-_PayloadRequest/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadRequest/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_PayloadRequest/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadRequest/#fun-eq",
            "text": "fun box\n eq(that:  _PayloadRequest  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_PayloadRequest/#fun-ne",
            "text": "fun box\n ne(that:  _PayloadRequest  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_PayloadResponse/",
            "text": "primitive _PayloadResponse\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PayloadResponse\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PayloadResponse\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _PayloadResponse"
        },
        {
            "location": "/net-http-_PayloadResponse/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_PayloadResponse/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_PayloadResponse/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_PayloadResponse/#fun-eq",
            "text": "fun box\n eq(that:  _PayloadResponse  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_PayloadResponse/#fun-ne",
            "text": "fun box\n ne(that:  _PayloadResponse  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_PayloadState/",
            "text": "type _PayloadState is (((((((((\n_PayloadRequest\n val | \n_PayloadResponse\n val) | \n_PayloadHeaders\n val) | \n_PayloadContentLength\n val) | \n_PayloadChunkStart\n val) | \n_PayloadChunk\n val) | \n_PayloadChunkEnd\n val) | \n_PayloadBody\n val) | \n_PayloadReady\n val) | \n_PayloadError\n val)\n\n\nIn package \"net/http\".\n\n\nPrivate.\n\n\nNo doc string provided.",
            "title": "type _PayloadState"
        },
        {
            "location": "/net-http-_RequestBuilder/",
            "text": "class _RequestBuilder is \nTCPConnectionNotify\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability ref.\n\n\nThis builds a request payload using received chunks of data.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(handler: \nRequestHandler\n val, logger: \nLogger\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun accepted()\n\n\nfun ref\n accepted(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nCreate a server connection to handle response ordering.\n\n\nfun auth_failed()\n\n\nfun ref\n auth_failed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun closed()\n\n\nfun ref\n closed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun connect_failed()\n\n\nfun ref\n connect_failed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun connected()\n\n\nfun ref\n connected(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun connecting()\n\n\nfun ref\n connecting(conn: \nTCPConnection\n ref, count: \nU32\n val): \nNone\n val\n\n\nPublic.\n\n\nfun received()\n\n\nfun ref\n received(conn: \nTCPConnection\n ref, data: \nArray\n[\nU8\n val] iso): \nNone\n val\n\n\nPublic.\n\n\nAssemble chunks of data into a request. When we have a whole request,\ndispatch it.\n\n\nfun sent()\n\n\nfun ref\n sent(conn: \nTCPConnection\n ref, data: \nByteSeq\n val): \nByteSeq\n val ?\n\n\nPublic, may raise an error.",
            "title": "class _RequestBuilder"
        },
        {
            "location": "/net-http-_RequestBuilder/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_RequestBuilder/#new-create",
            "text": "new create(handler:  RequestHandler  val, logger:  Logger  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_RequestBuilder/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_RequestBuilder/#fun-accepted",
            "text": "fun ref\n accepted(conn:  TCPConnection  ref):  None  val  Public.  Create a server connection to handle response ordering.",
            "title": "fun accepted()"
        },
        {
            "location": "/net-http-_RequestBuilder/#fun-auth_failed",
            "text": "fun ref\n auth_failed(conn:  TCPConnection  ref):  None  val  Public.",
            "title": "fun auth_failed()"
        },
        {
            "location": "/net-http-_RequestBuilder/#fun-closed",
            "text": "fun ref\n closed(conn:  TCPConnection  ref):  None  val  Public.",
            "title": "fun closed()"
        },
        {
            "location": "/net-http-_RequestBuilder/#fun-connect_failed",
            "text": "fun ref\n connect_failed(conn:  TCPConnection  ref):  None  val  Public.",
            "title": "fun connect_failed()"
        },
        {
            "location": "/net-http-_RequestBuilder/#fun-connected",
            "text": "fun ref\n connected(conn:  TCPConnection  ref):  None  val  Public.",
            "title": "fun connected()"
        },
        {
            "location": "/net-http-_RequestBuilder/#fun-connecting",
            "text": "fun ref\n connecting(conn:  TCPConnection  ref, count:  U32  val):  None  val  Public.",
            "title": "fun connecting()"
        },
        {
            "location": "/net-http-_RequestBuilder/#fun-received",
            "text": "fun ref\n received(conn:  TCPConnection  ref, data:  Array [ U8  val] iso):  None  val  Public.  Assemble chunks of data into a request. When we have a whole request,\ndispatch it.",
            "title": "fun received()"
        },
        {
            "location": "/net-http-_RequestBuilder/#fun-sent",
            "text": "fun ref\n sent(conn:  TCPConnection  ref, data:  ByteSeq  val):  ByteSeq  val ?  Public, may raise an error.",
            "title": "fun sent()"
        },
        {
            "location": "/net-http-RequestHandler/",
            "text": "interface RequestHandler\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nHandles requests. May dispatch based on the URL or other rules.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun val\n apply(request: \nPayload\n iso): \nAny\n tag\n\n\nPublic.\n\n\nEventually generates a response when handed a request.",
            "title": "interface RequestHandler"
        },
        {
            "location": "/net-http-RequestHandler/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-RequestHandler/#fun-apply",
            "text": "fun val\n apply(request:  Payload  iso):  Any  tag  Public.  Eventually generates a response when handed a request.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_ResponseBuilder/",
            "text": "class _ResponseBuilder is \nTCPConnectionNotify\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability ref.\n\n\nThis builds a response payload using received chunks of data.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(client: \n_ClientConnection\n tag)\n\n\nPublic.\n\n\nFunctions\n\n\nfun accepted()\n\n\nfun ref\n accepted(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun auth_failed()\n\n\nfun ref\n auth_failed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nSSL authentication failed. Tell the client not to proceed.\n\n\nfun closed()\n\n\nfun ref\n closed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nThe connection has closed, possibly prematurely.\n\n\nfun connect_failed()\n\n\nfun ref\n connect_failed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nThe connection could not be established. Tell the client not to proceed.\n\n\nfun connected()\n\n\nfun ref\n connected(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nTell the client we have connected.\n\n\nfun connecting()\n\n\nfun ref\n connecting(conn: \nTCPConnection\n ref, count: \nU32\n val): \nNone\n val\n\n\nPublic.\n\n\nfun _dispatch()\n\n\nfun ref\n _dispatch(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPrivate.\n\n\nDispatch responses if we have any.\n\n\nfun received()\n\n\nfun ref\n received(conn: \nTCPConnection\n ref, data: \nArray\n[\nU8\n val] iso): \nNone\n val\n\n\nPublic.\n\n\nAssemble chunks of data into a response. When we have a whole response,\ngive it to the client and start a new one.\n\n\nfun sent()\n\n\nfun ref\n sent(conn: \nTCPConnection\n ref, data: \nByteSeq\n val): \nByteSeq\n val ?\n\n\nPublic, may raise an error.",
            "title": "class _ResponseBuilder"
        },
        {
            "location": "/net-http-_ResponseBuilder/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_ResponseBuilder/#new-create",
            "text": "new create(client:  _ClientConnection  tag)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_ResponseBuilder/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_ResponseBuilder/#fun-accepted",
            "text": "fun ref\n accepted(conn:  TCPConnection  ref):  None  val  Public.",
            "title": "fun accepted()"
        },
        {
            "location": "/net-http-_ResponseBuilder/#fun-auth_failed",
            "text": "fun ref\n auth_failed(conn:  TCPConnection  ref):  None  val  Public.  SSL authentication failed. Tell the client not to proceed.",
            "title": "fun auth_failed()"
        },
        {
            "location": "/net-http-_ResponseBuilder/#fun-closed",
            "text": "fun ref\n closed(conn:  TCPConnection  ref):  None  val  Public.  The connection has closed, possibly prematurely.",
            "title": "fun closed()"
        },
        {
            "location": "/net-http-_ResponseBuilder/#fun-connect_failed",
            "text": "fun ref\n connect_failed(conn:  TCPConnection  ref):  None  val  Public.  The connection could not be established. Tell the client not to proceed.",
            "title": "fun connect_failed()"
        },
        {
            "location": "/net-http-_ResponseBuilder/#fun-connected",
            "text": "fun ref\n connected(conn:  TCPConnection  ref):  None  val  Public.  Tell the client we have connected.",
            "title": "fun connected()"
        },
        {
            "location": "/net-http-_ResponseBuilder/#fun-connecting",
            "text": "fun ref\n connecting(conn:  TCPConnection  ref, count:  U32  val):  None  val  Public.",
            "title": "fun connecting()"
        },
        {
            "location": "/net-http-_ResponseBuilder/#fun-_dispatch",
            "text": "fun ref\n _dispatch(conn:  TCPConnection  ref):  None  val  Private.  Dispatch responses if we have any.",
            "title": "fun _dispatch()"
        },
        {
            "location": "/net-http-_ResponseBuilder/#fun-received",
            "text": "fun ref\n received(conn:  TCPConnection  ref, data:  Array [ U8  val] iso):  None  val  Public.  Assemble chunks of data into a response. When we have a whole response,\ngive it to the client and start a new one.",
            "title": "fun received()"
        },
        {
            "location": "/net-http-_ResponseBuilder/#fun-sent",
            "text": "fun ref\n sent(conn:  TCPConnection  ref, data:  ByteSeq  val):  ByteSeq  val ?  Public, may raise an error.",
            "title": "fun sent()"
        },
        {
            "location": "/net-http-ResponseHandler/",
            "text": "interface ResponseHandler\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nHandles responses to HTTP requests.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun val\n apply(request: \nPayload\n val, response: \nPayload\n val): \nAny\n tag\n\n\nPublic.",
            "title": "interface ResponseHandler"
        },
        {
            "location": "/net-http-ResponseHandler/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-ResponseHandler/#fun-apply",
            "text": "fun val\n apply(request:  Payload  val, response:  Payload  val):  Any  tag  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-Server/",
            "text": "actor Server\n\n\nIn package \"net/http\".\n\n\nPublic, default capability tag.\n\n\nRuns an HTTP server. When routes are changed, the changes are only reflected\nfor new connections. Existing connections continue to use the old routes.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(notify: \nServerNotify\n iso, handler: \nRequestHandler\n val, optional logger: \nLogger\n val, optional host: \nString\n val, optional service: \nString\n val, optional limit: \nUSize\n val, optional sslctx: (\nSSLContext\n val | \nNone\n val))\n\n\nPublic.\n\n\nBehaviours\n\n\nbe _closed()\n\n\nbe _closed()\n\n\nPrivate.\n\n\nCalled when we stop listening.\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.\n\n\nShut down the server.\n\n\nbe _listening()\n\n\nbe _listening(address: \nIPAddress\n val)\n\n\nPrivate.\n\n\nCalled when we are listening.\n\n\nbe _not_listening()\n\n\nbe _not_listening()\n\n\nPrivate.\n\n\nCalled when we fail to listen.\n\n\nbe set_handler()\n\n\nbe set_handler(handler: \nRequestHandler\n val)\n\n\nPublic.\n\n\nReplace the request handler.\n\n\nbe set_logger()\n\n\nbe set_logger(logger: \nLogger\n val)\n\n\nPublic.\n\n\nReplace the logger.\n\n\nFunctions\n\n\nfun local_address()\n\n\nfun box\n local_address(): \nIPAddress\n val\n\n\nPublic.\n\n\nReturns the locally bound address.",
            "title": "actor Server"
        },
        {
            "location": "/net-http-Server/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-Server/#new-create",
            "text": "new create(notify:  ServerNotify  iso, handler:  RequestHandler  val, optional logger:  Logger  val, optional host:  String  val, optional service:  String  val, optional limit:  USize  val, optional sslctx: ( SSLContext  val |  None  val))  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-Server/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/net-http-Server/#be-_closed",
            "text": "be _closed()  Private.  Called when we stop listening.",
            "title": "be _closed()"
        },
        {
            "location": "/net-http-Server/#be-dispose",
            "text": "be dispose()  Public.  Shut down the server.",
            "title": "be dispose()"
        },
        {
            "location": "/net-http-Server/#be-_listening",
            "text": "be _listening(address:  IPAddress  val)  Private.  Called when we are listening.",
            "title": "be _listening()"
        },
        {
            "location": "/net-http-Server/#be-_not_listening",
            "text": "be _not_listening()  Private.  Called when we fail to listen.",
            "title": "be _not_listening()"
        },
        {
            "location": "/net-http-Server/#be-set_handler",
            "text": "be set_handler(handler:  RequestHandler  val)  Public.  Replace the request handler.",
            "title": "be set_handler()"
        },
        {
            "location": "/net-http-Server/#be-set_logger",
            "text": "be set_logger(logger:  Logger  val)  Public.  Replace the logger.",
            "title": "be set_logger()"
        },
        {
            "location": "/net-http-Server/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-Server/#fun-local_address",
            "text": "fun box\n local_address():  IPAddress  val  Public.  Returns the locally bound address.",
            "title": "fun local_address()"
        },
        {
            "location": "/net-http-_ServerConnection/",
            "text": "actor _ServerConnection\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability tag.\n\n\nManages a stream of requests to a server, ordering the responses.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(handler: \nRequestHandler\n val, logger: \nLogger\n val, conn: \nTCPConnection\n tag, client_ip: \nString\n val)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe answer()\n\n\nbe answer(request: \nPayload\n val, response: \nPayload\n val)\n\n\nPublic.\n\n\nAssociate a response with the given request and send responses in the\ncorrect order.\n\n\nbe dispatch()\n\n\nbe dispatch(request: \nPayload\n iso)\n\n\nPublic.\n\n\nDispatch requests. We can have many safe requests dispatched at once, or a\nsingle unsafe request, since the client may expect an initial unsafe\nrequest to alter the answer to following requests.\n\n\nFunctions\n\n\nfun _dispatch_pending()\n\n\nfun ref\n _dispatch_pending(): \nNone\n val\n\n\nPrivate.\n\n\nIf we have pending requests, dispatch as many as we can.\n\n\nfun is_safe()\n\n\nfun box\n is_safe(method: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nReturn true for a safe request method, false otherwise.\n\n\nfun _send()\n\n\nfun ref\n _send(request: \nPayload\n val, response: \nPayload\n val): \nNone\n val\n\n\nPrivate.\n\n\nSend a single response.\n\n\nfun _send_responses()\n\n\nfun ref\n _send_responses(): \nNone\n val\n\n\nPrivate.\n\n\nSend available responses in the correct order.",
            "title": "actor _ServerConnection"
        },
        {
            "location": "/net-http-_ServerConnection/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_ServerConnection/#new-create",
            "text": "new create(handler:  RequestHandler  val, logger:  Logger  val, conn:  TCPConnection  tag, client_ip:  String  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_ServerConnection/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/net-http-_ServerConnection/#be-answer",
            "text": "be answer(request:  Payload  val, response:  Payload  val)  Public.  Associate a response with the given request and send responses in the\ncorrect order.",
            "title": "be answer()"
        },
        {
            "location": "/net-http-_ServerConnection/#be-dispatch",
            "text": "be dispatch(request:  Payload  iso)  Public.  Dispatch requests. We can have many safe requests dispatched at once, or a\nsingle unsafe request, since the client may expect an initial unsafe\nrequest to alter the answer to following requests.",
            "title": "be dispatch()"
        },
        {
            "location": "/net-http-_ServerConnection/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_ServerConnection/#fun-_dispatch_pending",
            "text": "fun ref\n _dispatch_pending():  None  val  Private.  If we have pending requests, dispatch as many as we can.",
            "title": "fun _dispatch_pending()"
        },
        {
            "location": "/net-http-_ServerConnection/#fun-is_safe",
            "text": "fun box\n is_safe(method:  String  val):  Bool  val  Public.  Return true for a safe request method, false otherwise.",
            "title": "fun is_safe()"
        },
        {
            "location": "/net-http-_ServerConnection/#fun-_send",
            "text": "fun ref\n _send(request:  Payload  val, response:  Payload  val):  None  val  Private.  Send a single response.",
            "title": "fun _send()"
        },
        {
            "location": "/net-http-_ServerConnection/#fun-_send_responses",
            "text": "fun ref\n _send_responses():  None  val  Private.  Send available responses in the correct order.",
            "title": "fun _send_responses()"
        },
        {
            "location": "/net-http-_ServerListener/",
            "text": "class _ServerListener is \nTCPListenNotify\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability ref.\n\n\nManages the listening socket for an HTTP server.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(server: \nServer\n tag, sslctx: (\nSSLContext\n val | \nNone\n val), handler: \nRequestHandler\n val, logger: \nLogger\n val)\n\n\nPublic.\n\n\nCreates a new listening socket manager.\n\n\nFunctions\n\n\nfun closed()\n\n\nfun ref\n closed(listen: \nTCPListener\n ref): \nNone\n val\n\n\nPublic.\n\n\nInform the server we have stopped listening.\n\n\nfun connected()\n\n\nfun ref\n connected(listen: \nTCPListener\n ref): \nTCPConnectionNotify\n iso^\n\n\nPublic.\n\n\nCreate a notifier for a specific HTTP socket.\n\n\nfun listening()\n\n\nfun ref\n listening(listen: \nTCPListener\n ref): \nNone\n val\n\n\nPublic.\n\n\nInform the server of the bound IP address.\n\n\nfun not_listening()\n\n\nfun ref\n not_listening(listen: \nTCPListener\n ref): \nNone\n val\n\n\nPublic.\n\n\nInform the server we failed to listen.",
            "title": "class _ServerListener"
        },
        {
            "location": "/net-http-_ServerListener/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_ServerListener/#new-create",
            "text": "new create(server:  Server  tag, sslctx: ( SSLContext  val |  None  val), handler:  RequestHandler  val, logger:  Logger  val)  Public.  Creates a new listening socket manager.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_ServerListener/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_ServerListener/#fun-closed",
            "text": "fun ref\n closed(listen:  TCPListener  ref):  None  val  Public.  Inform the server we have stopped listening.",
            "title": "fun closed()"
        },
        {
            "location": "/net-http-_ServerListener/#fun-connected",
            "text": "fun ref\n connected(listen:  TCPListener  ref):  TCPConnectionNotify  iso^  Public.  Create a notifier for a specific HTTP socket.",
            "title": "fun connected()"
        },
        {
            "location": "/net-http-_ServerListener/#fun-listening",
            "text": "fun ref\n listening(listen:  TCPListener  ref):  None  val  Public.  Inform the server of the bound IP address.",
            "title": "fun listening()"
        },
        {
            "location": "/net-http-_ServerListener/#fun-not_listening",
            "text": "fun ref\n not_listening(listen:  TCPListener  ref):  None  val  Public.  Inform the server we failed to listen.",
            "title": "fun not_listening()"
        },
        {
            "location": "/net-http-ServerNotify/",
            "text": "interface ServerNotify\n\n\nIn package \"net/http\".\n\n\nPublic, default capability ref.\n\n\nNotifications for HTTP servers.\n\n\nFunctions\n\n\nfun closed()\n\n\nfun ref\n closed(server: \nServer\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when we stop listening.\n\n\nfun listening()\n\n\nfun ref\n listening(server: \nServer\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when we are listening.\n\n\nfun not_listening()\n\n\nfun ref\n not_listening(server: \nServer\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled when we fail to listen.",
            "title": "interface ServerNotify"
        },
        {
            "location": "/net-http-ServerNotify/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-ServerNotify/#fun-closed",
            "text": "fun ref\n closed(server:  Server  ref):  None  val  Public.  Called when we stop listening.",
            "title": "fun closed()"
        },
        {
            "location": "/net-http-ServerNotify/#fun-listening",
            "text": "fun ref\n listening(server:  Server  ref):  None  val  Public.  Called when we are listening.",
            "title": "fun listening()"
        },
        {
            "location": "/net-http-ServerNotify/#fun-not_listening",
            "text": "fun ref\n not_listening(server:  Server  ref):  None  val  Public.  Called when we fail to listen.",
            "title": "fun not_listening()"
        },
        {
            "location": "/net-http-_Test/",
            "text": "primitive _Test\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val, url: \nURL\n val, scheme: \nString\n val, user: \nString\n val, password: \nString\n val, host: \nString\n val, port: \nU16\n val, path: \nString\n val, query: \nString\n val, fragment: \nString\n val): \nNone\n val\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_Test\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_Test\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _Test"
        },
        {
            "location": "/net-http-_Test/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_Test/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_Test/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_Test/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val, url:  URL  val, scheme:  String  val, user:  String  val, password:  String  val, host:  String  val, port:  U16  val, path:  String  val, query:  String  val, fragment:  String  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_Test/#fun-eq",
            "text": "fun box\n eq(that:  _Test  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-_Test/#fun-ne",
            "text": "fun box\n ne(that:  _Test  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_ToStringFun/",
            "text": "class _ToStringFun is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _ToStringFun"
        },
        {
            "location": "/net-http-_ToStringFun/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_ToStringFun/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_ToStringFun/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_ToStringFun/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_ToStringFun/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_ToStringFun/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_ToStringFun/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_ToStringFun/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-http-URL/",
            "text": "class URL\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nHolds the components of a URL. These are always stored as valid, URL-encoded\nvalues.\n\n\nPublic fields\n\n\n\n\nvar fragment: \nString\n val\n\n\nvar host: \nString\n val\n\n\nvar password: \nString\n val\n\n\nvar path: \nString\n val\n\n\nvar port: \nU16\n val\n\n\nvar query: \nString\n val\n\n\nvar scheme: \nString\n val\n\n\nvar user: \nString\n val\n\n\n\n\nConstructors\n\n\nnew build()\n\n\nnew build(from: \nString\n val, optional percent_encoded: \nBool\n val) ?\n\n\nPublic, may raise an error.\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nnew valid()\n\n\nnew valid(from: \nString\n val) ?\n\n\nPublic, may raise an error.\n\n\nFunctions\n\n\nfun default_port()\n\n\nfun box\n default_port(): \nU16\n val\n\n\nPublic.\n\n\nReport the default port for our scheme.\nReturns 0 for unrecognised schemes.\n\n\nfun is_valid()\n\n\nfun box\n is_valid(): \nBool\n val\n\n\nPublic.\n\n\nReturn true if all elements are correctly URL encoded.\n\n\nfun join()\n\n\nfun val\n join(that: \nURL\n val): \nURL\n val\n\n\nPublic.\n\n\nUsing this as a base URL, concatenate with another, possibly relative, URL\nin the same way a browser does for a link.\n\n\nfun _parse()\n\n\nfun ref\n _parse(from: \nString\n val): \nNone\n val ?\n\n\nPrivate, may raise an error.\n\n\nParse the given string as a URL.\nRaises an error on invalid port number.\n\n\nfun _parse_hostport()\n\n\nfun box\n _parse_hostport(hostport: \nString\n val): (\nString\n val , \nString\n val)\n\n\nPrivate.\n\n\nSplit the given \"host and port\" string into the host and port parts.\n\n\nfun _parse_part()\n\n\nfun box\n _parse_part(from: \nString\n val, prefix: \nString\n val, terminators: \nString\n val, offset: \nISize\n val): (\nISize\n val , \nString\n val)\n\n\nPrivate.\n\n\nAttempt to parse the specified part out of the given string.\nOnly attempt the parse if the given prefix is found first. Pass \"\" if no\nprefix is needed.\nThe part ends when any one of the given terminator characters is found, or\nthe end of the input is reached.\nThe offset of the terminator is returned, if one is found.\n\n\nfun _parse_scheme()\n\n\nfun box\n _parse_scheme(from: \nString\n val): (\nISize\n val , \nString\n val)\n\n\nPrivate.\n\n\nFind the scheme, if any, at the start of the given string.\nThe offset of the part following the scheme is returned.\n\n\nfun _split()\n\n\nfun box\n _split(src: \nString\n val, separator: \nU8\n val): (\nString\n val , \nString\n val)\n\n\nPrivate.\n\n\nSplit the given string in 2 around the first instance of the specified\nseparator.\nIf the string does not contain the separator then the first resulting\nstring is the whole src and the second is empty.\n\n\nfun string()\n\n\nfun box\n string(optional fmt: \nFormatDefault\n val, optional prefix: \nPrefixDefault\n val, optional prec: \nUSize\n val, optional width: \nUSize\n val, optional align: ((\nAlignLeft\n val | \nAlignRight\n val) | \nAlignCenter\n val), optional fill: \nU32\n val): \nString\n iso^\n\n\nPublic.\n\n\nCombine the components into a string.",
            "title": "class URL"
        },
        {
            "location": "/net-http-URL/#public-fields",
            "text": "var fragment:  String  val  var host:  String  val  var password:  String  val  var path:  String  val  var port:  U16  val  var query:  String  val  var scheme:  String  val  var user:  String  val",
            "title": "Public fields"
        },
        {
            "location": "/net-http-URL/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-URL/#new-build",
            "text": "new build(from:  String  val, optional percent_encoded:  Bool  val) ?  Public, may raise an error.",
            "title": "new build()"
        },
        {
            "location": "/net-http-URL/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-URL/#new-valid",
            "text": "new valid(from:  String  val) ?  Public, may raise an error.",
            "title": "new valid()"
        },
        {
            "location": "/net-http-URL/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-URL/#fun-default_port",
            "text": "fun box\n default_port():  U16  val  Public.  Report the default port for our scheme.\nReturns 0 for unrecognised schemes.",
            "title": "fun default_port()"
        },
        {
            "location": "/net-http-URL/#fun-is_valid",
            "text": "fun box\n is_valid():  Bool  val  Public.  Return true if all elements are correctly URL encoded.",
            "title": "fun is_valid()"
        },
        {
            "location": "/net-http-URL/#fun-join",
            "text": "fun val\n join(that:  URL  val):  URL  val  Public.  Using this as a base URL, concatenate with another, possibly relative, URL\nin the same way a browser does for a link.",
            "title": "fun join()"
        },
        {
            "location": "/net-http-URL/#fun-_parse",
            "text": "fun ref\n _parse(from:  String  val):  None  val ?  Private, may raise an error.  Parse the given string as a URL.\nRaises an error on invalid port number.",
            "title": "fun _parse()"
        },
        {
            "location": "/net-http-URL/#fun-_parse_hostport",
            "text": "fun box\n _parse_hostport(hostport:  String  val): ( String  val ,  String  val)  Private.  Split the given \"host and port\" string into the host and port parts.",
            "title": "fun _parse_hostport()"
        },
        {
            "location": "/net-http-URL/#fun-_parse_part",
            "text": "fun box\n _parse_part(from:  String  val, prefix:  String  val, terminators:  String  val, offset:  ISize  val): ( ISize  val ,  String  val)  Private.  Attempt to parse the specified part out of the given string.\nOnly attempt the parse if the given prefix is found first. Pass \"\" if no\nprefix is needed.\nThe part ends when any one of the given terminator characters is found, or\nthe end of the input is reached.\nThe offset of the terminator is returned, if one is found.",
            "title": "fun _parse_part()"
        },
        {
            "location": "/net-http-URL/#fun-_parse_scheme",
            "text": "fun box\n _parse_scheme(from:  String  val): ( ISize  val ,  String  val)  Private.  Find the scheme, if any, at the start of the given string.\nThe offset of the part following the scheme is returned.",
            "title": "fun _parse_scheme()"
        },
        {
            "location": "/net-http-URL/#fun-_split",
            "text": "fun box\n _split(src:  String  val, separator:  U8  val): ( String  val ,  String  val)  Private.  Split the given string in 2 around the first instance of the specified\nseparator.\nIf the string does not contain the separator then the first resulting\nstring is the whole src and the second is empty.",
            "title": "fun _split()"
        },
        {
            "location": "/net-http-URL/#fun-string",
            "text": "fun box\n string(optional fmt:  FormatDefault  val, optional prefix:  PrefixDefault  val, optional prec:  USize  val, optional width:  USize  val, optional align: (( AlignLeft  val |  AlignRight  val) |  AlignCenter  val), optional fill:  U32  val):  String  iso^  Public.  Combine the components into a string.",
            "title": "fun string()"
        },
        {
            "location": "/net-http-URLEncode/",
            "text": "primitive URLEncode\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nFunctions for checking, encoding, and decoding parts of URLs.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun check()\n\n\nfun box\n check(from: \nString\n val, part: (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val)): \nBool\n val\n\n\nPublic.\n\n\nCheck that the given string is valid to be the given URL part without\nfurther encoding.\nCanonical form is not checked for, merely validity.\n\n\nfun check_scheme()\n\n\nfun box\n check_scheme(scheme: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nCheck that the given string is a valid scheme.\n\n\nfun decode()\n\n\nfun box\n decode(from: \nString\n val): \nString\n val ?\n\n\nPublic, may raise an error.\n\n\nURL decode a string. Raise an error on invalid URL encoded.\n\n\nfun encode()\n\n\nfun box\n encode(from: \nString\n val, part: (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val), optional percent_encoded: \nBool\n val): \nString\n val ?\n\n\nPublic, may raise an error.\n\n\nURL encode and normilase the given string.\nThe percent_encoded parameter indicates how '%' characters should be\ninterpretted.\ntrue =\n given string is already at least partially encoded, so '%'s\n  indicate an encoded character.\nfalse =\n given string is not yet encoded at all, so '%'s are just '%'s.\nAn error is raised on invalid existing encoding or illegal characters that\ncannot be encoded.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nURLEncode\n val): \nBool\n val\n\n\nPublic.\n\n\nfun _hex()\n\n\nfun box\n _hex(value: \nU8\n val): \nU8\n val ?\n\n\nPrivate, may raise an error.\n\n\nTurn 4 bits into a hex value.\n\n\nfun _is_char_legal()\n\n\nfun box\n _is_char_legal(value: \nU8\n val, part: (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val)): \nBool\n val\n\n\nPrivate.\n\n\nDetermine whether the given character is legal to appear in the specified\nURL part.\n\n\nfun _is_host_ipv6()\n\n\nfun box\n _is_host_ipv6(host: \nString\n val, part: (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val)): \nBool\n val ?\n\n\nPrivate, may raise an error.\n\n\nCheck whether the given string is a valid IPv6 format host.\nReturns:\n  true if string is a valid IPv6 format host.\n  false if string is not an IPv6 foramt host at all.\n  Raises an error if string is an invalid IPv6 format host.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nURLEncode\n val): \nBool\n val\n\n\nPublic.\n\n\nfun _normal_decode()\n\n\nfun box\n _normal_decode(value: \nU8\n val, part: (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val)): \nBool\n val\n\n\nPrivate.\n\n\nDetermine whether the given character should be decoded to give normal\nform.\nSome characters, such as sub-delims, are valid to have either in encoded or\nunencoded form. These should be left as they are when normalising. This\nwill return false for such characters.\n\n\nfun _unhex()\n\n\nfun box\n _unhex(value: \nU8\n val): \nU8\n val ?\n\n\nPrivate, may raise an error.\n\n\nTurn a hex value into 4 bits.",
            "title": "primitive URLEncode"
        },
        {
            "location": "/net-http-URLEncode/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-URLEncode/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-URLEncode/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-URLEncode/#fun-check",
            "text": "fun box\n check(from:  String  val, part: ((((( URLPartUser  val |  URLPartPassword  val) |  URLPartHost  val) |  URLPartPath  val) |  URLPartQuery  val) |  URLPartFragment  val)):  Bool  val  Public.  Check that the given string is valid to be the given URL part without\nfurther encoding.\nCanonical form is not checked for, merely validity.",
            "title": "fun check()"
        },
        {
            "location": "/net-http-URLEncode/#fun-check_scheme",
            "text": "fun box\n check_scheme(scheme:  String  val):  Bool  val  Public.  Check that the given string is a valid scheme.",
            "title": "fun check_scheme()"
        },
        {
            "location": "/net-http-URLEncode/#fun-decode",
            "text": "fun box\n decode(from:  String  val):  String  val ?  Public, may raise an error.  URL decode a string. Raise an error on invalid URL encoded.",
            "title": "fun decode()"
        },
        {
            "location": "/net-http-URLEncode/#fun-encode",
            "text": "fun box\n encode(from:  String  val, part: ((((( URLPartUser  val |  URLPartPassword  val) |  URLPartHost  val) |  URLPartPath  val) |  URLPartQuery  val) |  URLPartFragment  val), optional percent_encoded:  Bool  val):  String  val ?  Public, may raise an error.  URL encode and normilase the given string.\nThe percent_encoded parameter indicates how '%' characters should be\ninterpretted.\ntrue =  given string is already at least partially encoded, so '%'s\n  indicate an encoded character.\nfalse =  given string is not yet encoded at all, so '%'s are just '%'s.\nAn error is raised on invalid existing encoding or illegal characters that\ncannot be encoded.",
            "title": "fun encode()"
        },
        {
            "location": "/net-http-URLEncode/#fun-eq",
            "text": "fun box\n eq(that:  URLEncode  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-URLEncode/#fun-_hex",
            "text": "fun box\n _hex(value:  U8  val):  U8  val ?  Private, may raise an error.  Turn 4 bits into a hex value.",
            "title": "fun _hex()"
        },
        {
            "location": "/net-http-URLEncode/#fun-_is_char_legal",
            "text": "fun box\n _is_char_legal(value:  U8  val, part: ((((( URLPartUser  val |  URLPartPassword  val) |  URLPartHost  val) |  URLPartPath  val) |  URLPartQuery  val) |  URLPartFragment  val)):  Bool  val  Private.  Determine whether the given character is legal to appear in the specified\nURL part.",
            "title": "fun _is_char_legal()"
        },
        {
            "location": "/net-http-URLEncode/#fun-_is_host_ipv6",
            "text": "fun box\n _is_host_ipv6(host:  String  val, part: ((((( URLPartUser  val |  URLPartPassword  val) |  URLPartHost  val) |  URLPartPath  val) |  URLPartQuery  val) |  URLPartFragment  val)):  Bool  val ?  Private, may raise an error.  Check whether the given string is a valid IPv6 format host.\nReturns:\n  true if string is a valid IPv6 format host.\n  false if string is not an IPv6 foramt host at all.\n  Raises an error if string is an invalid IPv6 format host.",
            "title": "fun _is_host_ipv6()"
        },
        {
            "location": "/net-http-URLEncode/#fun-ne",
            "text": "fun box\n ne(that:  URLEncode  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-URLEncode/#fun-_normal_decode",
            "text": "fun box\n _normal_decode(value:  U8  val, part: ((((( URLPartUser  val |  URLPartPassword  val) |  URLPartHost  val) |  URLPartPath  val) |  URLPartQuery  val) |  URLPartFragment  val)):  Bool  val  Private.  Determine whether the given character should be decoded to give normal\nform.\nSome characters, such as sub-delims, are valid to have either in encoded or\nunencoded form. These should be left as they are when normalising. This\nwill return false for such characters.",
            "title": "fun _normal_decode()"
        },
        {
            "location": "/net-http-URLEncode/#fun-_unhex",
            "text": "fun box\n _unhex(value:  U8  val):  U8  val ?  Private, may raise an error.  Turn a hex value into 4 bits.",
            "title": "fun _unhex()"
        },
        {
            "location": "/net-http-URLPart/",
            "text": "type URLPart is (((((\nURLPartUser\n val | \nURLPartPassword\n val) | \nURLPartHost\n val) | \nURLPartPath\n val) | \nURLPartQuery\n val) | \nURLPartFragment\n val)\n\n\nIn package \"net/http\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type URLPart"
        },
        {
            "location": "/net-http-URLPartFragment/",
            "text": "primitive URLPartFragment\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nURLPartFragment\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nURLPartFragment\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive URLPartFragment"
        },
        {
            "location": "/net-http-URLPartFragment/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-URLPartFragment/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-URLPartFragment/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-URLPartFragment/#fun-eq",
            "text": "fun box\n eq(that:  URLPartFragment  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-URLPartFragment/#fun-ne",
            "text": "fun box\n ne(that:  URLPartFragment  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-URLPartHost/",
            "text": "primitive URLPartHost\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nURLPartHost\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nURLPartHost\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive URLPartHost"
        },
        {
            "location": "/net-http-URLPartHost/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-URLPartHost/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-URLPartHost/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-URLPartHost/#fun-eq",
            "text": "fun box\n eq(that:  URLPartHost  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-URLPartHost/#fun-ne",
            "text": "fun box\n ne(that:  URLPartHost  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-URLPartPassword/",
            "text": "primitive URLPartPassword\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nURLPartPassword\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nURLPartPassword\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive URLPartPassword"
        },
        {
            "location": "/net-http-URLPartPassword/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-URLPartPassword/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-URLPartPassword/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-URLPartPassword/#fun-eq",
            "text": "fun box\n eq(that:  URLPartPassword  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-URLPartPassword/#fun-ne",
            "text": "fun box\n ne(that:  URLPartPassword  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-URLPartPath/",
            "text": "primitive URLPartPath\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nURLPartPath\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nURLPartPath\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive URLPartPath"
        },
        {
            "location": "/net-http-URLPartPath/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-URLPartPath/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-URLPartPath/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-URLPartPath/#fun-eq",
            "text": "fun box\n eq(that:  URLPartPath  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-URLPartPath/#fun-ne",
            "text": "fun box\n ne(that:  URLPartPath  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-URLPartQuery/",
            "text": "primitive URLPartQuery\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nURLPartQuery\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nURLPartQuery\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive URLPartQuery"
        },
        {
            "location": "/net-http-URLPartQuery/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-URLPartQuery/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-URLPartQuery/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-URLPartQuery/#fun-eq",
            "text": "fun box\n eq(that:  URLPartQuery  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-URLPartQuery/#fun-ne",
            "text": "fun box\n ne(that:  URLPartQuery  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-URLPartUser/",
            "text": "primitive URLPartUser\n\n\nIn package \"net/http\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nURLPartUser\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nURLPartUser\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive URLPartUser"
        },
        {
            "location": "/net-http-URLPartUser/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-URLPartUser/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-URLPartUser/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-URLPartUser/#fun-eq",
            "text": "fun box\n eq(that:  URLPartUser  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-http-URLPartUser/#fun-ne",
            "text": "fun box\n ne(that:  URLPartUser  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-http-_Valid/",
            "text": "class _Valid is \nUnitTest\n ref\n\n\nIn package \"net/http\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _Valid"
        },
        {
            "location": "/net-http-_Valid/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-http-_Valid/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-http-_Valid/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-http-_Valid/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/net-http-_Valid/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/net-http-_Valid/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/net-http-_Valid/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/net-http-_Valid/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/net-ssl--index/",
            "text": "No package doc string provided for net/ssl.",
            "title": "Package"
        },
        {
            "location": "/net-ssl-_BIO/",
            "text": "primitive _BIO\n\n\nIn package \"net/ssl\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_BIO\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_BIO\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _BIO"
        },
        {
            "location": "/net-ssl-_BIO/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-_BIO/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-_BIO/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-_BIO/#fun-eq",
            "text": "fun box\n eq(that:  _BIO  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-_BIO/#fun-ne",
            "text": "fun box\n ne(that:  _BIO  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-_GeneralName/",
            "text": "primitive _GeneralName\n\n\nIn package \"net/ssl\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_GeneralName\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_GeneralName\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _GeneralName"
        },
        {
            "location": "/net-ssl-_GeneralName/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-_GeneralName/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-_GeneralName/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-_GeneralName/#fun-eq",
            "text": "fun box\n eq(that:  _GeneralName  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-_GeneralName/#fun-ne",
            "text": "fun box\n ne(that:  _GeneralName  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-_GeneralNameStack/",
            "text": "primitive _GeneralNameStack\n\n\nIn package \"net/ssl\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_GeneralNameStack\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_GeneralNameStack\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _GeneralNameStack"
        },
        {
            "location": "/net-ssl-_GeneralNameStack/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-_GeneralNameStack/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-_GeneralNameStack/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-_GeneralNameStack/#fun-eq",
            "text": "fun box\n eq(that:  _GeneralNameStack  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-_GeneralNameStack/#fun-ne",
            "text": "fun box\n ne(that:  _GeneralNameStack  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-_SSL/",
            "text": "primitive _SSL\n\n\nIn package \"net/ssl\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_SSL\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_SSL\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _SSL"
        },
        {
            "location": "/net-ssl-_SSL/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-_SSL/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-_SSL/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-_SSL/#fun-eq",
            "text": "fun box\n eq(that:  _SSL  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-_SSL/#fun-ne",
            "text": "fun box\n ne(that:  _SSL  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-SSL/",
            "text": "class SSL\n\n\nIn package \"net/ssl\".\n\n\nPublic, default capability ref.\n\n\nAn SSL session manages handshakes, encryption and decryption. It is not tied\nto any transport layer.\n\n\nConstructors\n\n\nnew _create()\n\n\nnew _create(ctx: \nPointer\n[\n_SSLContext\n val] tag, server: \nBool\n val, verify: \nBool\n val, optional hostname: \nString\n val) ?\n\n\nPrivate, may raise an error.\n\n\nFunctions\n\n\nfun dispose()\n\n\nfun ref\n dispose(): \nNone\n val\n\n\nPublic.\n\n\nDispose of the session.\n\n\nfun _final()\n\n\nfun box\n _final(): \nNone\n val\n\n\nPrivate.\n\n\nDispose of the session.\n\n\nfun read()\n\n\nfun ref\n read(): \nArray\n[\nU8\n val] iso^ ?\n\n\nPublic, may raise an error.\n\n\nReturns unencrypted bytes to be passed to the application. Raises an error\nif no data is available.\n\n\nfun receive()\n\n\nfun ref\n receive(data: \nByteSeq\n val): \nNone\n val\n\n\nPublic.\n\n\nWhen data is received, add it to the SSL session.\n\n\nfun send()\n\n\nfun ref\n send(): \nArray\n[\nU8\n val] val ?\n\n\nPublic, may raise an error.\n\n\nReturns encrypted bytes to be passed to the destination. Raises an error\nif no data is available.\n\n\nfun state()\n\n\nfun box\n state(): (((\nSSLHandshake\n val | \nSSLAuthFail\n val) | \nSSLReady\n val) | \nSSLError\n val)\n\n\nPublic.\n\n\nReturns the SSL session state.\n\n\nfun _verify_hostname()\n\n\nfun ref\n _verify_hostname(): \nNone\n val\n\n\nPrivate.\n\n\nVerify that the certificate is valid for the given hostname.\n\n\nfun write()\n\n\nfun ref\n write(data: \nByteSeq\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nWhen application data is sent, add it to the SSL session. Raises an error\nif the handshake is not complete.",
            "title": "class SSL"
        },
        {
            "location": "/net-ssl-SSL/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSL/#new-_create",
            "text": "new _create(ctx:  Pointer [ _SSLContext  val] tag, server:  Bool  val, verify:  Bool  val, optional hostname:  String  val) ?  Private, may raise an error.",
            "title": "new _create()"
        },
        {
            "location": "/net-ssl-SSL/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-SSL/#fun-dispose",
            "text": "fun ref\n dispose():  None  val  Public.  Dispose of the session.",
            "title": "fun dispose()"
        },
        {
            "location": "/net-ssl-SSL/#fun-_final",
            "text": "fun box\n _final():  None  val  Private.  Dispose of the session.",
            "title": "fun _final()"
        },
        {
            "location": "/net-ssl-SSL/#fun-read",
            "text": "fun ref\n read():  Array [ U8  val] iso^ ?  Public, may raise an error.  Returns unencrypted bytes to be passed to the application. Raises an error\nif no data is available.",
            "title": "fun read()"
        },
        {
            "location": "/net-ssl-SSL/#fun-receive",
            "text": "fun ref\n receive(data:  ByteSeq  val):  None  val  Public.  When data is received, add it to the SSL session.",
            "title": "fun receive()"
        },
        {
            "location": "/net-ssl-SSL/#fun-send",
            "text": "fun ref\n send():  Array [ U8  val] val ?  Public, may raise an error.  Returns encrypted bytes to be passed to the destination. Raises an error\nif no data is available.",
            "title": "fun send()"
        },
        {
            "location": "/net-ssl-SSL/#fun-state",
            "text": "fun box\n state(): ((( SSLHandshake  val |  SSLAuthFail  val) |  SSLReady  val) |  SSLError  val)  Public.  Returns the SSL session state.",
            "title": "fun state()"
        },
        {
            "location": "/net-ssl-SSL/#fun-_verify_hostname",
            "text": "fun ref\n _verify_hostname():  None  val  Private.  Verify that the certificate is valid for the given hostname.",
            "title": "fun _verify_hostname()"
        },
        {
            "location": "/net-ssl-SSL/#fun-write",
            "text": "fun ref\n write(data:  ByteSeq  val):  None  val ?  Public, may raise an error.  When application data is sent, add it to the SSL session. Raises an error\nif the handshake is not complete.",
            "title": "fun write()"
        },
        {
            "location": "/net-ssl-SSLAuthFail/",
            "text": "primitive SSLAuthFail\n\n\nIn package \"net/ssl\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nSSLAuthFail\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nSSLAuthFail\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive SSLAuthFail"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#fun-eq",
            "text": "fun box\n eq(that:  SSLAuthFail  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-SSLAuthFail/#fun-ne",
            "text": "fun box\n ne(that:  SSLAuthFail  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-SSLConnection/",
            "text": "class SSLConnection is \nTCPConnectionNotify\n ref\n\n\nIn package \"net/ssl\".\n\n\nPublic, default capability ref.\n\n\nWrap another protocol in an SSL connection.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(notify: \nTCPConnectionNotify\n iso, ssl: \nSSL\n iso)\n\n\nPublic.\n\n\nFunctions\n\n\nfun accepted()\n\n\nfun ref\n accepted(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nForward to the wrapped protocol.\n\n\nfun auth_failed()\n\n\nfun ref\n auth_failed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nfun closed()\n\n\nfun ref\n closed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nForward to the wrapped protocol.\n\n\nfun connect_failed()\n\n\nfun ref\n connect_failed(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nForward to the wrapped protocol.\n\n\nfun connected()\n\n\nfun ref\n connected(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPublic.\n\n\nSwallow this event until the handshake is complete.\n\n\nfun connecting()\n\n\nfun ref\n connecting(conn: \nTCPConnection\n ref, count: \nU32\n val): \nNone\n val\n\n\nPublic.\n\n\nForward to the wrapped protocol.\n\n\nfun _poll()\n\n\nfun ref\n _poll(conn: \nTCPConnection\n ref): \nNone\n val\n\n\nPrivate.\n\n\nChecks for both new application data and new destination data. Informs the\nwrapped protocol that is has connected when the handshake is complete.\n\n\nfun received()\n\n\nfun ref\n received(conn: \nTCPConnection\n ref, data: \nArray\n[\nU8\n val] iso): \nNone\n val\n\n\nPublic.\n\n\nPass the data to the SSL session and check for both new application data\nand new destination data.\n\n\nfun sent()\n\n\nfun ref\n sent(conn: \nTCPConnection\n ref, data: \nByteSeq\n val): \nByteSeq\n val ?\n\n\nPublic, may raise an error.\n\n\nPass the data to the SSL session and check for both new application data\nand new destination data.",
            "title": "class SSLConnection"
        },
        {
            "location": "/net-ssl-SSLConnection/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLConnection/#new-create",
            "text": "new create(notify:  TCPConnectionNotify  iso, ssl:  SSL  iso)  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-SSLConnection/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-SSLConnection/#fun-accepted",
            "text": "fun ref\n accepted(conn:  TCPConnection  ref):  None  val  Public.  Forward to the wrapped protocol.",
            "title": "fun accepted()"
        },
        {
            "location": "/net-ssl-SSLConnection/#fun-auth_failed",
            "text": "fun ref\n auth_failed(conn:  TCPConnection  ref):  None  val  Public.",
            "title": "fun auth_failed()"
        },
        {
            "location": "/net-ssl-SSLConnection/#fun-closed",
            "text": "fun ref\n closed(conn:  TCPConnection  ref):  None  val  Public.  Forward to the wrapped protocol.",
            "title": "fun closed()"
        },
        {
            "location": "/net-ssl-SSLConnection/#fun-connect_failed",
            "text": "fun ref\n connect_failed(conn:  TCPConnection  ref):  None  val  Public.  Forward to the wrapped protocol.",
            "title": "fun connect_failed()"
        },
        {
            "location": "/net-ssl-SSLConnection/#fun-connected",
            "text": "fun ref\n connected(conn:  TCPConnection  ref):  None  val  Public.  Swallow this event until the handshake is complete.",
            "title": "fun connected()"
        },
        {
            "location": "/net-ssl-SSLConnection/#fun-connecting",
            "text": "fun ref\n connecting(conn:  TCPConnection  ref, count:  U32  val):  None  val  Public.  Forward to the wrapped protocol.",
            "title": "fun connecting()"
        },
        {
            "location": "/net-ssl-SSLConnection/#fun-_poll",
            "text": "fun ref\n _poll(conn:  TCPConnection  ref):  None  val  Private.  Checks for both new application data and new destination data. Informs the\nwrapped protocol that is has connected when the handshake is complete.",
            "title": "fun _poll()"
        },
        {
            "location": "/net-ssl-SSLConnection/#fun-received",
            "text": "fun ref\n received(conn:  TCPConnection  ref, data:  Array [ U8  val] iso):  None  val  Public.  Pass the data to the SSL session and check for both new application data\nand new destination data.",
            "title": "fun received()"
        },
        {
            "location": "/net-ssl-SSLConnection/#fun-sent",
            "text": "fun ref\n sent(conn:  TCPConnection  ref, data:  ByteSeq  val):  ByteSeq  val ?  Public, may raise an error.  Pass the data to the SSL session and check for both new application data\nand new destination data.",
            "title": "fun sent()"
        },
        {
            "location": "/net-ssl-_SSLContext/",
            "text": "primitive _SSLContext\n\n\nIn package \"net/ssl\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_SSLContext\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_SSLContext\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _SSLContext"
        },
        {
            "location": "/net-ssl-_SSLContext/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-_SSLContext/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-_SSLContext/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-_SSLContext/#fun-eq",
            "text": "fun box\n eq(that:  _SSLContext  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-_SSLContext/#fun-ne",
            "text": "fun box\n ne(that:  _SSLContext  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-SSLContext/",
            "text": "class SSLContext\n\n\nIn package \"net/ssl\".\n\n\nPublic, default capability val.\n\n\nAn SSL context is used to create SSL sessions.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun allow_tls_v1()\n\n\nfun ref\n allow_tls_v1(state: \nBool\n val): \nSSLContext\n ref^\n\n\nPublic.\n\n\nAllow TLS v1. Defaults to true.\n\n\nfun allow_tls_v1_1()\n\n\nfun ref\n allow_tls_v1_1(state: \nBool\n val): \nSSLContext\n ref^\n\n\nPublic.\n\n\nAllow TLS v1.1. Defaults to true.\n\n\nfun allow_tls_v1_2()\n\n\nfun ref\n allow_tls_v1_2(state: \nBool\n val): \nSSLContext\n ref^\n\n\nPublic.\n\n\nAllow TLS v1.2. Defaults to true.\n\n\nfun client()\n\n\nfun box\n client(optional hostname: \nString\n val): \nSSL\n iso^ ?\n\n\nPublic, may raise an error.\n\n\nCreate a client-side SSL session. If a hostname is supplied, the server\nside certificate must be valid for that hostname.\n\n\nfun dispose()\n\n\nfun ref\n dispose(): \nNone\n val\n\n\nPublic.\n\n\nFree the SSL context.\n\n\nfun _final()\n\n\nfun box\n _final(): \nNone\n val\n\n\nPrivate.\n\n\nFree the SSL context.\n\n\nfun server()\n\n\nfun box\n server(): \nSSL\n iso^ ?\n\n\nPublic, may raise an error.\n\n\nCreate a server-side SSL session.\n\n\nfun set_authority()\n\n\nfun ref\n set_authority(file: \nString\n val, optional path: \nString\n val): \nSSLContext\n ref^ ?\n\n\nPublic, may raise an error.\n\n\nUse a PEM file and/or a directory of PEM files to specify certificate\nauthorities. Clients must set this. For servers, it is optional. Use an\nempty string to indicate no file or no path. Raises an error if these\nverify locations aren't valid, or if both are empty strings.\n\n\nfun set_cert()\n\n\nfun ref\n set_cert(cert: \nString\n val, key: \nString\n val): \nSSLContext\n ref^ ?\n\n\nPublic, may raise an error.\n\n\nThe cert file is a PEM certificate chain. The key file is a private key.\nServers must set this. For clients, it is optional.\n\n\nfun set_ciphers()\n\n\nfun ref\n set_ciphers(ciphers: \nString\n val): \nSSLContext\n ref^ ?\n\n\nPublic, may raise an error.\n\n\nSet the accepted ciphers. This replaces the existing list. Raises an error\nif the cipher list is invalid.\n\n\nfun set_client_verify()\n\n\nfun ref\n set_client_verify(state: \nBool\n val): \nSSLContext\n ref^\n\n\nPublic.\n\n\nSet to true to require verification. Defaults to true.\n\n\nfun set_server_verify()\n\n\nfun ref\n set_server_verify(state: \nBool\n val): \nSSLContext\n ref^\n\n\nPublic.\n\n\nSet to true to require verification. Defaults to false.\n\n\nfun set_verify_depth()\n\n\nfun ref\n set_verify_depth(depth: \nU32\n val): \nSSLContext\n ref^\n\n\nPublic.\n\n\nSet the verify depth. Defaults to 6.",
            "title": "class SSLContext"
        },
        {
            "location": "/net-ssl-SSLContext/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLContext/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-SSLContext/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-allow_tls_v1",
            "text": "fun ref\n allow_tls_v1(state:  Bool  val):  SSLContext  ref^  Public.  Allow TLS v1. Defaults to true.",
            "title": "fun allow_tls_v1()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-allow_tls_v1_1",
            "text": "fun ref\n allow_tls_v1_1(state:  Bool  val):  SSLContext  ref^  Public.  Allow TLS v1.1. Defaults to true.",
            "title": "fun allow_tls_v1_1()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-allow_tls_v1_2",
            "text": "fun ref\n allow_tls_v1_2(state:  Bool  val):  SSLContext  ref^  Public.  Allow TLS v1.2. Defaults to true.",
            "title": "fun allow_tls_v1_2()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-client",
            "text": "fun box\n client(optional hostname:  String  val):  SSL  iso^ ?  Public, may raise an error.  Create a client-side SSL session. If a hostname is supplied, the server\nside certificate must be valid for that hostname.",
            "title": "fun client()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-dispose",
            "text": "fun ref\n dispose():  None  val  Public.  Free the SSL context.",
            "title": "fun dispose()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-_final",
            "text": "fun box\n _final():  None  val  Private.  Free the SSL context.",
            "title": "fun _final()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-server",
            "text": "fun box\n server():  SSL  iso^ ?  Public, may raise an error.  Create a server-side SSL session.",
            "title": "fun server()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-set_authority",
            "text": "fun ref\n set_authority(file:  String  val, optional path:  String  val):  SSLContext  ref^ ?  Public, may raise an error.  Use a PEM file and/or a directory of PEM files to specify certificate\nauthorities. Clients must set this. For servers, it is optional. Use an\nempty string to indicate no file or no path. Raises an error if these\nverify locations aren't valid, or if both are empty strings.",
            "title": "fun set_authority()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-set_cert",
            "text": "fun ref\n set_cert(cert:  String  val, key:  String  val):  SSLContext  ref^ ?  Public, may raise an error.  The cert file is a PEM certificate chain. The key file is a private key.\nServers must set this. For clients, it is optional.",
            "title": "fun set_cert()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-set_ciphers",
            "text": "fun ref\n set_ciphers(ciphers:  String  val):  SSLContext  ref^ ?  Public, may raise an error.  Set the accepted ciphers. This replaces the existing list. Raises an error\nif the cipher list is invalid.",
            "title": "fun set_ciphers()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-set_client_verify",
            "text": "fun ref\n set_client_verify(state:  Bool  val):  SSLContext  ref^  Public.  Set to true to require verification. Defaults to true.",
            "title": "fun set_client_verify()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-set_server_verify",
            "text": "fun ref\n set_server_verify(state:  Bool  val):  SSLContext  ref^  Public.  Set to true to require verification. Defaults to false.",
            "title": "fun set_server_verify()"
        },
        {
            "location": "/net-ssl-SSLContext/#fun-set_verify_depth",
            "text": "fun ref\n set_verify_depth(depth:  U32  val):  SSLContext  ref^  Public.  Set the verify depth. Defaults to 6.",
            "title": "fun set_verify_depth()"
        },
        {
            "location": "/net-ssl-SSLError/",
            "text": "primitive SSLError\n\n\nIn package \"net/ssl\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nSSLError\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nSSLError\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive SSLError"
        },
        {
            "location": "/net-ssl-SSLError/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLError/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-SSLError/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-SSLError/#fun-eq",
            "text": "fun box\n eq(that:  SSLError  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-SSLError/#fun-ne",
            "text": "fun box\n ne(that:  SSLError  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-SSLHandshake/",
            "text": "primitive SSLHandshake\n\n\nIn package \"net/ssl\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nSSLHandshake\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nSSLHandshake\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive SSLHandshake"
        },
        {
            "location": "/net-ssl-SSLHandshake/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLHandshake/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-SSLHandshake/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-SSLHandshake/#fun-eq",
            "text": "fun box\n eq(that:  SSLHandshake  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-SSLHandshake/#fun-ne",
            "text": "fun box\n ne(that:  SSLHandshake  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-_SSLInit/",
            "text": "primitive _SSLInit\n\n\nIn package \"net/ssl\".\n\n\nPrivate, default capability val.\n\n\nThis initialises SSL when the program begins.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_SSLInit\n val): \nBool\n val\n\n\nPublic.\n\n\nfun _init()\n\n\nfun box\n _init(env: \nEnv\n val): \nNone\n val\n\n\nPrivate.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_SSLInit\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _SSLInit"
        },
        {
            "location": "/net-ssl-_SSLInit/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-_SSLInit/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-_SSLInit/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-_SSLInit/#fun-eq",
            "text": "fun box\n eq(that:  _SSLInit  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-_SSLInit/#fun-_init",
            "text": "fun box\n _init(env:  Env  val):  None  val  Private.",
            "title": "fun _init()"
        },
        {
            "location": "/net-ssl-_SSLInit/#fun-ne",
            "text": "fun box\n ne(that:  _SSLInit  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-SSLReady/",
            "text": "primitive SSLReady\n\n\nIn package \"net/ssl\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nSSLReady\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nSSLReady\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive SSLReady"
        },
        {
            "location": "/net-ssl-SSLReady/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-SSLReady/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-SSLReady/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-SSLReady/#fun-eq",
            "text": "fun box\n eq(that:  SSLReady  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-SSLReady/#fun-ne",
            "text": "fun box\n ne(that:  SSLReady  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-SSLState/",
            "text": "type SSLState is (((\nSSLHandshake\n val | \nSSLAuthFail\n val) | \nSSLReady\n val) | \nSSLError\n val)\n\n\nIn package \"net/ssl\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type SSLState"
        },
        {
            "location": "/net-ssl-X509/",
            "text": "primitive X509\n\n\nIn package \"net/ssl\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun all_names()\n\n\nfun box\n all_names(cert: \nPointer\n[\nX509\n val] ref): \nArray\n[\nString\n val] val\n\n\nPublic.\n\n\nReturns an array of all names for the certificate. Any names containing\nNULL bytes are not included. This includes the common name and all subject\nalternate names.\n\n\nfun common_name()\n\n\nfun box\n common_name(cert: \nPointer\n[\nX509\n val] ref): \nString\n val ?\n\n\nPublic, may raise an error.\n\n\nGet the common name for the certificate. Raises an error if the common name\ncontains any NULL bytes.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nX509\n val): \nBool\n val\n\n\nPublic.\n\n\nfun _match_name()\n\n\nfun box\n _match_name(host: \nString\n val, name: \nString\n val): \nBool\n val\n\n\nPrivate.\n\n\nReturns true if the name extracted from the certificate is valid for the\ngiven host.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nX509\n val): \nBool\n val\n\n\nPublic.\n\n\nfun valid_for_host()\n\n\nfun box\n valid_for_host(cert: \nPointer\n[\nX509\n val] ref, host: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nChecks if an OpenSSL X509 certificate is valid for a given host.",
            "title": "primitive X509"
        },
        {
            "location": "/net-ssl-X509/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-X509/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-X509/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-X509/#fun-all_names",
            "text": "fun box\n all_names(cert:  Pointer [ X509  val] ref):  Array [ String  val] val  Public.  Returns an array of all names for the certificate. Any names containing\nNULL bytes are not included. This includes the common name and all subject\nalternate names.",
            "title": "fun all_names()"
        },
        {
            "location": "/net-ssl-X509/#fun-common_name",
            "text": "fun box\n common_name(cert:  Pointer [ X509  val] ref):  String  val ?  Public, may raise an error.  Get the common name for the certificate. Raises an error if the common name\ncontains any NULL bytes.",
            "title": "fun common_name()"
        },
        {
            "location": "/net-ssl-X509/#fun-eq",
            "text": "fun box\n eq(that:  X509  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-X509/#fun-_match_name",
            "text": "fun box\n _match_name(host:  String  val, name:  String  val):  Bool  val  Private.  Returns true if the name extracted from the certificate is valid for the\ngiven host.",
            "title": "fun _match_name()"
        },
        {
            "location": "/net-ssl-X509/#fun-ne",
            "text": "fun box\n ne(that:  X509  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/net-ssl-X509/#fun-valid_for_host",
            "text": "fun box\n valid_for_host(cert:  Pointer [ X509  val] ref, host:  String  val):  Bool  val  Public.  Checks if an OpenSSL X509 certificate is valid for a given host.",
            "title": "fun valid_for_host()"
        },
        {
            "location": "/net-ssl-_X509Name/",
            "text": "primitive _X509Name\n\n\nIn package \"net/ssl\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_X509Name\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_X509Name\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _X509Name"
        },
        {
            "location": "/net-ssl-_X509Name/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/net-ssl-_X509Name/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/net-ssl-_X509Name/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/net-ssl-_X509Name/#fun-eq",
            "text": "fun box\n eq(that:  _X509Name  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/net-ssl-_X509Name/#fun-ne",
            "text": "fun box\n ne(that:  _X509Name  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options--index/",
            "text": "PonyOptions package",
            "title": "Package"
        },
        {
            "location": "/options--index/#ponyoptions-package",
            "text": "",
            "title": "PonyOptions package"
        },
        {
            "location": "/options-AmbiguousMatch/",
            "text": "primitive AmbiguousMatch\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nAmbiguousMatch\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nAmbiguousMatch\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive AmbiguousMatch"
        },
        {
            "location": "/options-AmbiguousMatch/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-AmbiguousMatch/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-AmbiguousMatch/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-AmbiguousMatch/#fun-eq",
            "text": "fun box\n eq(that:  AmbiguousMatch  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-AmbiguousMatch/#fun-ne",
            "text": "fun box\n ne(that:  AmbiguousMatch  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options-ArgumentType/",
            "text": "type ArgumentType is (((\nNone\n val | \nStringArgument\n val) | \nI64Argument\n val) | \nF64Argument\n val)\n\n\nIn package \"options\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type ArgumentType"
        },
        {
            "location": "/options-EnvVars/",
            "text": "primitive EnvVars\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(from: \nArray\n[\nString\n val] val): \nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] val\n\n\nPublic.\n\n\nTurns an array of strings that look like environment variables, ie\nkey=value, into a map from string to string.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nEnvVars\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nEnvVars\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive EnvVars"
        },
        {
            "location": "/options-EnvVars/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-EnvVars/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-EnvVars/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-EnvVars/#fun-apply",
            "text": "fun box\n apply(from:  Array [ String  val] val):  HashMap [ String  val,  String  val,  HashEq [ String  val] val] val  Public.  Turns an array of strings that look like environment variables, ie\nkey=value, into a map from string to string.",
            "title": "fun apply()"
        },
        {
            "location": "/options-EnvVars/#fun-eq",
            "text": "fun box\n eq(that:  EnvVars  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-EnvVars/#fun-ne",
            "text": "fun box\n ne(that:  EnvVars  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options-_ErrorPrinter/",
            "text": "class _ErrorPrinter\n\n\nIn package \"options\".\n\n\nPrivate, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew _ambiguous()\n\n\nnew _ambiguous(matches: \nArray\n[\n_Option\n ref] ref)\n\n\nPrivate.\n\n\nnew _invalid()\n\n\nnew _invalid(argument: \nString\n box, option: \n_Option\n ref)\n\n\nPrivate.\n\n\nnew _missing()\n\n\nnew _missing(option: \n_Option\n ref)\n\n\nPrivate.\n\n\nnew _unrecognised()\n\n\nnew _unrecognised(option: \nString\n box)\n\n\nPrivate.\n\n\nFunctions\n\n\nfun reason()\n\n\nfun box\n reason(): (((\nUnrecognisedOption\n val | \nMissingArgument\n val) | \nInvalidArgument\n val) | \nAmbiguousMatch\n val)\n\n\nPublic.\n\n\nfun report()\n\n\nfun box\n report(out: \nOutStream\n tag): \nNone\n val\n\n\nPublic.",
            "title": "class _ErrorPrinter"
        },
        {
            "location": "/options-_ErrorPrinter/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-_ErrorPrinter/#new-_ambiguous",
            "text": "new _ambiguous(matches:  Array [ _Option  ref] ref)  Private.",
            "title": "new _ambiguous()"
        },
        {
            "location": "/options-_ErrorPrinter/#new-_invalid",
            "text": "new _invalid(argument:  String  box, option:  _Option  ref)  Private.",
            "title": "new _invalid()"
        },
        {
            "location": "/options-_ErrorPrinter/#new-_missing",
            "text": "new _missing(option:  _Option  ref)  Private.",
            "title": "new _missing()"
        },
        {
            "location": "/options-_ErrorPrinter/#new-_unrecognised",
            "text": "new _unrecognised(option:  String  box)  Private.",
            "title": "new _unrecognised()"
        },
        {
            "location": "/options-_ErrorPrinter/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-_ErrorPrinter/#fun-reason",
            "text": "fun box\n reason(): ((( UnrecognisedOption  val |  MissingArgument  val) |  InvalidArgument  val) |  AmbiguousMatch  val)  Public.",
            "title": "fun reason()"
        },
        {
            "location": "/options-_ErrorPrinter/#fun-report",
            "text": "fun box\n report(out:  OutStream  tag):  None  val  Public.",
            "title": "fun report()"
        },
        {
            "location": "/options-ErrorReason/",
            "text": "type ErrorReason is (((\nUnrecognisedOption\n val | \nMissingArgument\n val) | \nInvalidArgument\n val) | \nAmbiguousMatch\n val)\n\n\nIn package \"options\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type ErrorReason"
        },
        {
            "location": "/options-F64Argument/",
            "text": "primitive F64Argument\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nF64Argument\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nF64Argument\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive F64Argument"
        },
        {
            "location": "/options-F64Argument/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-F64Argument/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-F64Argument/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-F64Argument/#fun-eq",
            "text": "fun box\n eq(that:  F64Argument  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-F64Argument/#fun-ne",
            "text": "fun box\n ne(that:  F64Argument  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options-I64Argument/",
            "text": "primitive I64Argument\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nI64Argument\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nI64Argument\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive I64Argument"
        },
        {
            "location": "/options-I64Argument/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-I64Argument/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-I64Argument/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-I64Argument/#fun-eq",
            "text": "fun box\n eq(that:  I64Argument  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-I64Argument/#fun-ne",
            "text": "fun box\n ne(that:  I64Argument  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options-InvalidArgument/",
            "text": "primitive InvalidArgument\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nInvalidArgument\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nInvalidArgument\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive InvalidArgument"
        },
        {
            "location": "/options-InvalidArgument/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-InvalidArgument/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-InvalidArgument/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-InvalidArgument/#fun-eq",
            "text": "fun box\n eq(that:  InvalidArgument  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-InvalidArgument/#fun-ne",
            "text": "fun box\n ne(that:  InvalidArgument  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"options\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/options-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/options-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/options-MissingArgument/",
            "text": "primitive MissingArgument\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nMissingArgument\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nMissingArgument\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive MissingArgument"
        },
        {
            "location": "/options-MissingArgument/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-MissingArgument/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-MissingArgument/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-MissingArgument/#fun-eq",
            "text": "fun box\n eq(that:  MissingArgument  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-MissingArgument/#fun-ne",
            "text": "fun box\n ne(that:  MissingArgument  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options-_Option/",
            "text": "class _Option\n\n\nIn package \"options\".\n\n\nPrivate, default capability ref.\n\n\nNo doc string provided.\n\n\nPublic fields\n\n\n\n\nlet arg: (((\nNone\n val | \nStringArgument\n val) | \nI64Argument\n val) | \nF64Argument\n val)\n\n\nlet long: \nString\n val\n\n\nlet mode: (\nRequired\n val | \nOptional\n val)\n\n\nlet short: (\nString\n val | \nNone\n val)\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(long': \nString\n val, short': (\nString\n val | \nNone\n val), arg': (((\nNone\n val | \nStringArgument\n val) | \nI64Argument\n val) | \nF64Argument\n val), mode': (\nRequired\n val | \nOptional\n val))\n\n\nPublic.\n\n\nFunctions\n\n\nfun accepts()\n\n\nfun box\n accepts(argument: \nString\n box): \nBool\n val\n\n\nPublic.\n\n\nfun has_argument()\n\n\nfun box\n has_argument(): \nBool\n val\n\n\nPublic.\n\n\nfun matches()\n\n\nfun box\n matches(name: \nString\n box, shortmatch: \nBool\n val): \nBool\n val\n\n\nPublic.\n\n\nfun requires_argument()\n\n\nfun box\n requires_argument(): \nBool\n val\n\n\nPublic.",
            "title": "class _Option"
        },
        {
            "location": "/options-_Option/#public-fields",
            "text": "let arg: ((( None  val |  StringArgument  val) |  I64Argument  val) |  F64Argument  val)  let long:  String  val  let mode: ( Required  val |  Optional  val)  let short: ( String  val |  None  val)",
            "title": "Public fields"
        },
        {
            "location": "/options-_Option/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-_Option/#new-create",
            "text": "new create(long':  String  val, short': ( String  val |  None  val), arg': ((( None  val |  StringArgument  val) |  I64Argument  val) |  F64Argument  val), mode': ( Required  val |  Optional  val))  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-_Option/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-_Option/#fun-accepts",
            "text": "fun box\n accepts(argument:  String  box):  Bool  val  Public.",
            "title": "fun accepts()"
        },
        {
            "location": "/options-_Option/#fun-has_argument",
            "text": "fun box\n has_argument():  Bool  val  Public.",
            "title": "fun has_argument()"
        },
        {
            "location": "/options-_Option/#fun-matches",
            "text": "fun box\n matches(name:  String  box, shortmatch:  Bool  val):  Bool  val  Public.",
            "title": "fun matches()"
        },
        {
            "location": "/options-_Option/#fun-requires_argument",
            "text": "fun box\n requires_argument():  Bool  val  Public.",
            "title": "fun requires_argument()"
        },
        {
            "location": "/options-Optional/",
            "text": "primitive Optional\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nOptional\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nOptional\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive Optional"
        },
        {
            "location": "/options-Optional/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-Optional/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-Optional/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-Optional/#fun-eq",
            "text": "fun box\n eq(that:  Optional  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-Optional/#fun-ne",
            "text": "fun box\n ne(that:  Optional  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options-Options/",
            "text": "class Options is \nIterator\n[(((\nString\n val , (((\nNone\n val | \nString\n val) | \nI64\n val) | \nF64\n val)) | \nParseError\n ref) | \nNone\n val)] ref\n\n\nIn package \"options\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val, optional fatal: \nBool\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun add()\n\n\nfun ref\n add(long: \nString\n val, optional short: (\nNone\n val | \nString\n val), optional arg: (((\nNone\n val | \nStringArgument\n val) | \nI64Argument\n val) | \nF64Argument\n val), optional mode: (\nRequired\n val | \nOptional\n val)): \nOptions\n ref\n\n\nPublic.\n\n\nAdds a new named option to the parser configuration.\n\n\nfun has_next()\n\n\nfun box\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nParsing options is done if either an error occurs and fatal error reporting\nis turned on, or if all command line arguments have been processed.\n\n\nfun next()\n\n\nfun ref\n next(): (((\nString\n val , (((\nNone\n val | \nString\n val) | \nI64\n val) | \nF64\n val)) | \nParseError\n ref) | \nNone\n val)\n\n\nPublic.\n\n\nSkips all positional arguments and attemps to match named options. Returns\na ParsedOption on success, a ParseError on error, or None if no named\noptions are found.\n\n\nfun remaining()\n\n\nfun ref\n remaining(): \nArray\n[\nString\n ref] ref\n\n\nPublic.\n\n\nReturns all unprocessed command line arguments. After parsing all options,\nthis will only include positional arguments, potentially unrecognised and\nambiguous options and invalid arguments.\n\n\nfun _select()\n\n\nfun ref\n _select(candidate: \nString\n ref, start: \nISize\n val, offset: \nISize\n val, finish: \nISize\n val): (\n_Option\n ref | \nParseError\n ref)\n\n\nPrivate.\n\n\nSelects an option from the configuration depending on the current command\nline argument.\n\n\nfun _skip()\n\n\nfun ref\n _skip(): \nBool\n val\n\n\nPrivate.\n\n\nSkips all non-options. Returns true if a named option has been found, false\notherwise.\n\n\nfun _strip()\n\n\nfun ref\n _strip(opt: \n_Option\n ref, matched: \nString\n ref, start: \nISize\n val, finish: \nISize\n val): \nNone\n val\n\n\nPrivate.\n\n\nStrips accepted options from the copied array of command line arguments.\n\n\nfun _verify()\n\n\nfun ref\n _verify(opt: \n_Option\n ref, combined: \nBool\n val): ((\nString\n val , (((\nNone\n val | \nString\n val) | \nI64\n val) | \nF64\n val)) | \nParseError\n ref)\n\n\nPrivate.\n\n\nVerifies whether a parsed option from the command line is well-formed. That\nis, checking whether required or optional arguments are supplied. Returns\na ParsedOption on success, a ParseError otherwise.",
            "title": "class Options"
        },
        {
            "location": "/options-Options/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-Options/#new-create",
            "text": "new create(env:  Env  val, optional fatal:  Bool  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-Options/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-Options/#fun-add",
            "text": "fun ref\n add(long:  String  val, optional short: ( None  val |  String  val), optional arg: ((( None  val |  StringArgument  val) |  I64Argument  val) |  F64Argument  val), optional mode: ( Required  val |  Optional  val)):  Options  ref  Public.  Adds a new named option to the parser configuration.",
            "title": "fun add()"
        },
        {
            "location": "/options-Options/#fun-has_next",
            "text": "fun box\n has_next():  Bool  val  Public.  Parsing options is done if either an error occurs and fatal error reporting\nis turned on, or if all command line arguments have been processed.",
            "title": "fun has_next()"
        },
        {
            "location": "/options-Options/#fun-next",
            "text": "fun ref\n next(): ((( String  val , ((( None  val |  String  val) |  I64  val) |  F64  val)) |  ParseError  ref) |  None  val)  Public.  Skips all positional arguments and attemps to match named options. Returns\na ParsedOption on success, a ParseError on error, or None if no named\noptions are found.",
            "title": "fun next()"
        },
        {
            "location": "/options-Options/#fun-remaining",
            "text": "fun ref\n remaining():  Array [ String  ref] ref  Public.  Returns all unprocessed command line arguments. After parsing all options,\nthis will only include positional arguments, potentially unrecognised and\nambiguous options and invalid arguments.",
            "title": "fun remaining()"
        },
        {
            "location": "/options-Options/#fun-_select",
            "text": "fun ref\n _select(candidate:  String  ref, start:  ISize  val, offset:  ISize  val, finish:  ISize  val): ( _Option  ref |  ParseError  ref)  Private.  Selects an option from the configuration depending on the current command\nline argument.",
            "title": "fun _select()"
        },
        {
            "location": "/options-Options/#fun-_skip",
            "text": "fun ref\n _skip():  Bool  val  Private.  Skips all non-options. Returns true if a named option has been found, false\notherwise.",
            "title": "fun _skip()"
        },
        {
            "location": "/options-Options/#fun-_strip",
            "text": "fun ref\n _strip(opt:  _Option  ref, matched:  String  ref, start:  ISize  val, finish:  ISize  val):  None  val  Private.  Strips accepted options from the copied array of command line arguments.",
            "title": "fun _strip()"
        },
        {
            "location": "/options-Options/#fun-_verify",
            "text": "fun ref\n _verify(opt:  _Option  ref, combined:  Bool  val): (( String  val , ((( None  val |  String  val) |  I64  val) |  F64  val)) |  ParseError  ref)  Private.  Verifies whether a parsed option from the command line is well-formed. That\nis, checking whether required or optional arguments are supplied. Returns\na ParsedOption on success, a ParseError otherwise.",
            "title": "fun _verify()"
        },
        {
            "location": "/options-ParseError/",
            "text": "interface ParseError\n\n\nIn package \"options\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nFunctions\n\n\nfun reason()\n\n\nfun box\n reason(): (((\nUnrecognisedOption\n val | \nMissingArgument\n val) | \nInvalidArgument\n val) | \nAmbiguousMatch\n val)\n\n\nPublic.\n\n\nfun report()\n\n\nfun box\n report(out: \nOutStream\n tag): \nNone\n val\n\n\nPublic.",
            "title": "interface ParseError"
        },
        {
            "location": "/options-ParseError/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-ParseError/#fun-reason",
            "text": "fun box\n reason(): ((( UnrecognisedOption  val |  MissingArgument  val) |  InvalidArgument  val) |  AmbiguousMatch  val)  Public.",
            "title": "fun reason()"
        },
        {
            "location": "/options-ParseError/#fun-report",
            "text": "fun box\n report(out:  OutStream  tag):  None  val  Public.",
            "title": "fun report()"
        },
        {
            "location": "/options-ParsedOption/",
            "text": "type ParsedOption is (\nString\n val , (((\nNone\n val | \nString\n val) | \nI64\n val) | \nF64\n val))\n\n\nIn package \"options\".\n\n\nPublic.\n\n\nNo doc string provided.",
            "title": "type ParsedOption"
        },
        {
            "location": "/options-Required/",
            "text": "primitive Required\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nRequired\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nRequired\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive Required"
        },
        {
            "location": "/options-Required/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-Required/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-Required/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-Required/#fun-eq",
            "text": "fun box\n eq(that:  Required  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-Required/#fun-ne",
            "text": "fun box\n ne(that:  Required  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options-StringArgument/",
            "text": "primitive StringArgument\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nStringArgument\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nStringArgument\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive StringArgument"
        },
        {
            "location": "/options-StringArgument/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-StringArgument/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-StringArgument/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-StringArgument/#fun-eq",
            "text": "fun box\n eq(that:  StringArgument  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-StringArgument/#fun-ne",
            "text": "fun box\n ne(that:  StringArgument  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options-_TestArgLeadingDash/",
            "text": "class _TestArgLeadingDash is \nUnitTest\n ref\n\n\nIn package \"options\".\n\n\nPrivate, default capability iso.\n\n\nArguments can only start with a leading dash if they are separated from\nthe option using '=', otherwise they will be interpreted as named options.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestArgLeadingDash"
        },
        {
            "location": "/options-_TestArgLeadingDash/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-_TestArgLeadingDash/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-_TestArgLeadingDash/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-_TestArgLeadingDash/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/options-_TestArgLeadingDash/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/options-_TestArgLeadingDash/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/options-_TestArgLeadingDash/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/options-_TestArgLeadingDash/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/options-_TestCombineShortArg/",
            "text": "class _TestCombineShortArg is \nUnitTest\n ref\n\n\nIn package \"options\".\n\n\nPrivate, default capability iso.\n\n\nShort options can be combined up to the first option that takes an argument.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestCombineShortArg"
        },
        {
            "location": "/options-_TestCombineShortArg/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-_TestCombineShortArg/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-_TestCombineShortArg/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-_TestCombineShortArg/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/options-_TestCombineShortArg/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/options-_TestCombineShortArg/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/options-_TestCombineShortArg/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/options-_TestCombineShortArg/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/options-_TestCombineShortOptions/",
            "text": "class _TestCombineShortOptions is \nUnitTest\n ref\n\n\nIn package \"options\".\n\n\nPrivate, default capability iso.\n\n\nShort options can be combined into one string with a single leading dash.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestCombineShortOptions"
        },
        {
            "location": "/options-_TestCombineShortOptions/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-_TestCombineShortOptions/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-_TestCombineShortOptions/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-_TestCombineShortOptions/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/options-_TestCombineShortOptions/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/options-_TestCombineShortOptions/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/options-_TestCombineShortOptions/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/options-_TestCombineShortOptions/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/options-_TestLongOptions/",
            "text": "class _TestLongOptions is \nUnitTest\n ref\n\n\nIn package \"options\".\n\n\nPrivate, default capability iso.\n\n\nLong options start with two leading dashes, and can be lone, have a following\narg, or combined arg with =.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestLongOptions"
        },
        {
            "location": "/options-_TestLongOptions/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-_TestLongOptions/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-_TestLongOptions/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-_TestLongOptions/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/options-_TestLongOptions/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/options-_TestLongOptions/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/options-_TestLongOptions/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/options-_TestLongOptions/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/options-TestOptions/",
            "text": "primitive TestOptions\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nTestOptions\n val): \nBool\n val\n\n\nPublic.\n\n\nfun from()\n\n\nfun box\n from(renv: \nEnv\n val, args: \nArray\n[\nString\n val] val): \nOptions\n ref\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nTestOptions\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive TestOptions"
        },
        {
            "location": "/options-TestOptions/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-TestOptions/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-TestOptions/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-TestOptions/#fun-eq",
            "text": "fun box\n eq(that:  TestOptions  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-TestOptions/#fun-from",
            "text": "fun box\n from(renv:  Env  val, args:  Array [ String  val] val):  Options  ref  Public.",
            "title": "fun from()"
        },
        {
            "location": "/options-TestOptions/#fun-ne",
            "text": "fun box\n ne(that:  TestOptions  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/options-_TestShortOptions/",
            "text": "class _TestShortOptions is \nUnitTest\n ref\n\n\nIn package \"options\".\n\n\nPrivate, default capability iso.\n\n\nShort options start with a single leading dash, and can be lone, have a\nfollowing arg, or combined arg with =.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestShortOptions"
        },
        {
            "location": "/options-_TestShortOptions/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-_TestShortOptions/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-_TestShortOptions/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-_TestShortOptions/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/options-_TestShortOptions/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/options-_TestShortOptions/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/options-_TestShortOptions/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/options-_TestShortOptions/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/options-UnrecognisedOption/",
            "text": "primitive UnrecognisedOption\n\n\nIn package \"options\".\n\n\nPublic, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \nUnrecognisedOption\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nUnrecognisedOption\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive UnrecognisedOption"
        },
        {
            "location": "/options-UnrecognisedOption/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/options-UnrecognisedOption/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/options-UnrecognisedOption/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/options-UnrecognisedOption/#fun-eq",
            "text": "fun box\n eq(that:  UnrecognisedOption  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/options-UnrecognisedOption/#fun-ne",
            "text": "fun box\n ne(that:  UnrecognisedOption  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/ponytest--index/",
            "text": "PonyTest package\n\n\nThe PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.\n\n\nTo help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:\n  builtin\n  time\n  collections\n\n\nEach unit test is a class, with a single test function. By default all tests\nrun concurrently.\n\n\nEach test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.\n\n\nWhen any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.\n\n\nExample program\n\n\nTo use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.\n\n\nThe following is a complete program with 2 trivial tests.\n\n\nuse \nponytest\n\n\nactor Main is TestList\n  new create(env: Env) =\n\n    PonyTest(env, this)\n\n  new make() =\n\n    None\n\n  fun tag tests(test: PonyTest) =\n\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String =\n \naddition\n\n\n  fun apply(h: TestHelper) =\n\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String =\n \nsubtraction\n\n\n  fun apply(h: TestHelper) =\n\n    h.assert_eq[U32](2, 4 - 2)\n\n\n\n\nThe make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.\n\n\nMain.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.\n\n\nTest names\n\n\nTests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.\n\n\nArbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.\n\n\nAggregation\n\n\nOften it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.\n\n\nThis can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages \nfoo\n and \nbar\n.\n\n\nuse \nponytest\n\nuse foo = \nfoo\n\nuse bar = \nbar\n\n\nactor Main is TestList\n  new create(env: Env) =\n\n    PonyTest(env, this)\n\n  new make() =\n\n    None\n\n  fun tag tests(test: PonyTest) =\n\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)\n\n\n\n\nAggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.\n\n\nLong tests\n\n\nSimple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.\n\n\nLong tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.\n\n\nThe complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.\n\n\nSince failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.\n\n\nOn a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.\n\n\nNote that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.\n\n\nTimeouts should not be used as the standard method of detecting if a test has\nfailed.\n\n\nExclusion groups\n\n\nBy default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.\n\n\nNo tests that are in the same exclusion group will be run concurrently.\n\n\nExclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.\n\n\nThe command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.\n\n\nTear down\n\n\nEach unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.\n\n\nThe tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.\n\n\nWhen a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.\n\n\nThe test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.",
            "title": "Package"
        },
        {
            "location": "/ponytest--index/#ponytest-package",
            "text": "The PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.  To help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:\n  builtin\n  time\n  collections  Each unit test is a class, with a single test function. By default all tests\nrun concurrently.  Each test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.  When any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.",
            "title": "PonyTest package"
        },
        {
            "location": "/ponytest--index/#example-program",
            "text": "To use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.  The following is a complete program with 2 trivial tests.  use  ponytest \n\nactor Main is TestList\n  new create(env: Env) = \n    PonyTest(env, this)\n\n  new make() = \n    None\n\n  fun tag tests(test: PonyTest) = \n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String =   addition \n\n  fun apply(h: TestHelper) = \n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String =   subtraction \n\n  fun apply(h: TestHelper) = \n    h.assert_eq[U32](2, 4 - 2)  The make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.  Main.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.",
            "title": "Example program"
        },
        {
            "location": "/ponytest--index/#test-names",
            "text": "Tests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.  Arbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.",
            "title": "Test names"
        },
        {
            "location": "/ponytest--index/#aggregation",
            "text": "Often it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.  This can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages  foo  and  bar .  use  ponytest \nuse foo =  foo \nuse bar =  bar \n\nactor Main is TestList\n  new create(env: Env) = \n    PonyTest(env, this)\n\n  new make() = \n    None\n\n  fun tag tests(test: PonyTest) = \n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)  Aggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.",
            "title": "Aggregation"
        },
        {
            "location": "/ponytest--index/#long-tests",
            "text": "Simple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.  Long tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.  The complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.  Since failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.  On a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.  Note that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.  Timeouts should not be used as the standard method of detecting if a test has\nfailed.",
            "title": "Long tests"
        },
        {
            "location": "/ponytest--index/#exclusion-groups",
            "text": "By default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.  No tests that are in the same exclusion group will be run concurrently.  Exclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.  The command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.",
            "title": "Exclusion groups"
        },
        {
            "location": "/ponytest--index/#tear-down",
            "text": "Each unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.  The tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.  When a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.  The test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.",
            "title": "Tear down"
        },
        {
            "location": "/ponytest-_Color/",
            "text": "primitive _Color\n\n\nIn package \"ponytest\".\n\n\nPrivate, default capability val.\n\n\nStrings to embedded in text to specify colours.\nThese are copies of the strings defined in packages/term. They are duplicated\nhere to avoid a dependency.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_Color\n val): \nBool\n val\n\n\nPublic.\n\n\nfun green()\n\n\nfun box\n green(): \nString\n val\n\n\nPublic.\n\n\nBright green text.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_Color\n val): \nBool\n val\n\n\nPublic.\n\n\nfun red()\n\n\nfun box\n red(): \nString\n val\n\n\nPublic.\n\n\nBright red text.\n\n\nfun reset()\n\n\nfun box\n reset(): \nString\n val\n\n\nPublic.\n\n\nResets all colours and text styles to the default.",
            "title": "primitive _Color"
        },
        {
            "location": "/ponytest-_Color/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-_Color/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/ponytest-_Color/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/ponytest-_Color/#fun-eq",
            "text": "fun box\n eq(that:  _Color  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/ponytest-_Color/#fun-green",
            "text": "fun box\n green():  String  val  Public.  Bright green text.",
            "title": "fun green()"
        },
        {
            "location": "/ponytest-_Color/#fun-ne",
            "text": "fun box\n ne(that:  _Color  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/ponytest-_Color/#fun-red",
            "text": "fun box\n red():  String  val  Public.  Bright red text.",
            "title": "fun red()"
        },
        {
            "location": "/ponytest-_Color/#fun-reset",
            "text": "fun box\n reset():  String  val  Public.  Resets all colours and text styles to the default.",
            "title": "fun reset()"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/",
            "text": "actor _ExclusiveGroup is \n_Group\n tag\n\n\nIn package \"ponytest\".\n\n\nPrivate, default capability tag.\n\n\nTest group in which we only ever have one test running at a time.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nBehaviours\n\n\nbe apply()\n\n\nbe apply(runner: \n_TestRunner\n tag)\n\n\nPublic.\n\n\nbe _test_complete()\n\n\nbe _test_complete(runner: \n_TestRunner\n tag)\n\n\nPrivate.",
            "title": "actor _ExclusiveGroup"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/#be-apply",
            "text": "be apply(runner:  _TestRunner  tag)  Public.",
            "title": "be apply()"
        },
        {
            "location": "/ponytest-_ExclusiveGroup/#be-_test_complete",
            "text": "be _test_complete(runner:  _TestRunner  tag)  Private.",
            "title": "be _test_complete()"
        },
        {
            "location": "/ponytest-_Group/",
            "text": "trait _Group\n\n\nIn package \"ponytest\".\n\n\nPrivate, default capability tag.\n\n\nTest exclusion is achieved by organising tests into groups. Each group can be\nexclusive, ie only one test is run at a time, or simultaneous, ie all tests\nare run concurrently.\n\n\nBehaviours\n\n\nbe apply()\n\n\nbe apply(runner: \n_TestRunner\n tag)\n\n\nPublic.\n\n\nRun the given test, or queue it and run later, as appropriate.\n\n\nbe _test_complete()\n\n\nbe _test_complete(runner: \n_TestRunner\n tag)\n\n\nPrivate.\n\n\nThe specified test has completed.",
            "title": "trait _Group"
        },
        {
            "location": "/ponytest-_Group/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/ponytest-_Group/#be-apply",
            "text": "be apply(runner:  _TestRunner  tag)  Public.  Run the given test, or queue it and run later, as appropriate.",
            "title": "be apply()"
        },
        {
            "location": "/ponytest-_Group/#be-_test_complete",
            "text": "be _test_complete(runner:  _TestRunner  tag)  Private.  The specified test has completed.",
            "title": "be _test_complete()"
        },
        {
            "location": "/ponytest-ITest/",
            "text": "interface ITest\n\n\nIn package \"ponytest\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(): \nNone\n val ?\n\n\nPublic, may raise an error.",
            "title": "interface ITest"
        },
        {
            "location": "/ponytest-ITest/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/ponytest-ITest/#fun-apply",
            "text": "fun box\n apply():  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/ponytest-PonyTest/",
            "text": "actor PonyTest\n\n\nIn package \"ponytest\".\n\n\nPublic, default capability tag.\n\n\nMain test framework actor that organises tests, collates information and\nprints results.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val, list: \nTestList\n tag)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe _all_tests_applied()\n\n\nbe _all_tests_applied()\n\n\nPrivate.\n\n\nAll our tests have been handed to apply(), setup for finishing\n\n\nbe apply()\n\n\nbe apply(test: \nUnitTest\n iso)\n\n\nPublic.\n\n\nRun the given test, subject to our filter and options.\n\n\nbe _test_complete()\n\n\nbe _test_complete(id: \nUSize\n val, pass: \nBool\n val, log: \nArray\n[\nString\n val] val)\n\n\nPrivate.\n\n\nA test has completed, restore its result and update our status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.\n\n\nbe _test_started()\n\n\nbe _test_started(id: \nUSize\n val)\n\n\nPrivate.\n\n\nA test has started running, update status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.\n\n\nFunctions\n\n\nfun _find_group()\n\n\nfun ref\n _find_group(group_name: \nString\n val): \n_Group\n tag\n\n\nPrivate.\n\n\nFind the group to use for the given group name, subject to the\n--sequential flag.\n\n\nfun _plural()\n\n\nfun box\n _plural(n: \nUSize\n val): \nString\n val\n\n\nPrivate.\n\n\nReturn a \"s\" or an empty string depending on whether the given number is 1.\nFor use when printing possibly plural words, eg \"test\" or \"tests\".\n\n\nfun _print_report()\n\n\nfun box\n _print_report(): \nNone\n val\n\n\nPrivate.\n\n\nThe tests are all complete, print out the results.\n\n\nfun _process_opts()\n\n\nfun ref\n _process_opts(): \nNone\n val\n\n\nPrivate.\n\n\nProcess our command line options.\nAll command line arguments given must be recognised and make sense.\nState for specified options is stored in object fields.\nWe don't use the options package because we aren't already dependencies.",
            "title": "actor PonyTest"
        },
        {
            "location": "/ponytest-PonyTest/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-PonyTest/#new-create",
            "text": "new create(env:  Env  val, list:  TestList  tag)  Public.",
            "title": "new create()"
        },
        {
            "location": "/ponytest-PonyTest/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/ponytest-PonyTest/#be-_all_tests_applied",
            "text": "be _all_tests_applied()  Private.  All our tests have been handed to apply(), setup for finishing",
            "title": "be _all_tests_applied()"
        },
        {
            "location": "/ponytest-PonyTest/#be-apply",
            "text": "be apply(test:  UnitTest  iso)  Public.  Run the given test, subject to our filter and options.",
            "title": "be apply()"
        },
        {
            "location": "/ponytest-PonyTest/#be-_test_complete",
            "text": "be _test_complete(id:  USize  val, pass:  Bool  val, log:  Array [ String  val] val)  Private.  A test has completed, restore its result and update our status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.",
            "title": "be _test_complete()"
        },
        {
            "location": "/ponytest-PonyTest/#be-_test_started",
            "text": "be _test_started(id:  USize  val)  Private.  A test has started running, update status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.",
            "title": "be _test_started()"
        },
        {
            "location": "/ponytest-PonyTest/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/ponytest-PonyTest/#fun-_find_group",
            "text": "fun ref\n _find_group(group_name:  String  val):  _Group  tag  Private.  Find the group to use for the given group name, subject to the\n--sequential flag.",
            "title": "fun _find_group()"
        },
        {
            "location": "/ponytest-PonyTest/#fun-_plural",
            "text": "fun box\n _plural(n:  USize  val):  String  val  Private.  Return a \"s\" or an empty string depending on whether the given number is 1.\nFor use when printing possibly plural words, eg \"test\" or \"tests\".",
            "title": "fun _plural()"
        },
        {
            "location": "/ponytest-PonyTest/#fun-_print_report",
            "text": "fun box\n _print_report():  None  val  Private.  The tests are all complete, print out the results.",
            "title": "fun _print_report()"
        },
        {
            "location": "/ponytest-PonyTest/#fun-_process_opts",
            "text": "fun ref\n _process_opts():  None  val  Private.  Process our command line options.\nAll command line arguments given must be recognised and make sense.\nState for specified options is stored in object fields.\nWe don't use the options package because we aren't already dependencies.",
            "title": "fun _process_opts()"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/",
            "text": "actor _SimultaneousGroup is \n_Group\n tag\n\n\nIn package \"ponytest\".\n\n\nPrivate, default capability tag.\n\n\nTest group in which all tests can run concurrently.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nBehaviours\n\n\nbe apply()\n\n\nbe apply(runner: \n_TestRunner\n tag)\n\n\nPublic.\n\n\nbe _test_complete()\n\n\nbe _test_complete(runner: \n_TestRunner\n tag)\n\n\nPrivate.",
            "title": "actor _SimultaneousGroup"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/#be-apply",
            "text": "be apply(runner:  _TestRunner  tag)  Public.",
            "title": "be apply()"
        },
        {
            "location": "/ponytest-_SimultaneousGroup/#be-_test_complete",
            "text": "be _test_complete(runner:  _TestRunner  tag)  Private.",
            "title": "be _test_complete()"
        },
        {
            "location": "/ponytest-TestHelper/",
            "text": "class TestHelper\n\n\nIn package \"ponytest\".\n\n\nPublic, default capability val.\n\n\nPer unit test class that provides control, logging and assertion functions.\n\n\nEach unit test is given a TestHelper when it is run. This is val and so can\nbe passed between methods and actors within the test without restriction.\n\n\nThe assertion functions check the relevant condition and mark the test as a\nfailure if appropriate. The success or failure of the condition is reported\nback as a Bool which can be checked if a different code path is needed when\nthat condition fails.\n\n\nAll assert functions take an optional message argument. This is simply a\nstring that is printed as part of the error message when the condition fails.\nIt is intended to aid identifying what failed.\n\n\nPublic fields\n\n\n\n\nlet env: \nEnv\n val\n\n\n\n\nConstructors\n\n\nnew _create()\n\n\nnew _create(runner: \n_TestRunner\n tag, env': \nEnv\n val)\n\n\nPrivate.\n\n\nCreate a new TestHelper.\n\n\nFunctions\n\n\nfun assert_array_eq()\n\n\nfun box\n assert_array_eq[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] #read)](expect: \nReadSeq\n[A #read] box, actual: \nReadSeq\n[A #read] box, optional msg: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nAssert that the contents of the 2 given ReadSeqs are equal.\n\n\nfun assert_array_eq_unordered()\n\n\nfun box\n assert_array_eq_unordered[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] #read)](expect: \nReadSeq\n[A #read] box, actual: \nReadSeq\n[A #read] box, optional msg: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nAssert that the contents of the 2 given ReadSeqs are equal ignoring order.\n\n\nfun assert_eq()\n\n\nfun box\n assert_eq[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] #read)](expect: A #read, actual: A #read, optional msg: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nAssert that the 2 given expressions are equal.\n\n\nfun assert_error()\n\n\nfun box\n assert_error(test: \nITest\n box, optional msg: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nAssert that the given test function throws an error when run.\n\n\nfun assert_false()\n\n\nfun box\n assert_false(actual: \nBool\n val, optional msg: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nAssert that the given expression is false.\n\n\nfun assert_is()\n\n\nfun box\n assert_is[A: A](expect: A, actual: A, optional msg: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nAssert that the 2 given expressions resolve to the same instance\n\n\nfun assert_isnt()\n\n\nfun box\n assert_isnt[A: A](not_expect: A, actual: A, optional msg: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nAssert that the 2 given expressions resolve to different instances.\n\n\nfun assert_ne()\n\n\nfun box\n assert_ne[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] #read)](not_expect: A #read, actual: A #read, optional msg: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nAssert that the 2 given expressions are not equal.\n\n\nfun assert_true()\n\n\nfun box\n assert_true(actual: \nBool\n val, optional msg: \nString\n val): \nBool\n val\n\n\nPublic.\n\n\nAssert that the given expression is true.\n\n\nfun _check_eq()\n\n\nfun box\n _check_eq[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val])](check: \nString\n val, expect: A #read, actual: A #read, msg: \nString\n val): \nBool\n val\n\n\nPrivate.\n\n\nCheck that the 2 given expressions are equal.\n\n\nfun _check_ne()\n\n\nfun box\n _check_ne[A: (\nEquatable\n[A #read] #read \n \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val])](check: \nString\n val, not_expect: A #read, actual: A #read, msg: \nString\n val): \nBool\n val\n\n\nPrivate.\n\n\nCheck that the 2 given expressions are not equal.\n\n\nfun complete()\n\n\nfun box\n complete(success: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nMUST be called by each long test to indicate the test has finished, unless\na timeout occurs.\n\n\nThe \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.\n\n\nOnce this is called tear_down() may be called at any time.\n\n\nfun fail()\n\n\nfun box\n fail(optional msg: \nString\n val): \nNone\n val\n\n\nPublic.\n\n\nFlag the test as having failed.\n\n\nfun log()\n\n\nfun box\n log(msg: \nString\n val, optional verbose: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nLog the given message.\n\n\nThe verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.\n\n\nLogs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.\n\n\nfun long_test()\n\n\nfun box\n long_test(timeout: \nU64\n val): \nNone\n val\n\n\nPublic.\n\n\nIndicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.\n\n\nfun _print_array()\n\n\nfun box\n _print_array[A: \nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] #read](array: \nReadSeq\n[A #read] box): \nString\n val\n\n\nPrivate.\n\n\nGenerate a printable string of the contents of the given readseq to use in\nerror messages.",
            "title": "class TestHelper"
        },
        {
            "location": "/ponytest-TestHelper/#public-fields",
            "text": "let env:  Env  val",
            "title": "Public fields"
        },
        {
            "location": "/ponytest-TestHelper/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-TestHelper/#new-_create",
            "text": "new _create(runner:  _TestRunner  tag, env':  Env  val)  Private.  Create a new TestHelper.",
            "title": "new _create()"
        },
        {
            "location": "/ponytest-TestHelper/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/ponytest-TestHelper/#fun-assert_array_eq",
            "text": "fun box\n assert_array_eq[A: ( Equatable [A #read] #read    Stringable [ FormatDefault  val,  PrefixDefault  val] #read)](expect:  ReadSeq [A #read] box, actual:  ReadSeq [A #read] box, optional msg:  String  val):  Bool  val  Public.  Assert that the contents of the 2 given ReadSeqs are equal.",
            "title": "fun assert_array_eq()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-assert_array_eq_unordered",
            "text": "fun box\n assert_array_eq_unordered[A: ( Equatable [A #read] #read    Stringable [ FormatDefault  val,  PrefixDefault  val] #read)](expect:  ReadSeq [A #read] box, actual:  ReadSeq [A #read] box, optional msg:  String  val):  Bool  val  Public.  Assert that the contents of the 2 given ReadSeqs are equal ignoring order.",
            "title": "fun assert_array_eq_unordered()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-assert_eq",
            "text": "fun box\n assert_eq[A: ( Equatable [A #read] #read    Stringable [ FormatDefault  val,  PrefixDefault  val] #read)](expect: A #read, actual: A #read, optional msg:  String  val):  Bool  val  Public.  Assert that the 2 given expressions are equal.",
            "title": "fun assert_eq()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-assert_error",
            "text": "fun box\n assert_error(test:  ITest  box, optional msg:  String  val):  Bool  val  Public.  Assert that the given test function throws an error when run.",
            "title": "fun assert_error()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-assert_false",
            "text": "fun box\n assert_false(actual:  Bool  val, optional msg:  String  val):  Bool  val  Public.  Assert that the given expression is false.",
            "title": "fun assert_false()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-assert_is",
            "text": "fun box\n assert_is[A: A](expect: A, actual: A, optional msg:  String  val):  Bool  val  Public.  Assert that the 2 given expressions resolve to the same instance",
            "title": "fun assert_is()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-assert_isnt",
            "text": "fun box\n assert_isnt[A: A](not_expect: A, actual: A, optional msg:  String  val):  Bool  val  Public.  Assert that the 2 given expressions resolve to different instances.",
            "title": "fun assert_isnt()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-assert_ne",
            "text": "fun box\n assert_ne[A: ( Equatable [A #read] #read    Stringable [ FormatDefault  val,  PrefixDefault  val] #read)](not_expect: A #read, actual: A #read, optional msg:  String  val):  Bool  val  Public.  Assert that the 2 given expressions are not equal.",
            "title": "fun assert_ne()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-assert_true",
            "text": "fun box\n assert_true(actual:  Bool  val, optional msg:  String  val):  Bool  val  Public.  Assert that the given expression is true.",
            "title": "fun assert_true()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-_check_eq",
            "text": "fun box\n _check_eq[A: ( Equatable [A #read] #read    Stringable [ FormatDefault  val,  PrefixDefault  val])](check:  String  val, expect: A #read, actual: A #read, msg:  String  val):  Bool  val  Private.  Check that the 2 given expressions are equal.",
            "title": "fun _check_eq()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-_check_ne",
            "text": "fun box\n _check_ne[A: ( Equatable [A #read] #read    Stringable [ FormatDefault  val,  PrefixDefault  val])](check:  String  val, not_expect: A #read, actual: A #read, msg:  String  val):  Bool  val  Private.  Check that the 2 given expressions are not equal.",
            "title": "fun _check_ne()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-complete",
            "text": "fun box\n complete(success:  Bool  val):  None  val  Public.  MUST be called by each long test to indicate the test has finished, unless\na timeout occurs.  The \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.  Once this is called tear_down() may be called at any time.",
            "title": "fun complete()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-fail",
            "text": "fun box\n fail(optional msg:  String  val):  None  val  Public.  Flag the test as having failed.",
            "title": "fun fail()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-log",
            "text": "fun box\n log(msg:  String  val, optional verbose:  Bool  val):  None  val  Public.  Log the given message.  The verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.  Logs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.",
            "title": "fun log()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-long_test",
            "text": "fun box\n long_test(timeout:  U64  val):  None  val  Public.  Indicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.",
            "title": "fun long_test()"
        },
        {
            "location": "/ponytest-TestHelper/#fun-_print_array",
            "text": "fun box\n _print_array[A:  Stringable [ FormatDefault  val,  PrefixDefault  val] #read](array:  ReadSeq [A #read] box):  String  val  Private.  Generate a printable string of the contents of the given readseq to use in\nerror messages.",
            "title": "fun _print_array()"
        },
        {
            "location": "/ponytest-TestList/",
            "text": "trait TestList\n\n\nIn package \"ponytest\".\n\n\nPublic, default capability ref.\n\n\nSource of unit tests for a PonyTest object.\nSee package doc string for further information and example use.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.\n\n\nAdd all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:\n\n\nfun tests(test: PonyTest) =\n\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)",
            "title": "trait TestList"
        },
        {
            "location": "/ponytest-TestList/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/ponytest-TestList/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.  Add all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:  fun tests(test: PonyTest) = \n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)",
            "title": "fun tests()"
        },
        {
            "location": "/ponytest-_TestRecord/",
            "text": "class _TestRecord\n\n\nIn package \"ponytest\".\n\n\nPrivate, default capability ref.\n\n\nStore and report the result and log from a single test.\n\n\nPublic fields\n\n\n\n\nlet name: \nString\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val, name': \nString\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun _list_failed()\n\n\nfun box\n _list_failed(): \nNone\n val\n\n\nPrivate.\n\n\nPrint our test name out in the list of failed test, if we failed.\n\n\nfun _report()\n\n\nfun box\n _report(log_all: \nBool\n val): \nBool\n val\n\n\nPrivate.\n\n\nPrint our test summary, including the log if appropriate.\nThe log_all parameter indicates whether we've been told to print logs for\nall tests. The default is to only print logs for tests that fail.\nReturns our pass / fail status.\n\n\nfun _result()\n\n\nfun ref\n _result(pass: \nBool\n val, log: \nArray\n[\nString\n val] val): \nNone\n val\n\n\nPrivate.\n\n\nOur test has completed, store the result.",
            "title": "class _TestRecord"
        },
        {
            "location": "/ponytest-_TestRecord/#public-fields",
            "text": "let name:  String  val",
            "title": "Public fields"
        },
        {
            "location": "/ponytest-_TestRecord/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-_TestRecord/#new-create",
            "text": "new create(env:  Env  val, name':  String  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/ponytest-_TestRecord/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/ponytest-_TestRecord/#fun-_list_failed",
            "text": "fun box\n _list_failed():  None  val  Private.  Print our test name out in the list of failed test, if we failed.",
            "title": "fun _list_failed()"
        },
        {
            "location": "/ponytest-_TestRecord/#fun-_report",
            "text": "fun box\n _report(log_all:  Bool  val):  Bool  val  Private.  Print our test summary, including the log if appropriate.\nThe log_all parameter indicates whether we've been told to print logs for\nall tests. The default is to only print logs for tests that fail.\nReturns our pass / fail status.",
            "title": "fun _report()"
        },
        {
            "location": "/ponytest-_TestRecord/#fun-_result",
            "text": "fun ref\n _result(pass:  Bool  val, log:  Array [ String  val] val):  None  val  Private.  Our test has completed, store the result.",
            "title": "fun _result()"
        },
        {
            "location": "/ponytest-_TestRunner/",
            "text": "actor _TestRunner\n\n\nIn package \"ponytest\".\n\n\nPrivate, default capability tag.\n\n\nPer unit test actor that runs the test and keeps the log for it.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(ponytest: \nPonyTest\n tag, id: \nUSize\n val, test: \nUnitTest\n iso, group: \n_Group\n tag, verbose: \nBool\n val, env: \nEnv\n val, timers: \nTimers\n tag)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe _close()\n\n\nbe _close()\n\n\nPrivate.\n\n\nClose down this test and send a report.\n\n\nbe complete()\n\n\nbe complete(success: \nBool\n val)\n\n\nPublic.\n\n\nMUST be called by each long test to indicate the test has finished, unless\na timeout occurs.\n\n\nThe \"success\" parameter specifies whether the test succeeded. However if\nthe test has already been flagged as failing, then the test is considered a\nfailure, regardless of the value of this parameter.\n\n\nOnce this is called tear_down() may be called at any time.\n\n\nbe fail()\n\n\nbe fail(msg: \nString\n val)\n\n\nPublic.\n\n\nFlag the test as having failed.\n\n\nbe _finished()\n\n\nbe _finished()\n\n\nPrivate.\n\n\nCalled when the test function completes.\nIf long_test() is going to be called, it must have been by now.\n\n\nbe log()\n\n\nbe log(msg: \nString\n val, verbose: \nBool\n val)\n\n\nPublic.\n\n\nLog the given message.\n\n\nThe verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used.\n\n\nLogs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.\n\n\nbe long_test()\n\n\nbe long_test(timeout: \nU64\n val)\n\n\nPublic.\n\n\nThe test has been flagged as a long test.\n\n\nbe run()\n\n\nbe run()\n\n\nPublic.\n\n\nRun our test.\n\n\nbe _timeout()\n\n\nbe _timeout()\n\n\nPrivate.\n\n\nCalled when the long test timeout expires.\n\n\nFunctions\n\n\nfun _log()\n\n\nfun ref\n _log(msg: \nString\n val, verbose: \nBool\n val): \nNone\n val\n\n\nPrivate.\n\n\nWrite the given message direct to our log.\n\n\nfun _tear_down()\n\n\nfun ref\n _tear_down(): \nNone\n val\n\n\nPrivate.\n\n\nCheck if the test has finished and tear it down if necessary.",
            "title": "actor _TestRunner"
        },
        {
            "location": "/ponytest-_TestRunner/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/ponytest-_TestRunner/#new-create",
            "text": "new create(ponytest:  PonyTest  tag, id:  USize  val, test:  UnitTest  iso, group:  _Group  tag, verbose:  Bool  val, env:  Env  val, timers:  Timers  tag)  Public.",
            "title": "new create()"
        },
        {
            "location": "/ponytest-_TestRunner/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/ponytest-_TestRunner/#be-_close",
            "text": "be _close()  Private.  Close down this test and send a report.",
            "title": "be _close()"
        },
        {
            "location": "/ponytest-_TestRunner/#be-complete",
            "text": "be complete(success:  Bool  val)  Public.  MUST be called by each long test to indicate the test has finished, unless\na timeout occurs.  The \"success\" parameter specifies whether the test succeeded. However if\nthe test has already been flagged as failing, then the test is considered a\nfailure, regardless of the value of this parameter.  Once this is called tear_down() may be called at any time.",
            "title": "be complete()"
        },
        {
            "location": "/ponytest-_TestRunner/#be-fail",
            "text": "be fail(msg:  String  val)  Public.  Flag the test as having failed.",
            "title": "be fail()"
        },
        {
            "location": "/ponytest-_TestRunner/#be-_finished",
            "text": "be _finished()  Private.  Called when the test function completes.\nIf long_test() is going to be called, it must have been by now.",
            "title": "be _finished()"
        },
        {
            "location": "/ponytest-_TestRunner/#be-log",
            "text": "be log(msg:  String  val, verbose:  Bool  val)  Public.  Log the given message.  The verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used.  Logs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.",
            "title": "be log()"
        },
        {
            "location": "/ponytest-_TestRunner/#be-long_test",
            "text": "be long_test(timeout:  U64  val)  Public.  The test has been flagged as a long test.",
            "title": "be long_test()"
        },
        {
            "location": "/ponytest-_TestRunner/#be-run",
            "text": "be run()  Public.  Run our test.",
            "title": "be run()"
        },
        {
            "location": "/ponytest-_TestRunner/#be-_timeout",
            "text": "be _timeout()  Private.  Called when the long test timeout expires.",
            "title": "be _timeout()"
        },
        {
            "location": "/ponytest-_TestRunner/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/ponytest-_TestRunner/#fun-_log",
            "text": "fun ref\n _log(msg:  String  val, verbose:  Bool  val):  None  val  Private.  Write the given message direct to our log.",
            "title": "fun _log()"
        },
        {
            "location": "/ponytest-_TestRunner/#fun-_tear_down",
            "text": "fun ref\n _tear_down():  None  val  Private.  Check if the test has finished and tear it down if necessary.",
            "title": "fun _tear_down()"
        },
        {
            "location": "/ponytest-UnitTest/",
            "text": "trait UnitTest\n\n\nIn package \"ponytest\".\n\n\nPublic, default capability ref.\n\n\nEach unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nRun the test.\nRaising an error is interpreted as a test failure.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nReport the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nReport the test name, which is used when printing test results and on the\ncommand line to select tests to run.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nTidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nTear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.",
            "title": "trait UnitTest"
        },
        {
            "location": "/ponytest-UnitTest/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/ponytest-UnitTest/#fun-apply",
            "text": "fun ref\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.  Run the test.\nRaising an error is interpreted as a test failure.",
            "title": "fun apply()"
        },
        {
            "location": "/ponytest-UnitTest/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.  Report the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/ponytest-UnitTest/#fun-name",
            "text": "fun box\n name():  String  val  Public.  Report the test name, which is used when printing test results and on the\ncommand line to select tests to run.",
            "title": "fun name()"
        },
        {
            "location": "/ponytest-UnitTest/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.  Tidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.",
            "title": "fun tear_down()"
        },
        {
            "location": "/ponytest-UnitTest/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.  Tear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.",
            "title": "fun timed_out()"
        },
        {
            "location": "/promises--index/",
            "text": "No package doc string provided for promises.",
            "title": "Package"
        },
        {
            "location": "/promises-Fulfill/",
            "text": "interface Fulfill[A: \nAny\n #share, B: \nAny\n #share]\n\n\nIn package \"promises\".\n\n\nPublic, default capability iso.\n\n\nA function from A to B that is called when a promise is fulfilled.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(value: A #share): B #share ?\n\n\nPublic, may raise an error.",
            "title": "interface Fulfill"
        },
        {
            "location": "/promises-Fulfill/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/promises-Fulfill/#fun-apply",
            "text": "fun ref\n apply(value: A #share): B #share ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/promises-FulfillIdentity/",
            "text": "class FulfillIdentity[A: \nAny\n #share]\n\n\nIn package \"promises\".\n\n\nPublic, default capability iso.\n\n\nAn identity function for fulfilling promises.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(value: A #share): A #share\n\n\nPublic.",
            "title": "class FulfillIdentity"
        },
        {
            "location": "/promises-FulfillIdentity/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/promises-FulfillIdentity/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/promises-FulfillIdentity/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/promises-FulfillIdentity/#fun-apply",
            "text": "fun ref\n apply(value: A #share): A #share  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/promises-_IThen/",
            "text": "interface _IThen[A: \nAny\n #share]\n\n\nIn package \"promises\".\n\n\nPrivate, default capability ref.\n\n\nAn interface representing an abstract Then. This allows for any Then that\naccepts an input of type A, regardless of the output type.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(value: A #share): \nNone\n val\n\n\nPublic.\n\n\nfun reject()\n\n\nfun ref\n reject(): \nNone\n val\n\n\nPublic.",
            "title": "interface _IThen"
        },
        {
            "location": "/promises-_IThen/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/promises-_IThen/#fun-apply",
            "text": "fun ref\n apply(value: A #share):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/promises-_IThen/#fun-reject",
            "text": "fun ref\n reject():  None  val  Public.",
            "title": "fun reject()"
        },
        {
            "location": "/promises-_Pending/",
            "text": "primitive _Pending\n\n\nIn package \"promises\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_Pending\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_Pending\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _Pending"
        },
        {
            "location": "/promises-_Pending/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/promises-_Pending/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/promises-_Pending/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/promises-_Pending/#fun-eq",
            "text": "fun box\n eq(that:  _Pending  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/promises-_Pending/#fun-ne",
            "text": "fun box\n ne(that:  _Pending  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/promises-Promise/",
            "text": "actor Promise[A: \nAny\n #share]\n\n\nIn package \"promises\".\n\n\nPublic, default capability tag.\n\n\nA promise to eventually produce a result of type A. This promise can either\nbe fulfilled or rejected.\n\n\nAny number of promises can be\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nBehaviours\n\n\nbe apply()\n\n\nbe apply(value: A #share)\n\n\nPublic.\n\n\nFulfill the promise.\n\n\nbe _attach()\n\n\nbe _attach(attach: \n_IThen\n[A #share] iso)\n\n\nPrivate.\n\n\nAttaches a step asynchronously. If this promise has already been fulfilled\nor rejected, immediately fulfill or reject the incoming step. Otherwise,\nkeep it in a list.\n\n\nbe reject()\n\n\nbe reject()\n\n\nPublic.\n\n\nReject the promise.\n\n\nFunctions\n\n\nfun next()\n\n\nfun tag\n next[B: \nAny\n #share](fulfill: \nFulfill\n[A #share, B #share] iso, optional rejected: \nReject\n[B #share] iso): \nPromise\n[B #share] tag\n\n\nPublic.\n\n\nChain a promise after this one.\n\n\nWhen this promise is fulfilled, the result of type A is passed to the\nfulfill function, generating in an intermediate result of type B. This\nis then used to fulfill the next promise in the chain.\n\n\nIf there is no fulfill function, or if the fulfill function raises an\nerror, then the next promise in the chain will be rejected.\n\n\nIf this promise is rejected, this step's reject function is called with no\ninput, generating an intermediate result of type B which is used to\nfulfill the next promise in the chain.\n\n\nIf there is no reject function, of if the reject function raises an error,\nthen the next promise in the chain will be rejected.",
            "title": "actor Promise"
        },
        {
            "location": "/promises-Promise/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/promises-Promise/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/promises-Promise/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/promises-Promise/#be-apply",
            "text": "be apply(value: A #share)  Public.  Fulfill the promise.",
            "title": "be apply()"
        },
        {
            "location": "/promises-Promise/#be-_attach",
            "text": "be _attach(attach:  _IThen [A #share] iso)  Private.  Attaches a step asynchronously. If this promise has already been fulfilled\nor rejected, immediately fulfill or reject the incoming step. Otherwise,\nkeep it in a list.",
            "title": "be _attach()"
        },
        {
            "location": "/promises-Promise/#be-reject",
            "text": "be reject()  Public.  Reject the promise.",
            "title": "be reject()"
        },
        {
            "location": "/promises-Promise/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/promises-Promise/#fun-next",
            "text": "fun tag\n next[B:  Any  #share](fulfill:  Fulfill [A #share, B #share] iso, optional rejected:  Reject [B #share] iso):  Promise [B #share] tag  Public.  Chain a promise after this one.  When this promise is fulfilled, the result of type A is passed to the\nfulfill function, generating in an intermediate result of type B. This\nis then used to fulfill the next promise in the chain.  If there is no fulfill function, or if the fulfill function raises an\nerror, then the next promise in the chain will be rejected.  If this promise is rejected, this step's reject function is called with no\ninput, generating an intermediate result of type B which is used to\nfulfill the next promise in the chain.  If there is no reject function, of if the reject function raises an error,\nthen the next promise in the chain will be rejected.",
            "title": "fun next()"
        },
        {
            "location": "/promises-_Reject/",
            "text": "primitive _Reject\n\n\nIn package \"promises\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_Reject\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_Reject\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _Reject"
        },
        {
            "location": "/promises-_Reject/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/promises-_Reject/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/promises-_Reject/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/promises-_Reject/#fun-eq",
            "text": "fun box\n eq(that:  _Reject  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/promises-_Reject/#fun-ne",
            "text": "fun box\n ne(that:  _Reject  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/promises-Reject/",
            "text": "interface Reject[A: \nAny\n #share]\n\n\nIn package \"promises\".\n\n\nPublic, default capability iso.\n\n\nA function on A that is called when a promise is rejected.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(): A #share ?\n\n\nPublic, may raise an error.",
            "title": "interface Reject"
        },
        {
            "location": "/promises-Reject/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/promises-Reject/#fun-apply",
            "text": "fun ref\n apply(): A #share ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/promises-RejectAlways/",
            "text": "class RejectAlways[A: \nAny\n #share]\n\n\nIn package \"promises\".\n\n\nPublic, default capability iso.\n\n\nA reject that always raises an error.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(): A #share ?\n\n\nPublic, may raise an error.",
            "title": "class RejectAlways"
        },
        {
            "location": "/promises-RejectAlways/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/promises-RejectAlways/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/promises-RejectAlways/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/promises-RejectAlways/#fun-apply",
            "text": "fun ref\n apply(): A #share ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/promises-_Then/",
            "text": "class _Then[A: \nAny\n #share, B: \nAny\n #share]\n\n\nIn package \"promises\".\n\n\nPrivate, default capability ref.\n\n\nA step in a promise pipeline.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(fulfill: \nFulfill\n[A #share, B #share] iso, rejected: \nReject\n[B #share] iso)\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(value: A #share): \nNone\n val\n\n\nPublic.\n\n\nCalled with the result of the previous promise when it is fulfilled.\n\n\nfun promise()\n\n\nfun box\n promise(): \nPromise\n[B #share] tag\n\n\nPublic.\n\n\nReturns the next promise in the chain.\n\n\nfun reject()\n\n\nfun ref\n reject(): \nNone\n val\n\n\nPublic.\n\n\nCalled when the previous promise is rejected.",
            "title": "class _Then"
        },
        {
            "location": "/promises-_Then/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/promises-_Then/#new-create",
            "text": "new create(fulfill:  Fulfill [A #share, B #share] iso, rejected:  Reject [B #share] iso)  Public.",
            "title": "new create()"
        },
        {
            "location": "/promises-_Then/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/promises-_Then/#fun-apply",
            "text": "fun ref\n apply(value: A #share):  None  val  Public.  Called with the result of the previous promise when it is fulfilled.",
            "title": "fun apply()"
        },
        {
            "location": "/promises-_Then/#fun-promise",
            "text": "fun box\n promise():  Promise [B #share] tag  Public.  Returns the next promise in the chain.",
            "title": "fun promise()"
        },
        {
            "location": "/promises-_Then/#fun-reject",
            "text": "fun ref\n reject():  None  val  Public.  Called when the previous promise is rejected.",
            "title": "fun reject()"
        },
        {
            "location": "/random--index/",
            "text": "No package doc string provided for random.",
            "title": "Package"
        },
        {
            "location": "/random-Dice/",
            "text": "class Dice\n\n\nIn package \"random\".\n\n\nPublic, default capability ref.\n\n\nA simple dice roller.\n\n\nPublic fields\n\n\n\n\nvar r: \nRandom\n ref\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(from: \nRandom\n ref)\n\n\nPublic.\n\n\nInitialise with a random number generator.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(count: \nU64\n val, sides: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nReturn the sum of \ncount\n rolls of a die with the given number of \nsides\n.\nThe die is numbered from 1 to \nsides\n. For example, count = 2 and\nsides = 6 will return a value between 2 and 12.",
            "title": "class Dice"
        },
        {
            "location": "/random-Dice/#public-fields",
            "text": "var r:  Random  ref",
            "title": "Public fields"
        },
        {
            "location": "/random-Dice/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/random-Dice/#new-create",
            "text": "new create(from:  Random  ref)  Public.  Initialise with a random number generator.",
            "title": "new create()"
        },
        {
            "location": "/random-Dice/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/random-Dice/#fun-apply",
            "text": "fun ref\n apply(count:  U64  val, sides:  U64  val):  U64  val  Public.  Return the sum of  count  rolls of a die with the given number of  sides .\nThe die is numbered from 1 to  sides . For example, count = 2 and\nsides = 6 will return a value between 2 and 12.",
            "title": "fun apply()"
        },
        {
            "location": "/random-MT/",
            "text": "class MT is \nRandom\n ref\n\n\nIn package \"random\".\n\n\nPublic, default capability ref.\n\n\nA Mersenne Twister. This is a non-cryptographic random number generator.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional seed: \nU64\n val)\n\n\nPublic.\n\n\nCreate with the specified seed. Returned values are deterministic for a\ngiven seed.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun tag\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nfun int()\n\n\nfun ref\n int(n: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nfun _lower()\n\n\nfun ref\n _lower(i: \nUSize\n val, x: \nU64\n val): \nU64\n val ?\n\n\nPrivate, may raise an error.\n\n\nfun _m()\n\n\nfun tag\n _m(): \nUSize\n val\n\n\nPrivate.\n\n\nfun _mask()\n\n\nfun tag\n _mask(x: \nU64\n val, y: \nU64\n val): \nU64\n val\n\n\nPrivate.\n\n\nfun _matrix()\n\n\nfun tag\n _matrix(x: \nU64\n val): \nU64\n val\n\n\nPrivate.\n\n\nfun _mix()\n\n\nfun tag\n _mix(x: \nU64\n val, y: \nU64\n val): \nU64\n val\n\n\nPrivate.\n\n\nfun _n()\n\n\nfun tag\n _n(): \nUSize\n val\n\n\nPrivate.\n\n\nfun _n1()\n\n\nfun tag\n _n1(): \nUSize\n val\n\n\nPrivate.\n\n\nfun next()\n\n\nfun ref\n next(): \nU64\n val\n\n\nPublic.\n\n\nA random integer in [0, 2^64 - 1]\n\n\nfun _populate()\n\n\nfun ref\n _populate(): \nNone\n val\n\n\nPrivate.\n\n\nRepopulates the state array.\n\n\nfun real()\n\n\nfun ref\n real(): \nF64\n val\n\n\nPublic.\n\n\nfun u128()\n\n\nfun ref\n u128(): \nU128\n val\n\n\nPublic.\n\n\nfun u16()\n\n\nfun ref\n u16(): \nU16\n val\n\n\nPublic.\n\n\nfun u32()\n\n\nfun ref\n u32(): \nU32\n val\n\n\nPublic.\n\n\nfun u64()\n\n\nfun ref\n u64(): \nU64\n val\n\n\nPublic.\n\n\nfun u8()\n\n\nfun ref\n u8(): \nU8\n val\n\n\nPublic.\n\n\nfun _upper()\n\n\nfun ref\n _upper(i: \nUSize\n val, x: \nU64\n val): \nU64\n val ?\n\n\nPrivate, may raise an error.",
            "title": "class MT"
        },
        {
            "location": "/random-MT/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/random-MT/#new-create",
            "text": "new create(optional seed:  U64  val)  Public.  Create with the specified seed. Returned values are deterministic for a\ngiven seed.",
            "title": "new create()"
        },
        {
            "location": "/random-MT/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/random-MT/#fun-has_next",
            "text": "fun tag\n has_next():  Bool  val  Public.",
            "title": "fun has_next()"
        },
        {
            "location": "/random-MT/#fun-int",
            "text": "fun ref\n int(n:  U64  val):  U64  val  Public.",
            "title": "fun int()"
        },
        {
            "location": "/random-MT/#fun-_lower",
            "text": "fun ref\n _lower(i:  USize  val, x:  U64  val):  U64  val ?  Private, may raise an error.",
            "title": "fun _lower()"
        },
        {
            "location": "/random-MT/#fun-_m",
            "text": "fun tag\n _m():  USize  val  Private.",
            "title": "fun _m()"
        },
        {
            "location": "/random-MT/#fun-_mask",
            "text": "fun tag\n _mask(x:  U64  val, y:  U64  val):  U64  val  Private.",
            "title": "fun _mask()"
        },
        {
            "location": "/random-MT/#fun-_matrix",
            "text": "fun tag\n _matrix(x:  U64  val):  U64  val  Private.",
            "title": "fun _matrix()"
        },
        {
            "location": "/random-MT/#fun-_mix",
            "text": "fun tag\n _mix(x:  U64  val, y:  U64  val):  U64  val  Private.",
            "title": "fun _mix()"
        },
        {
            "location": "/random-MT/#fun-_n",
            "text": "fun tag\n _n():  USize  val  Private.",
            "title": "fun _n()"
        },
        {
            "location": "/random-MT/#fun-_n1",
            "text": "fun tag\n _n1():  USize  val  Private.",
            "title": "fun _n1()"
        },
        {
            "location": "/random-MT/#fun-next",
            "text": "fun ref\n next():  U64  val  Public.  A random integer in [0, 2^64 - 1]",
            "title": "fun next()"
        },
        {
            "location": "/random-MT/#fun-_populate",
            "text": "fun ref\n _populate():  None  val  Private.  Repopulates the state array.",
            "title": "fun _populate()"
        },
        {
            "location": "/random-MT/#fun-real",
            "text": "fun ref\n real():  F64  val  Public.",
            "title": "fun real()"
        },
        {
            "location": "/random-MT/#fun-u128",
            "text": "fun ref\n u128():  U128  val  Public.",
            "title": "fun u128()"
        },
        {
            "location": "/random-MT/#fun-u16",
            "text": "fun ref\n u16():  U16  val  Public.",
            "title": "fun u16()"
        },
        {
            "location": "/random-MT/#fun-u32",
            "text": "fun ref\n u32():  U32  val  Public.",
            "title": "fun u32()"
        },
        {
            "location": "/random-MT/#fun-u64",
            "text": "fun ref\n u64():  U64  val  Public.",
            "title": "fun u64()"
        },
        {
            "location": "/random-MT/#fun-u8",
            "text": "fun ref\n u8():  U8  val  Public.",
            "title": "fun u8()"
        },
        {
            "location": "/random-MT/#fun-_upper",
            "text": "fun ref\n _upper(i:  USize  val, x:  U64  val):  U64  val ?  Private, may raise an error.",
            "title": "fun _upper()"
        },
        {
            "location": "/random-Random/",
            "text": "trait Random\n\n\nIn package \"random\".\n\n\nPublic, default capability ref.\n\n\nNo doc string provided.\n\n\nFunctions\n\n\nfun has_next()\n\n\nfun tag\n has_next(): \nBool\n val\n\n\nPublic.\n\n\nIf used as an iterator, this always has another value.\n\n\nfun int()\n\n\nfun ref\n int(n: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nA random integer in [0, n)\n\n\nfun next()\n\n\nfun ref\n next(): \nU64\n val\n\n\nPublic.\n\n\nA random integer in [0, 2^64)\n\n\nfun real()\n\n\nfun ref\n real(): \nF64\n val\n\n\nPublic.\n\n\nA random number in [0, 1)\n\n\nfun u128()\n\n\nfun ref\n u128(): \nU128\n val\n\n\nPublic.\n\n\nA random integer in [0, 2^128)\n\n\nfun u16()\n\n\nfun ref\n u16(): \nU16\n val\n\n\nPublic.\n\n\nA random integer in [0, 2^16)\n\n\nfun u32()\n\n\nfun ref\n u32(): \nU32\n val\n\n\nPublic.\n\n\nA random integer in [0, 2^32)\n\n\nfun u64()\n\n\nfun ref\n u64(): \nU64\n val\n\n\nPublic.\n\n\nA random integer in [0, 2^64)\n\n\nfun u8()\n\n\nfun ref\n u8(): \nU8\n val\n\n\nPublic.\n\n\nA random integer in [0, 2^8)",
            "title": "trait Random"
        },
        {
            "location": "/random-Random/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/random-Random/#fun-has_next",
            "text": "fun tag\n has_next():  Bool  val  Public.  If used as an iterator, this always has another value.",
            "title": "fun has_next()"
        },
        {
            "location": "/random-Random/#fun-int",
            "text": "fun ref\n int(n:  U64  val):  U64  val  Public.  A random integer in [0, n)",
            "title": "fun int()"
        },
        {
            "location": "/random-Random/#fun-next",
            "text": "fun ref\n next():  U64  val  Public.  A random integer in [0, 2^64)",
            "title": "fun next()"
        },
        {
            "location": "/random-Random/#fun-real",
            "text": "fun ref\n real():  F64  val  Public.  A random number in [0, 1)",
            "title": "fun real()"
        },
        {
            "location": "/random-Random/#fun-u128",
            "text": "fun ref\n u128():  U128  val  Public.  A random integer in [0, 2^128)",
            "title": "fun u128()"
        },
        {
            "location": "/random-Random/#fun-u16",
            "text": "fun ref\n u16():  U16  val  Public.  A random integer in [0, 2^16)",
            "title": "fun u16()"
        },
        {
            "location": "/random-Random/#fun-u32",
            "text": "fun ref\n u32():  U32  val  Public.  A random integer in [0, 2^32)",
            "title": "fun u32()"
        },
        {
            "location": "/random-Random/#fun-u64",
            "text": "fun ref\n u64():  U64  val  Public.  A random integer in [0, 2^64)",
            "title": "fun u64()"
        },
        {
            "location": "/random-Random/#fun-u8",
            "text": "fun ref\n u8():  U8  val  Public.  A random integer in [0, 2^8)",
            "title": "fun u8()"
        },
        {
            "location": "/regex--index/",
            "text": "No package doc string provided for regex.",
            "title": "Package"
        },
        {
            "location": "/regex-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"regex\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/regex-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/regex-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/regex-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/regex-_Match/",
            "text": "primitive _Match\n\n\nIn package \"regex\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_Match\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_Match\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _Match"
        },
        {
            "location": "/regex-_Match/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-_Match/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/regex-_Match/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-_Match/#fun-eq",
            "text": "fun box\n eq(that:  _Match  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/regex-_Match/#fun-ne",
            "text": "fun box\n ne(that:  _Match  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/regex-Match/",
            "text": "class Match\n\n\nIn package \"regex\".\n\n\nPublic, default capability ref.\n\n\nContains match data for a combination of a regex and a subject.\n\n\nConstructors\n\n\nnew _create()\n\n\nnew _create(subject: \nByteSeq\n val, m: \nPointer\n[\n_Match\n val] ref)\n\n\nPrivate.\n\n\nStore a match, a subject, and a size.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply[optional A: (\nByteSeq\n iso \n \nSeq\n[\nU8\n val] iso)](i: \nU32\n val): A iso^ ?\n\n\nPublic, may raise an error.\n\n\nReturns a capture by number. Raises an error if the index is out of bounds.\n\n\nfun dispose()\n\n\nfun ref\n dispose(): \nNone\n val\n\n\nPublic.\n\n\nFree the underlying PCRE2 data.\n\n\nfun end_pos()\n\n\nfun box\n end_pos(): \nUSize\n val\n\n\nPublic.\n\n\nReturns the character position of the last character in the match.\n\n\nfun _final()\n\n\nfun box\n _final(): \nNone\n val\n\n\nPrivate.\n\n\nFree the underlying PCRE2 data.\n\n\nfun find()\n\n\nfun box\n find[optional A: (\nByteSeq\n iso \n \nSeq\n[\nU8\n val] iso)](name: \nString\n box): A iso^ ?\n\n\nPublic, may raise an error.\n\n\nReturns a capture by name. Raises an error if the named capture does not\nexist.\n\n\nfun groups()\n\n\nfun box\n groups(): \nArray\n[\nString\n val] iso^\n\n\nPublic.\n\n\nReturns all of the captured subgroups.  Groups that failed to capture\nanything will contain the empty string.\n\n\nfun size()\n\n\nfun box\n size(): \nU32\n val\n\n\nPublic.\n\n\nReturns the capture size of the match.\n\n\nfun start_pos()\n\n\nfun box\n start_pos(): \nUSize\n val\n\n\nPublic.\n\n\nReturns the character position of the first character in the match.",
            "title": "class Match"
        },
        {
            "location": "/regex-Match/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-Match/#new-_create",
            "text": "new _create(subject:  ByteSeq  val, m:  Pointer [ _Match  val] ref)  Private.  Store a match, a subject, and a size.",
            "title": "new _create()"
        },
        {
            "location": "/regex-Match/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-Match/#fun-apply",
            "text": "fun box\n apply[optional A: ( ByteSeq  iso    Seq [ U8  val] iso)](i:  U32  val): A iso^ ?  Public, may raise an error.  Returns a capture by number. Raises an error if the index is out of bounds.",
            "title": "fun apply()"
        },
        {
            "location": "/regex-Match/#fun-dispose",
            "text": "fun ref\n dispose():  None  val  Public.  Free the underlying PCRE2 data.",
            "title": "fun dispose()"
        },
        {
            "location": "/regex-Match/#fun-end_pos",
            "text": "fun box\n end_pos():  USize  val  Public.  Returns the character position of the last character in the match.",
            "title": "fun end_pos()"
        },
        {
            "location": "/regex-Match/#fun-_final",
            "text": "fun box\n _final():  None  val  Private.  Free the underlying PCRE2 data.",
            "title": "fun _final()"
        },
        {
            "location": "/regex-Match/#fun-find",
            "text": "fun box\n find[optional A: ( ByteSeq  iso    Seq [ U8  val] iso)](name:  String  box): A iso^ ?  Public, may raise an error.  Returns a capture by name. Raises an error if the named capture does not\nexist.",
            "title": "fun find()"
        },
        {
            "location": "/regex-Match/#fun-groups",
            "text": "fun box\n groups():  Array [ String  val] iso^  Public.  Returns all of the captured subgroups.  Groups that failed to capture\nanything will contain the empty string.",
            "title": "fun groups()"
        },
        {
            "location": "/regex-Match/#fun-size",
            "text": "fun box\n size():  U32  val  Public.  Returns the capture size of the match.",
            "title": "fun size()"
        },
        {
            "location": "/regex-Match/#fun-start_pos",
            "text": "fun box\n start_pos():  USize  val  Public.  Returns the character position of the first character in the match.",
            "title": "fun start_pos()"
        },
        {
            "location": "/regex-_PCRE2/",
            "text": "primitive _PCRE2\n\n\nIn package \"regex\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_PCRE2\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_PCRE2\n val): \nBool\n val\n\n\nPublic.\n\n\nfun not_empty()\n\n\nfun box\n not_empty(): \nU32\n val\n\n\nPublic.\n\n\nfun substitute_global()\n\n\nfun box\n substitute_global(): \nU32\n val\n\n\nPublic.\n\n\nfun utf()\n\n\nfun box\n utf(): \nU32\n val\n\n\nPublic.",
            "title": "primitive _PCRE2"
        },
        {
            "location": "/regex-_PCRE2/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-_PCRE2/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/regex-_PCRE2/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-_PCRE2/#fun-eq",
            "text": "fun box\n eq(that:  _PCRE2  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/regex-_PCRE2/#fun-ne",
            "text": "fun box\n ne(that:  _PCRE2  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/regex-_PCRE2/#fun-not_empty",
            "text": "fun box\n not_empty():  U32  val  Public.",
            "title": "fun not_empty()"
        },
        {
            "location": "/regex-_PCRE2/#fun-substitute_global",
            "text": "fun box\n substitute_global():  U32  val  Public.",
            "title": "fun substitute_global()"
        },
        {
            "location": "/regex-_PCRE2/#fun-utf",
            "text": "fun box\n utf():  U32  val  Public.",
            "title": "fun utf()"
        },
        {
            "location": "/regex-_Pattern/",
            "text": "primitive _Pattern\n\n\nIn package \"regex\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_Pattern\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_Pattern\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _Pattern"
        },
        {
            "location": "/regex-_Pattern/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-_Pattern/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/regex-_Pattern/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-_Pattern/#fun-eq",
            "text": "fun box\n eq(that:  _Pattern  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/regex-_Pattern/#fun-ne",
            "text": "fun box\n ne(that:  _Pattern  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/regex-Regex/",
            "text": "class Regex\n\n\nIn package \"regex\".\n\n\nPublic, default capability ref.\n\n\nA perl compatible regular expression. This uses the PCRE2 library, and\nattempts to enable JIT matching whenever possible.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(from: \nByteSeq\n box, optional jit: \nBool\n val) ?\n\n\nPublic, may raise an error.\n\n\nCompile a regular expression. Raises an error for an invalid expression.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(subject: \nByteSeq\n val, optional offset: \nUSize\n val): \nMatch\n ref^ ?\n\n\nPublic, may raise an error.\n\n\nMatch the supplied string, starting at the given offset. Returns a Match\nobject that can give precise match details. Raises an error if there is no\nmatch.\n\n\nTODO: global match\n\n\nfun dispose()\n\n\nfun ref\n dispose(): \nNone\n val\n\n\nPublic.\n\n\nFree the underlying PCRE2 data.\n\n\nfun eq()\n\n\nfun box\n eq(subject: \nByteSeq\n box): \nBool\n val\n\n\nPublic.\n\n\nReturn true on a successful match, false otherwise.\n\n\nfun _final()\n\n\nfun box\n _final(): \nNone\n val\n\n\nPrivate.\n\n\nFree the underlying PCRE2 data.\n\n\nfun index()\n\n\nfun box\n index(name: \nString\n box): \nUSize\n val ?\n\n\nPublic, may raise an error.\n\n\nReturns the index of a named capture. Raises an error if the named capture\ndoes not exist.\n\n\nfun _match()\n\n\nfun box\n _match(subject: \nByteSeq\n box, offset: \nUSize\n val, options: \nU32\n val): \nPointer\n[\n_Match\n val] ref ?\n\n\nPrivate, may raise an error.\n\n\nMatch the subject and keep the capture results. Raises an error if there\nis no match.\n\n\nfun ne()\n\n\nfun box\n ne(subject: \nByteSeq\n box): \nBool\n val\n\n\nPublic.\n\n\nReturn false on a successful match, true otherwise.\n\n\nfun replace()\n\n\nfun box\n replace[optional A: (\nSeq\n[\nU8\n val] iso \n \nByteSeq\n iso)](subject: \nByteSeq\n val, value: \nByteSeq\n box, optional offset: \nUSize\n val, optional global: \nBool\n val): A iso^ ?\n\n\nPublic, may raise an error.\n\n\nPerform a match on the subject, starting at the given offset, and create\na new string using the value as a replacement for what was matched. Raise\nan error if there is no match.\n\n\nfun split()\n\n\nfun box\n split(subject: \nString\n val, optional offset: \nUSize\n val): \nArray\n[\nString\n val] iso^ ?\n\n\nPublic, may raise an error.\n\n\nSplit subject by non-empty occurrences of this pattern, returning a list\nof the substrings.",
            "title": "class Regex"
        },
        {
            "location": "/regex-Regex/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-Regex/#new-create",
            "text": "new create(from:  ByteSeq  box, optional jit:  Bool  val) ?  Public, may raise an error.  Compile a regular expression. Raises an error for an invalid expression.",
            "title": "new create()"
        },
        {
            "location": "/regex-Regex/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-Regex/#fun-apply",
            "text": "fun box\n apply(subject:  ByteSeq  val, optional offset:  USize  val):  Match  ref^ ?  Public, may raise an error.  Match the supplied string, starting at the given offset. Returns a Match\nobject that can give precise match details. Raises an error if there is no\nmatch.  TODO: global match",
            "title": "fun apply()"
        },
        {
            "location": "/regex-Regex/#fun-dispose",
            "text": "fun ref\n dispose():  None  val  Public.  Free the underlying PCRE2 data.",
            "title": "fun dispose()"
        },
        {
            "location": "/regex-Regex/#fun-eq",
            "text": "fun box\n eq(subject:  ByteSeq  box):  Bool  val  Public.  Return true on a successful match, false otherwise.",
            "title": "fun eq()"
        },
        {
            "location": "/regex-Regex/#fun-_final",
            "text": "fun box\n _final():  None  val  Private.  Free the underlying PCRE2 data.",
            "title": "fun _final()"
        },
        {
            "location": "/regex-Regex/#fun-index",
            "text": "fun box\n index(name:  String  box):  USize  val ?  Public, may raise an error.  Returns the index of a named capture. Raises an error if the named capture\ndoes not exist.",
            "title": "fun index()"
        },
        {
            "location": "/regex-Regex/#fun-_match",
            "text": "fun box\n _match(subject:  ByteSeq  box, offset:  USize  val, options:  U32  val):  Pointer [ _Match  val] ref ?  Private, may raise an error.  Match the subject and keep the capture results. Raises an error if there\nis no match.",
            "title": "fun _match()"
        },
        {
            "location": "/regex-Regex/#fun-ne",
            "text": "fun box\n ne(subject:  ByteSeq  box):  Bool  val  Public.  Return false on a successful match, true otherwise.",
            "title": "fun ne()"
        },
        {
            "location": "/regex-Regex/#fun-replace",
            "text": "fun box\n replace[optional A: ( Seq [ U8  val] iso    ByteSeq  iso)](subject:  ByteSeq  val, value:  ByteSeq  box, optional offset:  USize  val, optional global:  Bool  val): A iso^ ?  Public, may raise an error.  Perform a match on the subject, starting at the given offset, and create\na new string using the value as a replacement for what was matched. Raise\nan error if there is no match.",
            "title": "fun replace()"
        },
        {
            "location": "/regex-Regex/#fun-split",
            "text": "fun box\n split(subject:  String  val, optional offset:  USize  val):  Array [ String  val] iso^ ?  Public, may raise an error.  Split subject by non-empty occurrences of this pattern, returning a list\nof the substrings.",
            "title": "fun split()"
        },
        {
            "location": "/regex-_TestApply/",
            "text": "class _TestApply is \nUnitTest\n ref\n\n\nIn package \"regex\".\n\n\nPrivate, default capability iso.\n\n\nTests basic compilation and matching.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestApply"
        },
        {
            "location": "/regex-_TestApply/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-_TestApply/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/regex-_TestApply/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-_TestApply/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/regex-_TestApply/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/regex-_TestApply/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/regex-_TestApply/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/regex-_TestApply/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/regex-_TestEq/",
            "text": "class _TestEq is \nUnitTest\n ref\n\n\nIn package \"regex\".\n\n\nPrivate, default capability iso.\n\n\nTests eq operator.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestEq"
        },
        {
            "location": "/regex-_TestEq/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-_TestEq/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/regex-_TestEq/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-_TestEq/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/regex-_TestEq/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/regex-_TestEq/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/regex-_TestEq/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/regex-_TestEq/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/regex-_TestError/",
            "text": "class _TestError is \nUnitTest\n ref\n\n\nIn package \"regex\".\n\n\nPrivate, default capability iso.\n\n\nTests basic compilation failure.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestError"
        },
        {
            "location": "/regex-_TestError/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-_TestError/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/regex-_TestError/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-_TestError/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/regex-_TestError/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/regex-_TestError/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/regex-_TestError/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/regex-_TestError/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/regex-_TestGroups/",
            "text": "class _TestGroups is \nUnitTest\n ref\n\n\nIn package \"regex\".\n\n\nPrivate, default capability iso.\n\n\nTests basic compilation and matching.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestGroups"
        },
        {
            "location": "/regex-_TestGroups/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-_TestGroups/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/regex-_TestGroups/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-_TestGroups/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/regex-_TestGroups/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/regex-_TestGroups/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/regex-_TestGroups/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/regex-_TestGroups/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/regex-_TestSplit/",
            "text": "class _TestSplit is \nUnitTest\n ref\n\n\nIn package \"regex\".\n\n\nPrivate, default capability iso.\n\n\nTests split.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val ?\n\n\nPublic, may raise an error.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestSplit"
        },
        {
            "location": "/regex-_TestSplit/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/regex-_TestSplit/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/regex-_TestSplit/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/regex-_TestSplit/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val ?  Public, may raise an error.",
            "title": "fun apply()"
        },
        {
            "location": "/regex-_TestSplit/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/regex-_TestSplit/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/regex-_TestSplit/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/regex-_TestSplit/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/signals--index/",
            "text": "No package doc string provided for signals.",
            "title": "Package"
        },
        {
            "location": "/signals-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"signals\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/signals-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/signals-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/signals-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/signals-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/signals-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/signals-Sig/",
            "text": "primitive Sig\n\n\nIn package \"signals\".\n\n\nPublic, default capability val.\n\n\nDefine the portable signal numbers. Other signals can be used, but they are\nnot guaranteed to be portable.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun abrt()\n\n\nfun box\n abrt(): \nU32\n val\n\n\nPublic.\n\n\nfun alrm()\n\n\nfun box\n alrm(): \nU32\n val\n\n\nPublic.\n\n\nfun bus()\n\n\nfun box\n bus(): \nI32\n val\n\n\nPublic.\n\n\nfun chld()\n\n\nfun box\n chld(): \nI32\n val\n\n\nPublic.\n\n\nfun cont()\n\n\nfun box\n cont(): \nI32\n val\n\n\nPublic.\n\n\nfun emt()\n\n\nfun box\n emt(): \nI32\n val\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nSig\n val): \nBool\n val\n\n\nPublic.\n\n\nfun fpe()\n\n\nfun box\n fpe(): \nI32\n val\n\n\nPublic.\n\n\nfun hup()\n\n\nfun box\n hup(): \nU32\n val\n\n\nPublic.\n\n\nfun ill()\n\n\nfun box\n ill(): \nI32\n val\n\n\nPublic.\n\n\nfun info()\n\n\nfun box\n info(): \nI32\n val\n\n\nPublic.\n\n\nfun int()\n\n\nfun box\n int(): \nU32\n val\n\n\nPublic.\n\n\nfun io()\n\n\nfun box\n io(): \nI32\n val\n\n\nPublic.\n\n\nfun kill()\n\n\nfun box\n kill(): \nU32\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nSig\n val): \nBool\n val\n\n\nPublic.\n\n\nfun pipe()\n\n\nfun box\n pipe(): \nI32\n val\n\n\nPublic.\n\n\nfun prof()\n\n\nfun box\n prof(): \nI32\n val\n\n\nPublic.\n\n\nfun pwr()\n\n\nfun box\n pwr(): \nI32\n val\n\n\nPublic.\n\n\nfun quit()\n\n\nfun box\n quit(): \nU32\n val\n\n\nPublic.\n\n\nfun rt()\n\n\nfun box\n rt(n: \nU32\n val): \nI32\n val ?\n\n\nPublic, may raise an error.\n\n\nfun segv()\n\n\nfun box\n segv(): \nI32\n val\n\n\nPublic.\n\n\nfun stkflt()\n\n\nfun box\n stkflt(): \nI32\n val\n\n\nPublic.\n\n\nfun stop()\n\n\nfun box\n stop(): \nI32\n val\n\n\nPublic.\n\n\nfun sys()\n\n\nfun box\n sys(): \nI32\n val\n\n\nPublic.\n\n\nfun term()\n\n\nfun box\n term(): \nU32\n val\n\n\nPublic.\n\n\nfun trap()\n\n\nfun box\n trap(): \nI32\n val\n\n\nPublic.\n\n\nfun tstp()\n\n\nfun box\n tstp(): \nI32\n val\n\n\nPublic.\n\n\nfun ttin()\n\n\nfun box\n ttin(): \nI32\n val\n\n\nPublic.\n\n\nfun ttou()\n\n\nfun box\n ttou(): \nI32\n val\n\n\nPublic.\n\n\nfun urg()\n\n\nfun box\n urg(): \nI32\n val\n\n\nPublic.\n\n\nfun usr1()\n\n\nfun box\n usr1(): \nI32\n val\n\n\nPublic.\n\n\nfun usr2()\n\n\nfun box\n usr2(): \nI32\n val\n\n\nPublic.\n\n\nfun vtalrm()\n\n\nfun box\n vtalrm(): \nI32\n val\n\n\nPublic.\n\n\nfun winch()\n\n\nfun box\n winch(): \nI32\n val\n\n\nPublic.\n\n\nfun xcpu()\n\n\nfun box\n xcpu(): \nI32\n val\n\n\nPublic.\n\n\nfun xfsz()\n\n\nfun box\n xfsz(): \nI32\n val\n\n\nPublic.",
            "title": "primitive Sig"
        },
        {
            "location": "/signals-Sig/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/signals-Sig/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/signals-Sig/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/signals-Sig/#fun-abrt",
            "text": "fun box\n abrt():  U32  val  Public.",
            "title": "fun abrt()"
        },
        {
            "location": "/signals-Sig/#fun-alrm",
            "text": "fun box\n alrm():  U32  val  Public.",
            "title": "fun alrm()"
        },
        {
            "location": "/signals-Sig/#fun-bus",
            "text": "fun box\n bus():  I32  val  Public.",
            "title": "fun bus()"
        },
        {
            "location": "/signals-Sig/#fun-chld",
            "text": "fun box\n chld():  I32  val  Public.",
            "title": "fun chld()"
        },
        {
            "location": "/signals-Sig/#fun-cont",
            "text": "fun box\n cont():  I32  val  Public.",
            "title": "fun cont()"
        },
        {
            "location": "/signals-Sig/#fun-emt",
            "text": "fun box\n emt():  I32  val  Public.",
            "title": "fun emt()"
        },
        {
            "location": "/signals-Sig/#fun-eq",
            "text": "fun box\n eq(that:  Sig  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/signals-Sig/#fun-fpe",
            "text": "fun box\n fpe():  I32  val  Public.",
            "title": "fun fpe()"
        },
        {
            "location": "/signals-Sig/#fun-hup",
            "text": "fun box\n hup():  U32  val  Public.",
            "title": "fun hup()"
        },
        {
            "location": "/signals-Sig/#fun-ill",
            "text": "fun box\n ill():  I32  val  Public.",
            "title": "fun ill()"
        },
        {
            "location": "/signals-Sig/#fun-info",
            "text": "fun box\n info():  I32  val  Public.",
            "title": "fun info()"
        },
        {
            "location": "/signals-Sig/#fun-int",
            "text": "fun box\n int():  U32  val  Public.",
            "title": "fun int()"
        },
        {
            "location": "/signals-Sig/#fun-io",
            "text": "fun box\n io():  I32  val  Public.",
            "title": "fun io()"
        },
        {
            "location": "/signals-Sig/#fun-kill",
            "text": "fun box\n kill():  U32  val  Public.",
            "title": "fun kill()"
        },
        {
            "location": "/signals-Sig/#fun-ne",
            "text": "fun box\n ne(that:  Sig  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/signals-Sig/#fun-pipe",
            "text": "fun box\n pipe():  I32  val  Public.",
            "title": "fun pipe()"
        },
        {
            "location": "/signals-Sig/#fun-prof",
            "text": "fun box\n prof():  I32  val  Public.",
            "title": "fun prof()"
        },
        {
            "location": "/signals-Sig/#fun-pwr",
            "text": "fun box\n pwr():  I32  val  Public.",
            "title": "fun pwr()"
        },
        {
            "location": "/signals-Sig/#fun-quit",
            "text": "fun box\n quit():  U32  val  Public.",
            "title": "fun quit()"
        },
        {
            "location": "/signals-Sig/#fun-rt",
            "text": "fun box\n rt(n:  U32  val):  I32  val ?  Public, may raise an error.",
            "title": "fun rt()"
        },
        {
            "location": "/signals-Sig/#fun-segv",
            "text": "fun box\n segv():  I32  val  Public.",
            "title": "fun segv()"
        },
        {
            "location": "/signals-Sig/#fun-stkflt",
            "text": "fun box\n stkflt():  I32  val  Public.",
            "title": "fun stkflt()"
        },
        {
            "location": "/signals-Sig/#fun-stop",
            "text": "fun box\n stop():  I32  val  Public.",
            "title": "fun stop()"
        },
        {
            "location": "/signals-Sig/#fun-sys",
            "text": "fun box\n sys():  I32  val  Public.",
            "title": "fun sys()"
        },
        {
            "location": "/signals-Sig/#fun-term",
            "text": "fun box\n term():  U32  val  Public.",
            "title": "fun term()"
        },
        {
            "location": "/signals-Sig/#fun-trap",
            "text": "fun box\n trap():  I32  val  Public.",
            "title": "fun trap()"
        },
        {
            "location": "/signals-Sig/#fun-tstp",
            "text": "fun box\n tstp():  I32  val  Public.",
            "title": "fun tstp()"
        },
        {
            "location": "/signals-Sig/#fun-ttin",
            "text": "fun box\n ttin():  I32  val  Public.",
            "title": "fun ttin()"
        },
        {
            "location": "/signals-Sig/#fun-ttou",
            "text": "fun box\n ttou():  I32  val  Public.",
            "title": "fun ttou()"
        },
        {
            "location": "/signals-Sig/#fun-urg",
            "text": "fun box\n urg():  I32  val  Public.",
            "title": "fun urg()"
        },
        {
            "location": "/signals-Sig/#fun-usr1",
            "text": "fun box\n usr1():  I32  val  Public.",
            "title": "fun usr1()"
        },
        {
            "location": "/signals-Sig/#fun-usr2",
            "text": "fun box\n usr2():  I32  val  Public.",
            "title": "fun usr2()"
        },
        {
            "location": "/signals-Sig/#fun-vtalrm",
            "text": "fun box\n vtalrm():  I32  val  Public.",
            "title": "fun vtalrm()"
        },
        {
            "location": "/signals-Sig/#fun-winch",
            "text": "fun box\n winch():  I32  val  Public.",
            "title": "fun winch()"
        },
        {
            "location": "/signals-Sig/#fun-xcpu",
            "text": "fun box\n xcpu():  I32  val  Public.",
            "title": "fun xcpu()"
        },
        {
            "location": "/signals-Sig/#fun-xfsz",
            "text": "fun box\n xfsz():  I32  val  Public.",
            "title": "fun xfsz()"
        },
        {
            "location": "/signals-SignalHandler/",
            "text": "actor SignalHandler\n\n\nIn package \"signals\".\n\n\nPublic, default capability tag.\n\n\nListen for a specific signal.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(notify: \nSignalNotify\n iso, sig: \nU32\n val)\n\n\nPublic.\n\n\nCreate a signal handler.\n\n\nBehaviours\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.\n\n\nDispose of the signal handler.\n\n\nbe _event_notify()\n\n\nbe _event_notify(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nPrivate.\n\n\nCalled when the signal is received, or when the AsioEventID can be\ndestroyed.\n\n\nbe raise()\n\n\nbe raise()\n\n\nPublic.\n\n\nRaise the signal.\n\n\nFunctions\n\n\nfun _dispose()\n\n\nfun ref\n _dispose(): \nNone\n val\n\n\nPrivate.\n\n\nDispose of the AsioEventID.",
            "title": "actor SignalHandler"
        },
        {
            "location": "/signals-SignalHandler/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/signals-SignalHandler/#new-create",
            "text": "new create(notify:  SignalNotify  iso, sig:  U32  val)  Public.  Create a signal handler.",
            "title": "new create()"
        },
        {
            "location": "/signals-SignalHandler/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/signals-SignalHandler/#be-dispose",
            "text": "be dispose()  Public.  Dispose of the signal handler.",
            "title": "be dispose()"
        },
        {
            "location": "/signals-SignalHandler/#be-_event_notify",
            "text": "be _event_notify(event:  Pointer [ AsioEvent  val] tag, flags:  U32  val, arg:  U32  val)  Private.  Called when the signal is received, or when the AsioEventID can be\ndestroyed.",
            "title": "be _event_notify()"
        },
        {
            "location": "/signals-SignalHandler/#be-raise",
            "text": "be raise()  Public.  Raise the signal.",
            "title": "be raise()"
        },
        {
            "location": "/signals-SignalHandler/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/signals-SignalHandler/#fun-_dispose",
            "text": "fun ref\n _dispose():  None  val  Private.  Dispose of the AsioEventID.",
            "title": "fun _dispose()"
        },
        {
            "location": "/signals-SignalNotify/",
            "text": "interface SignalNotify\n\n\nIn package \"signals\".\n\n\nPublic, default capability ref.\n\n\nNotifications for a signal.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(count: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nCalled with the the number of times the signal has fired since this was\nlast called. Return false to stop listening for the signal.\n\n\nfun dispose()\n\n\nfun ref\n dispose(): \nNone\n val\n\n\nPublic.\n\n\nCalled if the signal is disposed. This is also called if the notifier\nreturns false.",
            "title": "interface SignalNotify"
        },
        {
            "location": "/signals-SignalNotify/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/signals-SignalNotify/#fun-apply",
            "text": "fun ref\n apply(count:  U32  val):  Bool  val  Public.  Called with the the number of times the signal has fired since this was\nlast called. Return false to stop listening for the signal.",
            "title": "fun apply()"
        },
        {
            "location": "/signals-SignalNotify/#fun-dispose",
            "text": "fun ref\n dispose():  None  val  Public.  Called if the signal is disposed. This is also called if the notifier\nreturns false.",
            "title": "fun dispose()"
        },
        {
            "location": "/signals-SignalRaise/",
            "text": "primitive SignalRaise\n\n\nIn package \"signals\".\n\n\nPublic, default capability val.\n\n\nRaise a signal.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(sig: \nU32\n val): \nNone\n val\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nSignalRaise\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nSignalRaise\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive SignalRaise"
        },
        {
            "location": "/signals-SignalRaise/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/signals-SignalRaise/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/signals-SignalRaise/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/signals-SignalRaise/#fun-apply",
            "text": "fun box\n apply(sig:  U32  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/signals-SignalRaise/#fun-eq",
            "text": "fun box\n eq(that:  SignalRaise  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/signals-SignalRaise/#fun-ne",
            "text": "fun box\n ne(that:  SignalRaise  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/signals-_TestSighupNotify/",
            "text": "class _TestSighupNotify is \nSignalNotify\n ref\n\n\nIn package \"signals\".\n\n\nPrivate, default capability ref.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(h: \nTestHelper\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(count: \nU32\n val): \nBool\n val\n\n\nPublic.\n\n\nfun dispose()\n\n\nfun ref\n dispose(): \nNone\n val\n\n\nPublic.",
            "title": "class _TestSighupNotify"
        },
        {
            "location": "/signals-_TestSighupNotify/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/signals-_TestSighupNotify/#new-create",
            "text": "new create(h:  TestHelper  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/signals-_TestSighupNotify/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/signals-_TestSighupNotify/#fun-apply",
            "text": "fun ref\n apply(count:  U32  val):  Bool  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/signals-_TestSighupNotify/#fun-dispose",
            "text": "fun ref\n dispose():  None  val  Public.",
            "title": "fun dispose()"
        },
        {
            "location": "/signals-_TestSignalINT/",
            "text": "class _TestSignalINT is \nUnitTest\n ref\n\n\nIn package \"signals\".\n\n\nPrivate, default capability iso.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timedout()\n\n\nfun box\n timedout(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestSignalINT"
        },
        {
            "location": "/signals-_TestSignalINT/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/signals-_TestSignalINT/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/signals-_TestSignalINT/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/signals-_TestSignalINT/#fun-apply",
            "text": "fun ref\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/signals-_TestSignalINT/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/signals-_TestSignalINT/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/signals-_TestSignalINT/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/signals-_TestSignalINT/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/signals-_TestSignalINT/#fun-timedout",
            "text": "fun box\n timedout(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timedout()"
        },
        {
            "location": "/strings--index/",
            "text": "No package doc string provided for strings.",
            "title": "Package"
        },
        {
            "location": "/strings-CommonPrefix/",
            "text": "primitive CommonPrefix\n\n\nIn package \"strings\".\n\n\nPublic, default capability val.\n\n\nCreates a string that is the common prefix of the supplied strings, possibly empty.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(data: \nReadSeq\n[\nStringable\n[\nFormatDefault\n val, \nPrefixDefault\n val] box] box): \nString\n iso^\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nCommonPrefix\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nCommonPrefix\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive CommonPrefix"
        },
        {
            "location": "/strings-CommonPrefix/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/strings-CommonPrefix/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/strings-CommonPrefix/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/strings-CommonPrefix/#fun-apply",
            "text": "fun box\n apply(data:  ReadSeq [ Stringable [ FormatDefault  val,  PrefixDefault  val] box] box):  String  iso^  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/strings-CommonPrefix/#fun-eq",
            "text": "fun box\n eq(that:  CommonPrefix  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/strings-CommonPrefix/#fun-ne",
            "text": "fun box\n ne(that:  CommonPrefix  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/strings-Main/",
            "text": "actor Main is \nTestList\n ref\n\n\nIn package \"strings\".\n\n\nPublic, default capability tag.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(env: \nEnv\n val)\n\n\nPublic.\n\n\nnew make()\n\n\nnew make()\n\n\nPublic.\n\n\nFunctions\n\n\nfun tests()\n\n\nfun tag\n tests(test: \nPonyTest\n tag): \nNone\n val\n\n\nPublic.",
            "title": "actor Main"
        },
        {
            "location": "/strings-Main/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/strings-Main/#new-create",
            "text": "new create(env:  Env  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/strings-Main/#new-make",
            "text": "new make()  Public.",
            "title": "new make()"
        },
        {
            "location": "/strings-Main/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/strings-Main/#fun-tests",
            "text": "fun tag\n tests(test:  PonyTest  tag):  None  val  Public.",
            "title": "fun tests()"
        },
        {
            "location": "/strings-_TestStringsCommonPrefix/",
            "text": "class _TestStringsCommonPrefix is \nUnitTest\n ref\n\n\nIn package \"strings\".\n\n\nPrivate, default capability iso.\n\n\nTest strings/CommonPrefix\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun exclusion_group()\n\n\nfun box\n exclusion_group(): \nString\n val\n\n\nPublic.\n\n\nfun name()\n\n\nfun box\n name(): \nString\n val\n\n\nPublic.\n\n\nfun tear_down()\n\n\nfun ref\n tear_down(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.\n\n\nfun timed_out()\n\n\nfun ref\n timed_out(h: \nTestHelper\n val): \nNone\n val\n\n\nPublic.",
            "title": "class _TestStringsCommonPrefix"
        },
        {
            "location": "/strings-_TestStringsCommonPrefix/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/strings-_TestStringsCommonPrefix/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/strings-_TestStringsCommonPrefix/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/strings-_TestStringsCommonPrefix/#fun-apply",
            "text": "fun box\n apply(h:  TestHelper  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/strings-_TestStringsCommonPrefix/#fun-exclusion_group",
            "text": "fun box\n exclusion_group():  String  val  Public.",
            "title": "fun exclusion_group()"
        },
        {
            "location": "/strings-_TestStringsCommonPrefix/#fun-name",
            "text": "fun box\n name():  String  val  Public.",
            "title": "fun name()"
        },
        {
            "location": "/strings-_TestStringsCommonPrefix/#fun-tear_down",
            "text": "fun ref\n tear_down(h:  TestHelper  val):  None  val  Public.",
            "title": "fun tear_down()"
        },
        {
            "location": "/strings-_TestStringsCommonPrefix/#fun-timed_out",
            "text": "fun ref\n timed_out(h:  TestHelper  val):  None  val  Public.",
            "title": "fun timed_out()"
        },
        {
            "location": "/term--index/",
            "text": "No package doc string provided for term.",
            "title": "Package"
        },
        {
            "location": "/term-ANSI/",
            "text": "primitive ANSI\n\n\nIn package \"term\".\n\n\nPublic, default capability val.\n\n\nThese strings can be embedded in text when writing to a StdStream to create\na text-based UI.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun black()\n\n\nfun box\n black(): \nString\n val\n\n\nPublic.\n\n\nBlack text.\n\n\nfun black_bg()\n\n\nfun box\n black_bg(): \nString\n val\n\n\nPublic.\n\n\nBlack background.\n\n\nfun blink()\n\n\nfun box\n blink(optional state: \nBool\n val): \nString\n val\n\n\nPublic.\n\n\nBlinking text. Does nothing on Windows.\n\n\nfun blue()\n\n\nfun box\n blue(): \nString\n val\n\n\nPublic.\n\n\nBlue text.\n\n\nfun blue_bg()\n\n\nfun box\n blue_bg(): \nString\n val\n\n\nPublic.\n\n\nBlue background.\n\n\nfun bold()\n\n\nfun box\n bold(optional state: \nBool\n val): \nString\n val\n\n\nPublic.\n\n\nBold text. Does nothing on Windows.\n\n\nfun bright_blue()\n\n\nfun box\n bright_blue(): \nString\n val\n\n\nPublic.\n\n\nBright blue text.\n\n\nfun bright_blue_bg()\n\n\nfun box\n bright_blue_bg(): \nString\n val\n\n\nPublic.\n\n\nBright blue background.\n\n\nfun bright_cyan()\n\n\nfun box\n bright_cyan(): \nString\n val\n\n\nPublic.\n\n\nBright cyan text.\n\n\nfun bright_cyan_bg()\n\n\nfun box\n bright_cyan_bg(): \nString\n val\n\n\nPublic.\n\n\nBright cyan background.\n\n\nfun bright_green()\n\n\nfun box\n bright_green(): \nString\n val\n\n\nPublic.\n\n\nBright green text.\n\n\nfun bright_green_bg()\n\n\nfun box\n bright_green_bg(): \nString\n val\n\n\nPublic.\n\n\nBright green background.\n\n\nfun bright_grey()\n\n\nfun box\n bright_grey(): \nString\n val\n\n\nPublic.\n\n\nBright grey text.\n\n\nfun bright_grey_bg()\n\n\nfun box\n bright_grey_bg(): \nString\n val\n\n\nPublic.\n\n\nBright grey background.\n\n\nfun bright_magenta()\n\n\nfun box\n bright_magenta(): \nString\n val\n\n\nPublic.\n\n\nBright magenta text.\n\n\nfun bright_magenta_bg()\n\n\nfun box\n bright_magenta_bg(): \nString\n val\n\n\nPublic.\n\n\nBright magenta background.\n\n\nfun bright_red()\n\n\nfun box\n bright_red(): \nString\n val\n\n\nPublic.\n\n\nBright red text.\n\n\nfun bright_red_bg()\n\n\nfun box\n bright_red_bg(): \nString\n val\n\n\nPublic.\n\n\nBright red background.\n\n\nfun bright_yellow()\n\n\nfun box\n bright_yellow(): \nString\n val\n\n\nPublic.\n\n\nBright yellow text.\n\n\nfun bright_yellow_bg()\n\n\nfun box\n bright_yellow_bg(): \nString\n val\n\n\nPublic.\n\n\nBright yellow background.\n\n\nfun clear()\n\n\nfun box\n clear(): \nString\n val\n\n\nPublic.\n\n\nClear the screen and move the cursor to the top left corner.\n\n\nfun cursor()\n\n\nfun box\n cursor(optional x: \nU32\n val, optional y: \nU32\n val): \nString\n val\n\n\nPublic.\n\n\nMove the cursor to line y, column x. 0 is the same as 1. This indexes from\nthe top left corner of the screen.\n\n\nfun cyan()\n\n\nfun box\n cyan(): \nString\n val\n\n\nPublic.\n\n\nCyan text.\n\n\nfun cyan_bg()\n\n\nfun box\n cyan_bg(): \nString\n val\n\n\nPublic.\n\n\nCyan background.\n\n\nfun down()\n\n\nfun box\n down(optional n: \nU32\n val): \nString\n val\n\n\nPublic.\n\n\nMove the cursor down n lines. 0 is the same as 1.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nANSI\n val): \nBool\n val\n\n\nPublic.\n\n\nfun erase()\n\n\nfun box\n erase(): \nString\n val\n\n\nPublic.\n\n\nErases everything to the left of the cursor on the line the cursor is on.\n\n\nfun green()\n\n\nfun box\n green(): \nString\n val\n\n\nPublic.\n\n\nGreen text.\n\n\nfun green_bg()\n\n\nfun box\n green_bg(): \nString\n val\n\n\nPublic.\n\n\nGreen background.\n\n\nfun grey()\n\n\nfun box\n grey(): \nString\n val\n\n\nPublic.\n\n\nGrey text.\n\n\nfun grey_bg()\n\n\nfun box\n grey_bg(): \nString\n val\n\n\nPublic.\n\n\nGrey background.\n\n\nfun left()\n\n\nfun box\n left(optional n: \nU32\n val): \nString\n val\n\n\nPublic.\n\n\nMove the cursor left n columns. 0 is the same as 1.\n\n\nfun magenta()\n\n\nfun box\n magenta(): \nString\n val\n\n\nPublic.\n\n\nMagenta text.\n\n\nfun magenta_bg()\n\n\nfun box\n magenta_bg(): \nString\n val\n\n\nPublic.\n\n\nMagenta background.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nANSI\n val): \nBool\n val\n\n\nPublic.\n\n\nfun red()\n\n\nfun box\n red(): \nString\n val\n\n\nPublic.\n\n\nRed text.\n\n\nfun red_bg()\n\n\nfun box\n red_bg(): \nString\n val\n\n\nPublic.\n\n\nRed background.\n\n\nfun reset()\n\n\nfun box\n reset(): \nString\n val\n\n\nPublic.\n\n\nResets all colours and text styles to the default.\n\n\nfun reverse()\n\n\nfun box\n reverse(optional state: \nBool\n val): \nString\n val\n\n\nPublic.\n\n\nSwap foreground and background colour.\n\n\nfun right()\n\n\nfun box\n right(optional n: \nU32\n val): \nString\n val\n\n\nPublic.\n\n\nMove the cursor right n columns. 0 is the same as 1.\n\n\nfun underline()\n\n\nfun box\n underline(optional state: \nBool\n val): \nString\n val\n\n\nPublic.\n\n\nUnderlined text. Does nothing on Windows.\n\n\nfun up()\n\n\nfun box\n up(optional n: \nU32\n val): \nString\n val\n\n\nPublic.\n\n\nMove the cursor up n lines. 0 is the same as 1.\n\n\nfun white()\n\n\nfun box\n white(): \nString\n val\n\n\nPublic.\n\n\nWhite text.\n\n\nfun white_bg()\n\n\nfun box\n white_bg(): \nString\n val\n\n\nPublic.\n\n\nWhite background.\n\n\nfun yellow()\n\n\nfun box\n yellow(): \nString\n val\n\n\nPublic.\n\n\nYellow text.\n\n\nfun yellow_bg()\n\n\nfun box\n yellow_bg(): \nString\n val\n\n\nPublic.\n\n\nYellow background.",
            "title": "primitive ANSI"
        },
        {
            "location": "/term-ANSI/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-ANSI/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/term-ANSI/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/term-ANSI/#fun-black",
            "text": "fun box\n black():  String  val  Public.  Black text.",
            "title": "fun black()"
        },
        {
            "location": "/term-ANSI/#fun-black_bg",
            "text": "fun box\n black_bg():  String  val  Public.  Black background.",
            "title": "fun black_bg()"
        },
        {
            "location": "/term-ANSI/#fun-blink",
            "text": "fun box\n blink(optional state:  Bool  val):  String  val  Public.  Blinking text. Does nothing on Windows.",
            "title": "fun blink()"
        },
        {
            "location": "/term-ANSI/#fun-blue",
            "text": "fun box\n blue():  String  val  Public.  Blue text.",
            "title": "fun blue()"
        },
        {
            "location": "/term-ANSI/#fun-blue_bg",
            "text": "fun box\n blue_bg():  String  val  Public.  Blue background.",
            "title": "fun blue_bg()"
        },
        {
            "location": "/term-ANSI/#fun-bold",
            "text": "fun box\n bold(optional state:  Bool  val):  String  val  Public.  Bold text. Does nothing on Windows.",
            "title": "fun bold()"
        },
        {
            "location": "/term-ANSI/#fun-bright_blue",
            "text": "fun box\n bright_blue():  String  val  Public.  Bright blue text.",
            "title": "fun bright_blue()"
        },
        {
            "location": "/term-ANSI/#fun-bright_blue_bg",
            "text": "fun box\n bright_blue_bg():  String  val  Public.  Bright blue background.",
            "title": "fun bright_blue_bg()"
        },
        {
            "location": "/term-ANSI/#fun-bright_cyan",
            "text": "fun box\n bright_cyan():  String  val  Public.  Bright cyan text.",
            "title": "fun bright_cyan()"
        },
        {
            "location": "/term-ANSI/#fun-bright_cyan_bg",
            "text": "fun box\n bright_cyan_bg():  String  val  Public.  Bright cyan background.",
            "title": "fun bright_cyan_bg()"
        },
        {
            "location": "/term-ANSI/#fun-bright_green",
            "text": "fun box\n bright_green():  String  val  Public.  Bright green text.",
            "title": "fun bright_green()"
        },
        {
            "location": "/term-ANSI/#fun-bright_green_bg",
            "text": "fun box\n bright_green_bg():  String  val  Public.  Bright green background.",
            "title": "fun bright_green_bg()"
        },
        {
            "location": "/term-ANSI/#fun-bright_grey",
            "text": "fun box\n bright_grey():  String  val  Public.  Bright grey text.",
            "title": "fun bright_grey()"
        },
        {
            "location": "/term-ANSI/#fun-bright_grey_bg",
            "text": "fun box\n bright_grey_bg():  String  val  Public.  Bright grey background.",
            "title": "fun bright_grey_bg()"
        },
        {
            "location": "/term-ANSI/#fun-bright_magenta",
            "text": "fun box\n bright_magenta():  String  val  Public.  Bright magenta text.",
            "title": "fun bright_magenta()"
        },
        {
            "location": "/term-ANSI/#fun-bright_magenta_bg",
            "text": "fun box\n bright_magenta_bg():  String  val  Public.  Bright magenta background.",
            "title": "fun bright_magenta_bg()"
        },
        {
            "location": "/term-ANSI/#fun-bright_red",
            "text": "fun box\n bright_red():  String  val  Public.  Bright red text.",
            "title": "fun bright_red()"
        },
        {
            "location": "/term-ANSI/#fun-bright_red_bg",
            "text": "fun box\n bright_red_bg():  String  val  Public.  Bright red background.",
            "title": "fun bright_red_bg()"
        },
        {
            "location": "/term-ANSI/#fun-bright_yellow",
            "text": "fun box\n bright_yellow():  String  val  Public.  Bright yellow text.",
            "title": "fun bright_yellow()"
        },
        {
            "location": "/term-ANSI/#fun-bright_yellow_bg",
            "text": "fun box\n bright_yellow_bg():  String  val  Public.  Bright yellow background.",
            "title": "fun bright_yellow_bg()"
        },
        {
            "location": "/term-ANSI/#fun-clear",
            "text": "fun box\n clear():  String  val  Public.  Clear the screen and move the cursor to the top left corner.",
            "title": "fun clear()"
        },
        {
            "location": "/term-ANSI/#fun-cursor",
            "text": "fun box\n cursor(optional x:  U32  val, optional y:  U32  val):  String  val  Public.  Move the cursor to line y, column x. 0 is the same as 1. This indexes from\nthe top left corner of the screen.",
            "title": "fun cursor()"
        },
        {
            "location": "/term-ANSI/#fun-cyan",
            "text": "fun box\n cyan():  String  val  Public.  Cyan text.",
            "title": "fun cyan()"
        },
        {
            "location": "/term-ANSI/#fun-cyan_bg",
            "text": "fun box\n cyan_bg():  String  val  Public.  Cyan background.",
            "title": "fun cyan_bg()"
        },
        {
            "location": "/term-ANSI/#fun-down",
            "text": "fun box\n down(optional n:  U32  val):  String  val  Public.  Move the cursor down n lines. 0 is the same as 1.",
            "title": "fun down()"
        },
        {
            "location": "/term-ANSI/#fun-eq",
            "text": "fun box\n eq(that:  ANSI  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/term-ANSI/#fun-erase",
            "text": "fun box\n erase():  String  val  Public.  Erases everything to the left of the cursor on the line the cursor is on.",
            "title": "fun erase()"
        },
        {
            "location": "/term-ANSI/#fun-green",
            "text": "fun box\n green():  String  val  Public.  Green text.",
            "title": "fun green()"
        },
        {
            "location": "/term-ANSI/#fun-green_bg",
            "text": "fun box\n green_bg():  String  val  Public.  Green background.",
            "title": "fun green_bg()"
        },
        {
            "location": "/term-ANSI/#fun-grey",
            "text": "fun box\n grey():  String  val  Public.  Grey text.",
            "title": "fun grey()"
        },
        {
            "location": "/term-ANSI/#fun-grey_bg",
            "text": "fun box\n grey_bg():  String  val  Public.  Grey background.",
            "title": "fun grey_bg()"
        },
        {
            "location": "/term-ANSI/#fun-left",
            "text": "fun box\n left(optional n:  U32  val):  String  val  Public.  Move the cursor left n columns. 0 is the same as 1.",
            "title": "fun left()"
        },
        {
            "location": "/term-ANSI/#fun-magenta",
            "text": "fun box\n magenta():  String  val  Public.  Magenta text.",
            "title": "fun magenta()"
        },
        {
            "location": "/term-ANSI/#fun-magenta_bg",
            "text": "fun box\n magenta_bg():  String  val  Public.  Magenta background.",
            "title": "fun magenta_bg()"
        },
        {
            "location": "/term-ANSI/#fun-ne",
            "text": "fun box\n ne(that:  ANSI  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/term-ANSI/#fun-red",
            "text": "fun box\n red():  String  val  Public.  Red text.",
            "title": "fun red()"
        },
        {
            "location": "/term-ANSI/#fun-red_bg",
            "text": "fun box\n red_bg():  String  val  Public.  Red background.",
            "title": "fun red_bg()"
        },
        {
            "location": "/term-ANSI/#fun-reset",
            "text": "fun box\n reset():  String  val  Public.  Resets all colours and text styles to the default.",
            "title": "fun reset()"
        },
        {
            "location": "/term-ANSI/#fun-reverse",
            "text": "fun box\n reverse(optional state:  Bool  val):  String  val  Public.  Swap foreground and background colour.",
            "title": "fun reverse()"
        },
        {
            "location": "/term-ANSI/#fun-right",
            "text": "fun box\n right(optional n:  U32  val):  String  val  Public.  Move the cursor right n columns. 0 is the same as 1.",
            "title": "fun right()"
        },
        {
            "location": "/term-ANSI/#fun-underline",
            "text": "fun box\n underline(optional state:  Bool  val):  String  val  Public.  Underlined text. Does nothing on Windows.",
            "title": "fun underline()"
        },
        {
            "location": "/term-ANSI/#fun-up",
            "text": "fun box\n up(optional n:  U32  val):  String  val  Public.  Move the cursor up n lines. 0 is the same as 1.",
            "title": "fun up()"
        },
        {
            "location": "/term-ANSI/#fun-white",
            "text": "fun box\n white():  String  val  Public.  White text.",
            "title": "fun white()"
        },
        {
            "location": "/term-ANSI/#fun-white_bg",
            "text": "fun box\n white_bg():  String  val  Public.  White background.",
            "title": "fun white_bg()"
        },
        {
            "location": "/term-ANSI/#fun-yellow",
            "text": "fun box\n yellow():  String  val  Public.  Yellow text.",
            "title": "fun yellow()"
        },
        {
            "location": "/term-ANSI/#fun-yellow_bg",
            "text": "fun box\n yellow_bg():  String  val  Public.  Yellow background.",
            "title": "fun yellow_bg()"
        },
        {
            "location": "/term-ANSINotify/",
            "text": "interface ANSINotify\n\n\nIn package \"term\".\n\n\nPublic, default capability ref.\n\n\nReceive input from an ANSITerm.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(term: \nANSITerm\n ref, input: \nU8\n val): \nNone\n val\n\n\nPublic.\n\n\nfun closed()\n\n\nfun ref\n closed(): \nNone\n val\n\n\nPublic.\n\n\nfun delete()\n\n\nfun ref\n delete(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun down()\n\n\nfun ref\n down(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun end_key()\n\n\nfun ref\n end_key(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun fn_key()\n\n\nfun ref\n fn_key(i: \nU8\n val, ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun home()\n\n\nfun ref\n home(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun insert()\n\n\nfun ref\n insert(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun left()\n\n\nfun ref\n left(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun page_down()\n\n\nfun ref\n page_down(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun page_up()\n\n\nfun ref\n page_up(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun prompt()\n\n\nfun ref\n prompt(term: \nANSITerm\n ref, value: \nString\n val): \nNone\n val\n\n\nPublic.\n\n\nfun right()\n\n\nfun ref\n right(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun up()\n\n\nfun ref\n up(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.",
            "title": "interface ANSINotify"
        },
        {
            "location": "/term-ANSINotify/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/term-ANSINotify/#fun-apply",
            "text": "fun ref\n apply(term:  ANSITerm  ref, input:  U8  val):  None  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/term-ANSINotify/#fun-closed",
            "text": "fun ref\n closed():  None  val  Public.",
            "title": "fun closed()"
        },
        {
            "location": "/term-ANSINotify/#fun-delete",
            "text": "fun ref\n delete(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun delete()"
        },
        {
            "location": "/term-ANSINotify/#fun-down",
            "text": "fun ref\n down(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun down()"
        },
        {
            "location": "/term-ANSINotify/#fun-end_key",
            "text": "fun ref\n end_key(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun end_key()"
        },
        {
            "location": "/term-ANSINotify/#fun-fn_key",
            "text": "fun ref\n fn_key(i:  U8  val, ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun fn_key()"
        },
        {
            "location": "/term-ANSINotify/#fun-home",
            "text": "fun ref\n home(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun home()"
        },
        {
            "location": "/term-ANSINotify/#fun-insert",
            "text": "fun ref\n insert(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun insert()"
        },
        {
            "location": "/term-ANSINotify/#fun-left",
            "text": "fun ref\n left(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun left()"
        },
        {
            "location": "/term-ANSINotify/#fun-page_down",
            "text": "fun ref\n page_down(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun page_down()"
        },
        {
            "location": "/term-ANSINotify/#fun-page_up",
            "text": "fun ref\n page_up(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun page_up()"
        },
        {
            "location": "/term-ANSINotify/#fun-prompt",
            "text": "fun ref\n prompt(term:  ANSITerm  ref, value:  String  val):  None  val  Public.",
            "title": "fun prompt()"
        },
        {
            "location": "/term-ANSINotify/#fun-right",
            "text": "fun ref\n right(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun right()"
        },
        {
            "location": "/term-ANSINotify/#fun-up",
            "text": "fun ref\n up(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun up()"
        },
        {
            "location": "/term-ANSITerm/",
            "text": "actor ANSITerm\n\n\nIn package \"term\".\n\n\nPublic, default capability tag.\n\n\nHandles ANSI escape codes from stdin.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(notify: \nANSINotify\n iso, source: \nDisposableActor\n tag, optional timers: \nTimers\n tag)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe apply()\n\n\nbe apply(data: \nArray\n[\nU8\n val] iso)\n\n\nPublic.\n\n\nReceives input from stdin.\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.\n\n\nStop accepting input, inform the notifier we have closed, and dispose of\nour source.\n\n\nbe prompt()\n\n\nbe prompt(value: \nString\n val)\n\n\nPublic.\n\n\nPass a prompt along to the notifier.\n\n\nbe _timeout()\n\n\nbe _timeout()\n\n\nPrivate.\n\n\nOur timer since receiving an ESC has expired. Send the buffered data as if\nit was not an escape sequence.\n\n\nFunctions\n\n\nfun _delete()\n\n\nfun ref\n _delete(): \nNone\n val\n\n\nPrivate.\n\n\nDelete key.\n\n\nfun _down()\n\n\nfun ref\n _down(): \nNone\n val\n\n\nPrivate.\n\n\nDown arrow.\n\n\nfun _end()\n\n\nfun ref\n _end(): \nNone\n val\n\n\nPrivate.\n\n\nEnd key.\n\n\nfun _esc_clear()\n\n\nfun ref\n _esc_clear(): \nNone\n val\n\n\nPrivate.\n\n\nClear the escape state.\n\n\nfun _esc_flush()\n\n\nfun ref\n _esc_flush(): \nNone\n val\n\n\nPrivate.\n\n\nPass a partial or unrecognised escape sequence to the notifier.\n\n\nfun _fn_key()\n\n\nfun ref\n _fn_key(i: \nU8\n val): \nNone\n val\n\n\nPrivate.\n\n\nFunction key.\n\n\nfun _home()\n\n\nfun ref\n _home(): \nNone\n val\n\n\nPrivate.\n\n\nHome key.\n\n\nfun _insert()\n\n\nfun ref\n _insert(): \nNone\n val\n\n\nPrivate.\n\n\nInsert key.\n\n\nfun _keypad()\n\n\nfun ref\n _keypad(): \nNone\n val\n\n\nPrivate.\n\n\nAn extended key.\n\n\nfun _left()\n\n\nfun ref\n _left(): \nNone\n val\n\n\nPrivate.\n\n\nLeft arrow.\n\n\nfun _mod()\n\n\nfun ref\n _mod(): (\nBool\n val , \nBool\n val , \nBool\n val)\n\n\nPrivate.\n\n\nSet the modifier bools.\n\n\nfun _page_down()\n\n\nfun ref\n _page_down(): \nNone\n val\n\n\nPrivate.\n\n\nPage down key.\n\n\nfun _page_up()\n\n\nfun ref\n _page_up(): \nNone\n val\n\n\nPrivate.\n\n\nPage up key.\n\n\nfun _right()\n\n\nfun ref\n _right(): \nNone\n val\n\n\nPrivate.\n\n\nRight arrow.\n\n\nfun _up()\n\n\nfun ref\n _up(): \nNone\n val\n\n\nPrivate.\n\n\nUp arrow.",
            "title": "actor ANSITerm"
        },
        {
            "location": "/term-ANSITerm/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-ANSITerm/#new-create",
            "text": "new create(notify:  ANSINotify  iso, source:  DisposableActor  tag, optional timers:  Timers  tag)  Public.",
            "title": "new create()"
        },
        {
            "location": "/term-ANSITerm/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/term-ANSITerm/#be-apply",
            "text": "be apply(data:  Array [ U8  val] iso)  Public.  Receives input from stdin.",
            "title": "be apply()"
        },
        {
            "location": "/term-ANSITerm/#be-dispose",
            "text": "be dispose()  Public.  Stop accepting input, inform the notifier we have closed, and dispose of\nour source.",
            "title": "be dispose()"
        },
        {
            "location": "/term-ANSITerm/#be-prompt",
            "text": "be prompt(value:  String  val)  Public.  Pass a prompt along to the notifier.",
            "title": "be prompt()"
        },
        {
            "location": "/term-ANSITerm/#be-_timeout",
            "text": "be _timeout()  Private.  Our timer since receiving an ESC has expired. Send the buffered data as if\nit was not an escape sequence.",
            "title": "be _timeout()"
        },
        {
            "location": "/term-ANSITerm/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/term-ANSITerm/#fun-_delete",
            "text": "fun ref\n _delete():  None  val  Private.  Delete key.",
            "title": "fun _delete()"
        },
        {
            "location": "/term-ANSITerm/#fun-_down",
            "text": "fun ref\n _down():  None  val  Private.  Down arrow.",
            "title": "fun _down()"
        },
        {
            "location": "/term-ANSITerm/#fun-_end",
            "text": "fun ref\n _end():  None  val  Private.  End key.",
            "title": "fun _end()"
        },
        {
            "location": "/term-ANSITerm/#fun-_esc_clear",
            "text": "fun ref\n _esc_clear():  None  val  Private.  Clear the escape state.",
            "title": "fun _esc_clear()"
        },
        {
            "location": "/term-ANSITerm/#fun-_esc_flush",
            "text": "fun ref\n _esc_flush():  None  val  Private.  Pass a partial or unrecognised escape sequence to the notifier.",
            "title": "fun _esc_flush()"
        },
        {
            "location": "/term-ANSITerm/#fun-_fn_key",
            "text": "fun ref\n _fn_key(i:  U8  val):  None  val  Private.  Function key.",
            "title": "fun _fn_key()"
        },
        {
            "location": "/term-ANSITerm/#fun-_home",
            "text": "fun ref\n _home():  None  val  Private.  Home key.",
            "title": "fun _home()"
        },
        {
            "location": "/term-ANSITerm/#fun-_insert",
            "text": "fun ref\n _insert():  None  val  Private.  Insert key.",
            "title": "fun _insert()"
        },
        {
            "location": "/term-ANSITerm/#fun-_keypad",
            "text": "fun ref\n _keypad():  None  val  Private.  An extended key.",
            "title": "fun _keypad()"
        },
        {
            "location": "/term-ANSITerm/#fun-_left",
            "text": "fun ref\n _left():  None  val  Private.  Left arrow.",
            "title": "fun _left()"
        },
        {
            "location": "/term-ANSITerm/#fun-_mod",
            "text": "fun ref\n _mod(): ( Bool  val ,  Bool  val ,  Bool  val)  Private.  Set the modifier bools.",
            "title": "fun _mod()"
        },
        {
            "location": "/term-ANSITerm/#fun-_page_down",
            "text": "fun ref\n _page_down():  None  val  Private.  Page down key.",
            "title": "fun _page_down()"
        },
        {
            "location": "/term-ANSITerm/#fun-_page_up",
            "text": "fun ref\n _page_up():  None  val  Private.  Page up key.",
            "title": "fun _page_up()"
        },
        {
            "location": "/term-ANSITerm/#fun-_right",
            "text": "fun ref\n _right():  None  val  Private.  Right arrow.",
            "title": "fun _right()"
        },
        {
            "location": "/term-ANSITerm/#fun-_up",
            "text": "fun ref\n _up():  None  val  Private.  Up arrow.",
            "title": "fun _up()"
        },
        {
            "location": "/term-_EscapeCSI/",
            "text": "primitive _EscapeCSI\n\n\nIn package \"term\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_EscapeCSI\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_EscapeCSI\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _EscapeCSI"
        },
        {
            "location": "/term-_EscapeCSI/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-_EscapeCSI/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/term-_EscapeCSI/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/term-_EscapeCSI/#fun-eq",
            "text": "fun box\n eq(that:  _EscapeCSI  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/term-_EscapeCSI/#fun-ne",
            "text": "fun box\n ne(that:  _EscapeCSI  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/term-_EscapeMod/",
            "text": "primitive _EscapeMod\n\n\nIn package \"term\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_EscapeMod\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_EscapeMod\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _EscapeMod"
        },
        {
            "location": "/term-_EscapeMod/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-_EscapeMod/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/term-_EscapeMod/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/term-_EscapeMod/#fun-eq",
            "text": "fun box\n eq(that:  _EscapeMod  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/term-_EscapeMod/#fun-ne",
            "text": "fun box\n ne(that:  _EscapeMod  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/term-_EscapeNone/",
            "text": "primitive _EscapeNone\n\n\nIn package \"term\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_EscapeNone\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_EscapeNone\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _EscapeNone"
        },
        {
            "location": "/term-_EscapeNone/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-_EscapeNone/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/term-_EscapeNone/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/term-_EscapeNone/#fun-eq",
            "text": "fun box\n eq(that:  _EscapeNone  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/term-_EscapeNone/#fun-ne",
            "text": "fun box\n ne(that:  _EscapeNone  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/term-_EscapeSS3/",
            "text": "primitive _EscapeSS3\n\n\nIn package \"term\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_EscapeSS3\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_EscapeSS3\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _EscapeSS3"
        },
        {
            "location": "/term-_EscapeSS3/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-_EscapeSS3/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/term-_EscapeSS3/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/term-_EscapeSS3/#fun-eq",
            "text": "fun box\n eq(that:  _EscapeSS3  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/term-_EscapeSS3/#fun-ne",
            "text": "fun box\n ne(that:  _EscapeSS3  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/term-_EscapeStart/",
            "text": "primitive _EscapeStart\n\n\nIn package \"term\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_EscapeStart\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_EscapeStart\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _EscapeStart"
        },
        {
            "location": "/term-_EscapeStart/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-_EscapeStart/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/term-_EscapeStart/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/term-_EscapeStart/#fun-eq",
            "text": "fun box\n eq(that:  _EscapeStart  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/term-_EscapeStart/#fun-ne",
            "text": "fun box\n ne(that:  _EscapeStart  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/term-_EscapeState/",
            "text": "type _EscapeState is ((((\n_EscapeNone\n val | \n_EscapeStart\n val) | \n_EscapeSS3\n val) | \n_EscapeCSI\n val) | \n_EscapeMod\n val)\n\n\nIn package \"term\".\n\n\nPrivate.\n\n\nNo doc string provided.",
            "title": "type _EscapeState"
        },
        {
            "location": "/term-Readline/",
            "text": "class Readline is \nANSINotify\n ref\n\n\nIn package \"term\".\n\n\nPublic, default capability ref.\n\n\nLine editing, history, and tab completion.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(notify: \nReadlineNotify\n iso, out: \nOutStream\n tag, optional path: (\nFilePath\n val | \nNone\n val), optional maxlen: \nUSize\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun _add_history()\n\n\nfun ref\n _add_history(line: \nString\n val): \nNone\n val\n\n\nPrivate.\n\n\nAdd a line to the history, trimming an earlier line if necessary.\n\n\nfun apply()\n\n\nfun ref\n apply(term: \nANSITerm\n ref, input: \nU8\n val): \nNone\n val\n\n\nPublic.\n\n\nReceives input.\n\n\nfun _backspace()\n\n\nfun ref\n _backspace(): \nNone\n val\n\n\nPrivate.\n\n\nBackward delete.\n\n\nfun _clear()\n\n\nfun ref\n _clear(): \nNone\n val\n\n\nPrivate.\n\n\nClear the screen.\n\n\nfun closed()\n\n\nfun ref\n closed(): \nNone\n val\n\n\nPublic.\n\n\nNo more input is available.\n\n\nfun delete()\n\n\nfun ref\n delete(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nForward delete.\n\n\nfun _delete_prev_word()\n\n\nfun ref\n _delete_prev_word(): \nNone\n val\n\n\nPrivate.\n\n\nDelete the previous word.\n\n\nfun _dispatch()\n\n\nfun ref\n _dispatch(term: \nANSITerm\n tag): \nNone\n val\n\n\nPrivate.\n\n\nSend a finished line to the notifier.\n\n\nfun down()\n\n\nfun ref\n down(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nNext line.\n\n\nfun end_key()\n\n\nfun ref\n end_key(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nEnd of the line.\n\n\nfun fn_key()\n\n\nfun ref\n fn_key(i: \nU8\n val, ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun _fulfill_prompt()\n\n\nfun tag\n _fulfill_prompt(term: \nANSITerm\n tag, value: \nString\n val): \nString\n val\n\n\nPrivate.\n\n\nTell the terminal, which will call \nthis.prompt(value)\n.\n\n\nfun _handle_line()\n\n\nfun ref\n _handle_line(term: \nANSITerm\n tag, line: \nString\n val): \nNone\n val\n\n\nPrivate.\n\n\nDispatch a single line.\n\n\nfun home()\n\n\nfun ref\n home(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nBeginning of the line.\n\n\nfun insert()\n\n\nfun ref\n insert(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun left()\n\n\nfun ref\n left(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nMove left.\n\n\nfun _load_history()\n\n\nfun ref\n _load_history(): \nNone\n val\n\n\nPrivate.\n\n\nLoad the history from a file.\n\n\nfun page_down()\n\n\nfun ref\n page_down(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun page_up()\n\n\nfun ref\n page_up(ctrl: \nBool\n val, alt: \nBool\n val, shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nfun prompt()\n\n\nfun ref\n prompt(term: \nANSITerm\n ref, value: \nString\n val): \nNone\n val\n\n\nPublic.\n\n\nSet a new prompt, unblock, and handle the pending queue.\n\n\nfun _refresh_line()\n\n\nfun ref\n _refresh_line(): \nNone\n val\n\n\nPrivate.\n\n\nRefresh the line on screen.\n\n\nfun _reject_prompt()\n\n\nfun tag\n _reject_prompt(term: \nANSITerm\n tag): \nString\n val ?\n\n\nPrivate, may raise an error.\n\n\nTell the terminal we've closed. Raise an error to reject any remaining\npromise chain.\n\n\nfun right()\n\n\nfun ref\n right(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nMove right.\n\n\nfun _save_history()\n\n\nfun box\n _save_history(): \nNone\n val\n\n\nPrivate.\n\n\nWrite the history back to a file.\n\n\nfun _swap()\n\n\nfun ref\n _swap(): \nNone\n val\n\n\nPrivate.\n\n\nSwap the previous character with the current one.\n\n\nfun _tab()\n\n\nfun ref\n _tab(): \nNone\n val\n\n\nPrivate.\n\n\nTab completion.\n\n\nTODO: Improve this.\n\n\nfun up()\n\n\nfun ref\n up(optional ctrl: \nBool\n val, optional alt: \nBool\n val, optional shift: \nBool\n val): \nNone\n val\n\n\nPublic.\n\n\nPrevious line.",
            "title": "class Readline"
        },
        {
            "location": "/term-Readline/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/term-Readline/#new-create",
            "text": "new create(notify:  ReadlineNotify  iso, out:  OutStream  tag, optional path: ( FilePath  val |  None  val), optional maxlen:  USize  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/term-Readline/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/term-Readline/#fun-_add_history",
            "text": "fun ref\n _add_history(line:  String  val):  None  val  Private.  Add a line to the history, trimming an earlier line if necessary.",
            "title": "fun _add_history()"
        },
        {
            "location": "/term-Readline/#fun-apply",
            "text": "fun ref\n apply(term:  ANSITerm  ref, input:  U8  val):  None  val  Public.  Receives input.",
            "title": "fun apply()"
        },
        {
            "location": "/term-Readline/#fun-_backspace",
            "text": "fun ref\n _backspace():  None  val  Private.  Backward delete.",
            "title": "fun _backspace()"
        },
        {
            "location": "/term-Readline/#fun-_clear",
            "text": "fun ref\n _clear():  None  val  Private.  Clear the screen.",
            "title": "fun _clear()"
        },
        {
            "location": "/term-Readline/#fun-closed",
            "text": "fun ref\n closed():  None  val  Public.  No more input is available.",
            "title": "fun closed()"
        },
        {
            "location": "/term-Readline/#fun-delete",
            "text": "fun ref\n delete(optional ctrl:  Bool  val, optional alt:  Bool  val, optional shift:  Bool  val):  None  val  Public.  Forward delete.",
            "title": "fun delete()"
        },
        {
            "location": "/term-Readline/#fun-_delete_prev_word",
            "text": "fun ref\n _delete_prev_word():  None  val  Private.  Delete the previous word.",
            "title": "fun _delete_prev_word()"
        },
        {
            "location": "/term-Readline/#fun-_dispatch",
            "text": "fun ref\n _dispatch(term:  ANSITerm  tag):  None  val  Private.  Send a finished line to the notifier.",
            "title": "fun _dispatch()"
        },
        {
            "location": "/term-Readline/#fun-down",
            "text": "fun ref\n down(optional ctrl:  Bool  val, optional alt:  Bool  val, optional shift:  Bool  val):  None  val  Public.  Next line.",
            "title": "fun down()"
        },
        {
            "location": "/term-Readline/#fun-end_key",
            "text": "fun ref\n end_key(optional ctrl:  Bool  val, optional alt:  Bool  val, optional shift:  Bool  val):  None  val  Public.  End of the line.",
            "title": "fun end_key()"
        },
        {
            "location": "/term-Readline/#fun-fn_key",
            "text": "fun ref\n fn_key(i:  U8  val, ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun fn_key()"
        },
        {
            "location": "/term-Readline/#fun-_fulfill_prompt",
            "text": "fun tag\n _fulfill_prompt(term:  ANSITerm  tag, value:  String  val):  String  val  Private.  Tell the terminal, which will call  this.prompt(value) .",
            "title": "fun _fulfill_prompt()"
        },
        {
            "location": "/term-Readline/#fun-_handle_line",
            "text": "fun ref\n _handle_line(term:  ANSITerm  tag, line:  String  val):  None  val  Private.  Dispatch a single line.",
            "title": "fun _handle_line()"
        },
        {
            "location": "/term-Readline/#fun-home",
            "text": "fun ref\n home(optional ctrl:  Bool  val, optional alt:  Bool  val, optional shift:  Bool  val):  None  val  Public.  Beginning of the line.",
            "title": "fun home()"
        },
        {
            "location": "/term-Readline/#fun-insert",
            "text": "fun ref\n insert(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun insert()"
        },
        {
            "location": "/term-Readline/#fun-left",
            "text": "fun ref\n left(optional ctrl:  Bool  val, optional alt:  Bool  val, optional shift:  Bool  val):  None  val  Public.  Move left.",
            "title": "fun left()"
        },
        {
            "location": "/term-Readline/#fun-_load_history",
            "text": "fun ref\n _load_history():  None  val  Private.  Load the history from a file.",
            "title": "fun _load_history()"
        },
        {
            "location": "/term-Readline/#fun-page_down",
            "text": "fun ref\n page_down(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun page_down()"
        },
        {
            "location": "/term-Readline/#fun-page_up",
            "text": "fun ref\n page_up(ctrl:  Bool  val, alt:  Bool  val, shift:  Bool  val):  None  val  Public.",
            "title": "fun page_up()"
        },
        {
            "location": "/term-Readline/#fun-prompt",
            "text": "fun ref\n prompt(term:  ANSITerm  ref, value:  String  val):  None  val  Public.  Set a new prompt, unblock, and handle the pending queue.",
            "title": "fun prompt()"
        },
        {
            "location": "/term-Readline/#fun-_refresh_line",
            "text": "fun ref\n _refresh_line():  None  val  Private.  Refresh the line on screen.",
            "title": "fun _refresh_line()"
        },
        {
            "location": "/term-Readline/#fun-_reject_prompt",
            "text": "fun tag\n _reject_prompt(term:  ANSITerm  tag):  String  val ?  Private, may raise an error.  Tell the terminal we've closed. Raise an error to reject any remaining\npromise chain.",
            "title": "fun _reject_prompt()"
        },
        {
            "location": "/term-Readline/#fun-right",
            "text": "fun ref\n right(optional ctrl:  Bool  val, optional alt:  Bool  val, optional shift:  Bool  val):  None  val  Public.  Move right.",
            "title": "fun right()"
        },
        {
            "location": "/term-Readline/#fun-_save_history",
            "text": "fun box\n _save_history():  None  val  Private.  Write the history back to a file.",
            "title": "fun _save_history()"
        },
        {
            "location": "/term-Readline/#fun-_swap",
            "text": "fun ref\n _swap():  None  val  Private.  Swap the previous character with the current one.",
            "title": "fun _swap()"
        },
        {
            "location": "/term-Readline/#fun-_tab",
            "text": "fun ref\n _tab():  None  val  Private.  Tab completion.  TODO: Improve this.",
            "title": "fun _tab()"
        },
        {
            "location": "/term-Readline/#fun-up",
            "text": "fun ref\n up(optional ctrl:  Bool  val, optional alt:  Bool  val, optional shift:  Bool  val):  None  val  Public.  Previous line.",
            "title": "fun up()"
        },
        {
            "location": "/term-ReadlineNotify/",
            "text": "interface ReadlineNotify\n\n\nIn package \"term\".\n\n\nPublic, default capability ref.\n\n\nNotifier for readline.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(line: \nString\n val, prompt: \nPromise\n[\nString\n val] tag): \nNone\n val\n\n\nPublic.\n\n\nReceives finished lines. The returned string is the next prompt. This may\nbe called with an empty line to get the current prompt. If this raises an\nerror, readline will stop handling input.\n\n\nfun tab()\n\n\nfun ref\n tab(line: \nString\n val): \nSeq\n[\nString\n val] box\n\n\nPublic.\n\n\nReturn tab completion possibilities.",
            "title": "interface ReadlineNotify"
        },
        {
            "location": "/term-ReadlineNotify/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/term-ReadlineNotify/#fun-apply",
            "text": "fun ref\n apply(line:  String  val, prompt:  Promise [ String  val] tag):  None  val  Public.  Receives finished lines. The returned string is the next prompt. This may\nbe called with an empty line to get the current prompt. If this raises an\nerror, readline will stop handling input.",
            "title": "fun apply()"
        },
        {
            "location": "/term-ReadlineNotify/#fun-tab",
            "text": "fun ref\n tab(line:  String  val):  Seq [ String  val] box  Public.  Return tab completion possibilities.",
            "title": "fun tab()"
        },
        {
            "location": "/time--index/",
            "text": "No package doc string provided for time.",
            "title": "Package"
        },
        {
            "location": "/time-_Clock/",
            "text": "type _Clock is (\n_ClockRealtime\n val | \n_ClockMonotonic\n val)\n\n\nIn package \"time\".\n\n\nPrivate.\n\n\nNo doc string provided.",
            "title": "type _Clock"
        },
        {
            "location": "/time-_ClockMonotonic/",
            "text": "primitive _ClockMonotonic\n\n\nIn package \"time\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(): \nU32\n val\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_ClockMonotonic\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_ClockMonotonic\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _ClockMonotonic"
        },
        {
            "location": "/time-_ClockMonotonic/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-_ClockMonotonic/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/time-_ClockMonotonic/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/time-_ClockMonotonic/#fun-apply",
            "text": "fun box\n apply():  U32  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/time-_ClockMonotonic/#fun-eq",
            "text": "fun box\n eq(that:  _ClockMonotonic  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/time-_ClockMonotonic/#fun-ne",
            "text": "fun box\n ne(that:  _ClockMonotonic  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/time-_ClockRealtime/",
            "text": "primitive _ClockRealtime\n\n\nIn package \"time\".\n\n\nPrivate, default capability val.\n\n\nNo doc string provided.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun box\n apply(): \nU32\n val\n\n\nPublic.\n\n\nfun eq()\n\n\nfun box\n eq(that: \n_ClockRealtime\n val): \nBool\n val\n\n\nPublic.\n\n\nfun ne()\n\n\nfun box\n ne(that: \n_ClockRealtime\n val): \nBool\n val\n\n\nPublic.",
            "title": "primitive _ClockRealtime"
        },
        {
            "location": "/time-_ClockRealtime/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-_ClockRealtime/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/time-_ClockRealtime/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/time-_ClockRealtime/#fun-apply",
            "text": "fun box\n apply():  U32  val  Public.",
            "title": "fun apply()"
        },
        {
            "location": "/time-_ClockRealtime/#fun-eq",
            "text": "fun box\n eq(that:  _ClockRealtime  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/time-_ClockRealtime/#fun-ne",
            "text": "fun box\n ne(that:  _ClockRealtime  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/time-Date/",
            "text": "class Date\n\n\nIn package \"time\".\n\n\nPublic, default capability ref.\n\n\nRepresents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.\n\n\nPublic fields\n\n\n\n\nvar day_of_month: \nI32\n val\n\n\nvar day_of_week: \nI32\n val\n\n\nvar day_of_year: \nI32\n val\n\n\nvar hour: \nI32\n val\n\n\nvar min: \nI32\n val\n\n\nvar month: \nI32\n val\n\n\nvar nsec: \nI32\n val\n\n\nvar sec: \nI32\n val\n\n\nvar year: \nI32\n val\n\n\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional seconds: \nI64\n val, optional nanoseconds: \nI64\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun format()\n\n\nfun box\n format(fmt: \nString\n val): \nString\n val\n\n\nPublic.\n\n\nFormat the time as for strftime.\n\n\nfun normal()\n\n\nfun ref\n normal(): \nDate\n ref^\n\n\nPublic.\n\n\nNormalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.\n\n\nfun time()\n\n\nfun box\n time(): \nI64\n val\n\n\nPublic.\n\n\nReturn a POSIX time. Treats the date as UTC.",
            "title": "class Date"
        },
        {
            "location": "/time-Date/#public-fields",
            "text": "var day_of_month:  I32  val  var day_of_week:  I32  val  var day_of_year:  I32  val  var hour:  I32  val  var min:  I32  val  var month:  I32  val  var nsec:  I32  val  var sec:  I32  val  var year:  I32  val",
            "title": "Public fields"
        },
        {
            "location": "/time-Date/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Date/#new-create",
            "text": "new create(optional seconds:  I64  val, optional nanoseconds:  I64  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/time-Date/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/time-Date/#fun-format",
            "text": "fun box\n format(fmt:  String  val):  String  val  Public.  Format the time as for strftime.",
            "title": "fun format()"
        },
        {
            "location": "/time-Date/#fun-normal",
            "text": "fun ref\n normal():  Date  ref^  Public.  Normalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.",
            "title": "fun normal()"
        },
        {
            "location": "/time-Date/#fun-time",
            "text": "fun box\n time():  I64  val  Public.  Return a POSIX time. Treats the date as UTC.",
            "title": "fun time()"
        },
        {
            "location": "/time-Time/",
            "text": "primitive Time\n\n\nIn package \"time\".\n\n\nPublic, default capability val.\n\n\nA collection of ways to fetch the current time.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create()\n\n\nPublic.\n\n\nFunctions\n\n\nfun _clock_gettime()\n\n\nfun box\n _clock_gettime(clock: (\n_ClockRealtime\n val | \n_ClockMonotonic\n val)): (\nI64\n val , \nI64\n val)\n\n\nPrivate.\n\n\nReturn a clock time on linux and freebsd.\n\n\nfun cycles()\n\n\nfun box\n cycles(): \nU64\n val\n\n\nPublic.\n\n\nProcessor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.\n\n\nfun eq()\n\n\nfun box\n eq(that: \nTime\n val): \nBool\n val\n\n\nPublic.\n\n\nfun micros()\n\n\nfun box\n micros(): \nU64\n val\n\n\nPublic.\n\n\nMonotonic unadjusted microseconds.\n\n\nfun millis()\n\n\nfun box\n millis(): \nU64\n val\n\n\nPublic.\n\n\nMonotonic unadjusted milliseconds.\n\n\nfun nanos()\n\n\nfun box\n nanos(): \nU64\n val\n\n\nPublic.\n\n\nMonotonic unadjusted nanoseconds.\n\n\nfun ne()\n\n\nfun box\n ne(that: \nTime\n val): \nBool\n val\n\n\nPublic.\n\n\nfun now()\n\n\nfun box\n now(): (\nI64\n val , \nI64\n val)\n\n\nPublic.\n\n\nThe wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)\n\n\nfun perf_begin()\n\n\nfun box\n perf_begin(): \nU64\n val\n\n\nPublic.\n\n\nGet a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.\n\n\nfun perf_end()\n\n\nfun box\n perf_end(): \nU64\n val\n\n\nPublic.\n\n\nGet a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.\n\n\nfun _query_performance_counter()\n\n\nfun box\n _query_performance_counter(): (\nU64\n val , \nU64\n val)\n\n\nPrivate.\n\n\nReturn QPC and QPF.\n\n\nfun seconds()\n\n\nfun box\n seconds(): \nI64\n val\n\n\nPublic.\n\n\nThe wall-clock adjusted system time.\n\n\nfun wall_to_nanos()\n\n\nfun box\n wall_to_nanos(wall: (\nI64\n val , \nI64\n val)): \nU64\n val\n\n\nPublic.\n\n\nConverts a wall-clock adjusted system time to monotonic unadjusted\nnanoseconds.",
            "title": "primitive Time"
        },
        {
            "location": "/time-Time/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Time/#new-create",
            "text": "new create()  Public.",
            "title": "new create()"
        },
        {
            "location": "/time-Time/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/time-Time/#fun-_clock_gettime",
            "text": "fun box\n _clock_gettime(clock: ( _ClockRealtime  val |  _ClockMonotonic  val)): ( I64  val ,  I64  val)  Private.  Return a clock time on linux and freebsd.",
            "title": "fun _clock_gettime()"
        },
        {
            "location": "/time-Time/#fun-cycles",
            "text": "fun box\n cycles():  U64  val  Public.  Processor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.",
            "title": "fun cycles()"
        },
        {
            "location": "/time-Time/#fun-eq",
            "text": "fun box\n eq(that:  Time  val):  Bool  val  Public.",
            "title": "fun eq()"
        },
        {
            "location": "/time-Time/#fun-micros",
            "text": "fun box\n micros():  U64  val  Public.  Monotonic unadjusted microseconds.",
            "title": "fun micros()"
        },
        {
            "location": "/time-Time/#fun-millis",
            "text": "fun box\n millis():  U64  val  Public.  Monotonic unadjusted milliseconds.",
            "title": "fun millis()"
        },
        {
            "location": "/time-Time/#fun-nanos",
            "text": "fun box\n nanos():  U64  val  Public.  Monotonic unadjusted nanoseconds.",
            "title": "fun nanos()"
        },
        {
            "location": "/time-Time/#fun-ne",
            "text": "fun box\n ne(that:  Time  val):  Bool  val  Public.",
            "title": "fun ne()"
        },
        {
            "location": "/time-Time/#fun-now",
            "text": "fun box\n now(): ( I64  val ,  I64  val)  Public.  The wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)",
            "title": "fun now()"
        },
        {
            "location": "/time-Time/#fun-perf_begin",
            "text": "fun box\n perf_begin():  U64  val  Public.  Get a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.",
            "title": "fun perf_begin()"
        },
        {
            "location": "/time-Time/#fun-perf_end",
            "text": "fun box\n perf_end():  U64  val  Public.  Get a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.",
            "title": "fun perf_end()"
        },
        {
            "location": "/time-Time/#fun-_query_performance_counter",
            "text": "fun box\n _query_performance_counter(): ( U64  val ,  U64  val)  Private.  Return QPC and QPF.",
            "title": "fun _query_performance_counter()"
        },
        {
            "location": "/time-Time/#fun-seconds",
            "text": "fun box\n seconds():  I64  val  Public.  The wall-clock adjusted system time.",
            "title": "fun seconds()"
        },
        {
            "location": "/time-Time/#fun-wall_to_nanos",
            "text": "fun box\n wall_to_nanos(wall: ( I64  val ,  I64  val)):  U64  val  Public.  Converts a wall-clock adjusted system time to monotonic unadjusted\nnanoseconds.",
            "title": "fun wall_to_nanos()"
        },
        {
            "location": "/time-Timer/",
            "text": "class Timer\n\n\nIn package \"time\".\n\n\nPublic, default capability ref.\n\n\nA timer.\n\n\nConstructors\n\n\nnew abs()\n\n\nnew abs(notify: \nTimerNotify\n ref, expiration: (\nI64\n val , \nI64\n val), optional interval: \nU64\n val)\n\n\nPublic.\n\n\nCreates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.\n\n\nnew create()\n\n\nnew create(notify: \nTimerNotify\n iso, expiration: \nU64\n val, optional interval: \nU64\n val)\n\n\nPublic.\n\n\nCreate a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.\n\n\nFunctions\n\n\nfun _cancel()\n\n\nfun ref\n _cancel(): \nNone\n val\n\n\nPrivate.\n\n\nRemove the timer from any list.\n\n\nfun _fire()\n\n\nfun ref\n _fire(current: \nU64\n val): \nBool\n val\n\n\nPrivate.\n\n\nA timer is fired if its expiration time is in the past. The notifier is\ncalled with a count based on the elapsed time since expiration and the\ntimer interval. The expiration time is set to the next expiration. Returns\ntrue if the timer should be rescheduled, false otherwise.\n\n\nfun _get_node()\n\n\nfun ref\n _get_node(): \nListNode\n[\nTimer\n ref] ref\n\n\nPrivate.\n\n\nReturns the list node pointing to the timer. Used to schedule the timer in\na queue.\n\n\nfun _next()\n\n\nfun box\n _next(): \nU64\n val\n\n\nPrivate.\n\n\nReturns the next expiration time.\n\n\nfun _slop()\n\n\nfun ref\n _slop(bits: \nUSize\n val): \nNone\n val\n\n\nPrivate.\n\n\nApply slop bits to the expiration time and interval. This reduces the\nprecision by the given number of bits, effectively quantizing time.",
            "title": "class Timer"
        },
        {
            "location": "/time-Timer/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Timer/#new-abs",
            "text": "new abs(notify:  TimerNotify  ref, expiration: ( I64  val ,  I64  val), optional interval:  U64  val)  Public.  Creates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.",
            "title": "new abs()"
        },
        {
            "location": "/time-Timer/#new-create",
            "text": "new create(notify:  TimerNotify  iso, expiration:  U64  val, optional interval:  U64  val)  Public.  Create a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.",
            "title": "new create()"
        },
        {
            "location": "/time-Timer/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/time-Timer/#fun-_cancel",
            "text": "fun ref\n _cancel():  None  val  Private.  Remove the timer from any list.",
            "title": "fun _cancel()"
        },
        {
            "location": "/time-Timer/#fun-_fire",
            "text": "fun ref\n _fire(current:  U64  val):  Bool  val  Private.  A timer is fired if its expiration time is in the past. The notifier is\ncalled with a count based on the elapsed time since expiration and the\ntimer interval. The expiration time is set to the next expiration. Returns\ntrue if the timer should be rescheduled, false otherwise.",
            "title": "fun _fire()"
        },
        {
            "location": "/time-Timer/#fun-_get_node",
            "text": "fun ref\n _get_node():  ListNode [ Timer  ref] ref  Private.  Returns the list node pointing to the timer. Used to schedule the timer in\na queue.",
            "title": "fun _get_node()"
        },
        {
            "location": "/time-Timer/#fun-_next",
            "text": "fun box\n _next():  U64  val  Private.  Returns the next expiration time.",
            "title": "fun _next()"
        },
        {
            "location": "/time-Timer/#fun-_slop",
            "text": "fun ref\n _slop(bits:  USize  val):  None  val  Private.  Apply slop bits to the expiration time and interval. This reduces the\nprecision by the given number of bits, effectively quantizing time.",
            "title": "fun _slop()"
        },
        {
            "location": "/time-TimerNotify/",
            "text": "interface TimerNotify\n\n\nIn package \"time\".\n\n\nPublic, default capability ref.\n\n\nNotifications for timer.\n\n\nFunctions\n\n\nfun apply()\n\n\nfun ref\n apply(timer: \nTimer\n ref, count: \nU64\n val): \nBool\n val\n\n\nPublic.\n\n\nCalled with the the number of times the timer has fired since this was last\ncalled. Return true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).\n\n\nfun cancel()\n\n\nfun ref\n cancel(timer: \nTimer\n ref): \nNone\n val\n\n\nPublic.\n\n\nCalled if the timer is cancelled. This is also called if the notifier\nreturns false.",
            "title": "interface TimerNotify"
        },
        {
            "location": "/time-TimerNotify/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/time-TimerNotify/#fun-apply",
            "text": "fun ref\n apply(timer:  Timer  ref, count:  U64  val):  Bool  val  Public.  Called with the the number of times the timer has fired since this was last\ncalled. Return true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).",
            "title": "fun apply()"
        },
        {
            "location": "/time-TimerNotify/#fun-cancel",
            "text": "fun ref\n cancel(timer:  Timer  ref):  None  val  Public.  Called if the timer is cancelled. This is also called if the notifier\nreturns false.",
            "title": "fun cancel()"
        },
        {
            "location": "/time-Timers/",
            "text": "actor Timers\n\n\nIn package \"time\".\n\n\nPublic, default capability tag.\n\n\nA hierarchical set of timing wheels.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(optional slop: \nUSize\n val)\n\n\nPublic.\n\n\nBehaviours\n\n\nbe apply()\n\n\nbe apply(timer: \nTimer\n iso)\n\n\nPublic.\n\n\nSets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.\n\n\nbe cancel()\n\n\nbe cancel(timer: \nTimer\n tag)\n\n\nPublic.\n\n\nCancels a timer.\n\n\nbe dispose()\n\n\nbe dispose()\n\n\nPublic.\n\n\nDipose of this set of timing wheels.\n\n\nbe _event_notify()\n\n\nbe _event_notify(event: \nPointer\n[\nAsioEvent\n val] tag, flags: \nU32\n val, arg: \nU32\n val)\n\n\nPrivate.\n\n\nWhen the event fires, advance the timing wheels.\n\n\nFunctions\n\n\nfun _advance()\n\n\nfun ref\n _advance(): \nNone\n val\n\n\nPrivate.\n\n\nUpdate the current time, process all the timing wheels, and set the event\nfor the next time we need to advance.\n\n\nfun _bits()\n\n\nfun tag\n _bits(): \nUSize\n val\n\n\nPrivate.\n\n\nfun _expiration_max()\n\n\nfun tag\n _expiration_max(): \nU64\n val\n\n\nPrivate.\n\n\nGet the maximum time the timing wheels cover. Anything beyond this is\nscheduled on the last timing wheel.\n\n\nfun _fire()\n\n\nfun ref\n _fire(timer: \nTimer\n ref): \nNone\n val\n\n\nPrivate.\n\n\nFire a timer if necessary, then schedule it on the correct timing wheel\nbased on how long it is until it expires.\n\n\nfun _get_wheel()\n\n\nfun ref\n _get_wheel(rem: \nU64\n val): \n_TimingWheel\n ref ?\n\n\nPrivate, may raise an error.\n\n\nGet the hierarchical timing wheel for the given time until expiration.\n\n\nfun _next()\n\n\nfun box\n _next(): \nU64\n val\n\n\nPrivate.\n\n\nReturn the next time at which the timing wheels should be advanced. This is\nadjusted for slop, so it yields nanoseconds. If no events are pending, this\nreturns -1.\n\n\nfun _set_time()\n\n\nfun ref\n _set_time(): \nU64\n val\n\n\nPrivate.\n\n\nSet the current time with precision reduced by the slop bits. Return the\nelapsed time.\n\n\nfun _wheels()\n\n\nfun tag\n _wheels(): \nUSize\n val\n\n\nPrivate.",
            "title": "actor Timers"
        },
        {
            "location": "/time-Timers/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-Timers/#new-create",
            "text": "new create(optional slop:  USize  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/time-Timers/#behaviours",
            "text": "",
            "title": "Behaviours"
        },
        {
            "location": "/time-Timers/#be-apply",
            "text": "be apply(timer:  Timer  iso)  Public.  Sets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.",
            "title": "be apply()"
        },
        {
            "location": "/time-Timers/#be-cancel",
            "text": "be cancel(timer:  Timer  tag)  Public.  Cancels a timer.",
            "title": "be cancel()"
        },
        {
            "location": "/time-Timers/#be-dispose",
            "text": "be dispose()  Public.  Dipose of this set of timing wheels.",
            "title": "be dispose()"
        },
        {
            "location": "/time-Timers/#be-_event_notify",
            "text": "be _event_notify(event:  Pointer [ AsioEvent  val] tag, flags:  U32  val, arg:  U32  val)  Private.  When the event fires, advance the timing wheels.",
            "title": "be _event_notify()"
        },
        {
            "location": "/time-Timers/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/time-Timers/#fun-_advance",
            "text": "fun ref\n _advance():  None  val  Private.  Update the current time, process all the timing wheels, and set the event\nfor the next time we need to advance.",
            "title": "fun _advance()"
        },
        {
            "location": "/time-Timers/#fun-_bits",
            "text": "fun tag\n _bits():  USize  val  Private.",
            "title": "fun _bits()"
        },
        {
            "location": "/time-Timers/#fun-_expiration_max",
            "text": "fun tag\n _expiration_max():  U64  val  Private.  Get the maximum time the timing wheels cover. Anything beyond this is\nscheduled on the last timing wheel.",
            "title": "fun _expiration_max()"
        },
        {
            "location": "/time-Timers/#fun-_fire",
            "text": "fun ref\n _fire(timer:  Timer  ref):  None  val  Private.  Fire a timer if necessary, then schedule it on the correct timing wheel\nbased on how long it is until it expires.",
            "title": "fun _fire()"
        },
        {
            "location": "/time-Timers/#fun-_get_wheel",
            "text": "fun ref\n _get_wheel(rem:  U64  val):  _TimingWheel  ref ?  Private, may raise an error.  Get the hierarchical timing wheel for the given time until expiration.",
            "title": "fun _get_wheel()"
        },
        {
            "location": "/time-Timers/#fun-_next",
            "text": "fun box\n _next():  U64  val  Private.  Return the next time at which the timing wheels should be advanced. This is\nadjusted for slop, so it yields nanoseconds. If no events are pending, this\nreturns -1.",
            "title": "fun _next()"
        },
        {
            "location": "/time-Timers/#fun-_set_time",
            "text": "fun ref\n _set_time():  U64  val  Private.  Set the current time with precision reduced by the slop bits. Return the\nelapsed time.",
            "title": "fun _set_time()"
        },
        {
            "location": "/time-Timers/#fun-_wheels",
            "text": "fun tag\n _wheels():  USize  val  Private.",
            "title": "fun _wheels()"
        },
        {
            "location": "/time-_TimingWheel/",
            "text": "class _TimingWheel\n\n\nIn package \"time\".\n\n\nPrivate, default capability ref.\n\n\nA timing wheel in a hierarchical set of timing wheels. Each wheel covers 6\nbits of precision.\n\n\nConstructors\n\n\nnew create()\n\n\nnew create(index: \nUSize\n val)\n\n\nPublic.\n\n\nFunctions\n\n\nfun advance()\n\n\nfun ref\n advance(list: \nList\n[\nTimer\n ref] ref, current: \nU64\n val, elapsed: \nU64\n val): \nBool\n val\n\n\nPublic.\n\n\nRemove pending timers from this timing wheel and put them on the pending\nlist supplied. Needs the current time and the elapsed time since the\nprevious advance. Returns true if the next timing wheel in the hierarchy\nshould be advanced.\n\n\nfun _bits()\n\n\nfun tag\n _bits(): \nUSize\n val\n\n\nPrivate.\n\n\nfun clear()\n\n\nfun ref\n clear(): \nNone\n val\n\n\nPublic.\n\n\nCancels all pending timers.\n\n\nfun _mask()\n\n\nfun tag\n _mask(): \nU64\n val\n\n\nPrivate.\n\n\nfun _max()\n\n\nfun tag\n _max(): \nUSize\n val\n\n\nPrivate.\n\n\nfun next()\n\n\nfun box\n next(current: \nU64\n val): \nU64\n val\n\n\nPublic.\n\n\nGiven a current time, return the next time at which this timing wheel\nshould be advanced. Returns -1 if no timers are on this timing wheel.\n\n\nfun schedule()\n\n\nfun ref\n schedule(timer: \nTimer\n ref): \nNone\n val\n\n\nPublic.\n\n\nSchedule a timer on this wheel. Mark the bit indicating that the given slot\nhas timers in its list.\n\n\nfun _slot()\n\n\nfun box\n _slot(time: \nU64\n val): \nU64\n val\n\n\nPrivate.\n\n\nReturn the slot for a given time.",
            "title": "class _TimingWheel"
        },
        {
            "location": "/time-_TimingWheel/#constructors",
            "text": "",
            "title": "Constructors"
        },
        {
            "location": "/time-_TimingWheel/#new-create",
            "text": "new create(index:  USize  val)  Public.",
            "title": "new create()"
        },
        {
            "location": "/time-_TimingWheel/#functions",
            "text": "",
            "title": "Functions"
        },
        {
            "location": "/time-_TimingWheel/#fun-advance",
            "text": "fun ref\n advance(list:  List [ Timer  ref] ref, current:  U64  val, elapsed:  U64  val):  Bool  val  Public.  Remove pending timers from this timing wheel and put them on the pending\nlist supplied. Needs the current time and the elapsed time since the\nprevious advance. Returns true if the next timing wheel in the hierarchy\nshould be advanced.",
            "title": "fun advance()"
        },
        {
            "location": "/time-_TimingWheel/#fun-_bits",
            "text": "fun tag\n _bits():  USize  val  Private.",
            "title": "fun _bits()"
        },
        {
            "location": "/time-_TimingWheel/#fun-clear",
            "text": "fun ref\n clear():  None  val  Public.  Cancels all pending timers.",
            "title": "fun clear()"
        },
        {
            "location": "/time-_TimingWheel/#fun-_mask",
            "text": "fun tag\n _mask():  U64  val  Private.",
            "title": "fun _mask()"
        },
        {
            "location": "/time-_TimingWheel/#fun-_max",
            "text": "fun tag\n _max():  USize  val  Private.",
            "title": "fun _max()"
        },
        {
            "location": "/time-_TimingWheel/#fun-next",
            "text": "fun box\n next(current:  U64  val):  U64  val  Public.  Given a current time, return the next time at which this timing wheel\nshould be advanced. Returns -1 if no timers are on this timing wheel.",
            "title": "fun next()"
        },
        {
            "location": "/time-_TimingWheel/#fun-schedule",
            "text": "fun ref\n schedule(timer:  Timer  ref):  None  val  Public.  Schedule a timer on this wheel. Mark the bit indicating that the given slot\nhas timers in its list.",
            "title": "fun schedule()"
        },
        {
            "location": "/time-_TimingWheel/#fun-_slot",
            "text": "fun box\n _slot(time:  U64  val):  U64  val  Private.  Return the slot for a given time.",
            "title": "fun _slot()"
        }
    ]
}